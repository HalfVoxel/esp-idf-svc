searchState.loadedDescShard("esp_idf_svc", 3, "&lt; Time of arrival of FTM frame at FTM Initiator in pSec\n&lt; Time of departure of ACK from FTM Initiator in pSec\n&lt; Time of arrival of ACK at FTM Responder in pSec\n&lt; ASN1 type, e.g. MBEDTLS_ASN1_UTF8_STRING.\n&lt; ASN1 type, e.g. MBEDTLS_ASN1_UTF8_STRING.\n&lt; Target IP address, either IPv4 or IPv6\n&lt; FreeRTOS task configuration.\n&lt; core to which the event loop task is pinned to, ignored …\n&lt; name of the event loop task; if NULL, a dedicated task …\n&lt; Priority of internal ping task\n&lt; Priority of FreeRTOS task which runs the server\n!&lt; repl task priority\n&lt; priority of the event loop task, ignored if task name is …\n&lt; Priority of FreeRTOS task which runs the server\n&lt; Priority of server task\n!&lt; repl task stack size\n&lt; stack size of the event loop task, ignored if task name …\n&lt; Stack size of internal ping task\n&lt; GPTimer ETM task type\n&lt; The raw certificate body (DER). The part that is To Be …\n&lt; The raw certificate body (DER). The part that is To Be …\n@brief Wait for transmission of output\n&lt; tcdrain without context pointer\n&lt; tcdrain with context pointer\n@brief Suspend or restart the transmission or reception of …\n&lt; tcflow without context pointer\n&lt; tcflow with context pointer\n@brief Flush non-transmitted output data and non-read …\n&lt; tcflush without context pointer\n&lt; tcflush with context pointer\n@brief Gets the parameters of the terminal\n&lt; tcgetattr without context pointer\n&lt; tcgetattr with context pointer\n@brief Get process group ID for session leader for …\n&lt; tcgetsid without context pointer\n&lt; tcgetsid with context pointer\n@brief Send a break for a specific duration\n&lt; tcsendbreak without context pointer\n&lt; tcsendbreak with context pointer\n@brief Sets the parameters of the terminal\n&lt; tcsetattr without context pointer\n&lt; tcsetattr with context pointer\n&lt; telldir without context pointer\n&lt; telldir with context pointer\n@brief Type of Temp Sensor clock source\n@brief Configuration of measurement range for the …\n@brief Disable temperature sensor\n@brief Enable the temperature sensor\n@brief Read temperature sensor data that is converted to …\n@brief Type of temperature sensor driver handle\n@brief Install temperature sensor driver\n@brief Uninstall the temperature sensor driver\n&lt; The thread name.\n&lt; When scan_threshold is set, only APs which have an auth …\n&lt; Compile time\n&lt; Supervision timeout for the LE Link. Range: 0x000A to …\n&lt; Supervision timeout for the LE Link. Range: 0x000A to …\n&lt; Supervision timeout for the LE Link. Range: 0x000A to …\n&lt; Supervision timeout for the LE Link. Range: 0x000A to …\n&lt; UART data read timeout flag for UART_DATA event (no new …\n&lt; Network timeout in milliseconds. Note: If this value is …\n&lt; TWDT timeout duration in milliseconds\n&lt; response timeout, in milliseconds\n&lt; Timeout value (in milliseconds) of each ping procedure\n&lt; Network timeout in milliseconds. Note: If this value is …\n&lt; Network timeout in milliseconds\n&lt; Abort network operation if it is not completed after …\n@brief Timer alarm command\n&lt; Disable timer alarm\n&lt; Enable timer alarm\n&lt; timer handler argument\n&lt; timer handler argument\n@brief Timer autoreload command\n&lt; Disable auto-reload: hardware will not load counter …\n&lt; Enable auto-reload: hardware will load counter value …\n@brief Timer configurations\n@brief Timer count direction\n&lt; Descending Count from cnt.high|cnt.low\n&lt; Maximum number of timer count directions\n&lt; Ascending Count from Zero\n@brief Deinitializes the timer.\n@brief Disable timer interrupt\n@brief Enable timer interrupt\n&lt; Timer event, upon which MCPWM timer will generate the …\n&lt; abstruct time when timer expire\n&lt; abstruct time when timer expire\n&lt; timer handler\n&lt; timer handler\n@brief Get timer alarm value.\n@brief Get timer configure value.\n@brief Read the counter value of hardware timer, in unit …\n@brief Read the counter value of hardware timer.\n@brief Clear timer interrupt status, just used in ISR\n@brief Enable alarm interrupt, just used in ISR\n@brief Get auto reload enable status, just used in ISR\n@brief Get the current counter value, just used in ISR\n@brief Get interrupt status, just used in ISR\n@brief Disable timer group interrupt, by disable mask\n@brief Enable timer group interrupt, by enable mask\n@brief Set the alarm threshold for the timer, just used in …\n@brief Enable/disable a counter, just used in ISR\n@brief Timer-Group ID\n&lt; Hw timer group 0\n&lt; Hw timer group 1\n&lt; Maximum number of Hw timer groups\n@brief Timer ID\n&lt; Select timer0 of GROUPx\n@brief Initializes and configure the timer.\n@brief Timer interrupt type\n&lt; Interrupt mode: level mode\n@brief Interrupt types of the timer.\n&lt; interrupt of timer 0\n&lt; interrupt of watchdog\n@brief Add ISR handle callback for the corresponding timer.\n@brief Remove ISR handle callback for the corresponding …\n@brief Interrupt handle, used in order to free the isr …\n@brief Register Timer interrupt handler, the handler is an …\n@brief Interrupt handler callback function\n&lt; timer linker\n&lt; timer linker\n&lt; The timer source of channel (0 - LEDC_TIMER_MAX-1)\n@brief Pause the counter of hardware timer.\n&lt; timer period, 0 means timer is not periodic repeated\n&lt; timer period, 0 means timer is not periodic repeated\n&lt; Select the timer source of channel (0 - LEDC_TIMER_MAX-1)\n@brief Enable or disable generation of timer alarm events.\n@brief Set timer alarm value.\n@brief Enable or disable counter reload function when …\n@brief Set counting mode for hardware timer.\n@brief Set counter value to hardware timer.\n@brief Set hardware divider of the source clock to the …\n@brief Type of Timer Group clock source, reserved for the …\n@brief Start the counter of hardware timer.\n@brief Timer start/stop command\n&lt; Pause timer counter\n&lt; Start timer counter\n&lt;  XTS tweak key\n&lt; The TLS NamedCurve identifier.\n@brief Keep alive parameters structure\n@brief Keep alive parameters structure\n&lt; TLS protocol version of the connection, e.g., TLS 1.2, …\n&lt; TLS protocol version of the connection, e.g., TLS 1.2, …\n&lt; TLS protocol version of the connection, e.g., TLS 1.2, …\nType by which software timers are referenced.  For …\n&lt; state represents whether the root is able to access …\n&lt; to external DS\n&lt; toDS state, devices shall check this state firstly …\n&lt; to self\n&lt; to child queue\n&lt; to child (P2P) queue\n&lt; to parent queue\n&lt; to parent (P2P) queue\n&lt; Token from cellphone which is used to send ACK to …\n&lt; Topic associated with this event\n&lt; LWT (Last Will and Testament) message topic\n&lt; Length of the topic for this event associated with this …\nTopic definition struct\n&lt; data type of service\n&lt; Type of Service, a field specified in the IP header\ntotal length of this buffer and all next buffers in chain …\n&lt; number of bytes processed\n&lt; number of bytes processed\n&lt;  Total bytes allocated to data in the heap.\n&lt;  Total number of (variable size) blocks in the heap.\n&lt; I2S Total number of channels. If it is smaller than the …\n&lt; I2S Total number of channels. If it is smaller than the …\n&lt; Total length of the data (longer data are supplied with …\n&lt; Number of all entries.\n&lt;  Total free bytes in the heap. Equivalent to …\n&lt; Total number of ESPNOW peers, maximum value is …\n&lt; Total number of ESPNOW peers, maximum value is …\n&lt; I2S total number of slots. If it is smaller than the …\nTouch sensor charge/discharge speed\n&lt;Touch sensor charge / discharge speed, always zero\n&lt;Touch sensor charge / discharge speed, slowest\n&lt;Touch sensor charge / discharge speed\n&lt;Touch sensor charge / discharge speed\n&lt;Touch sensor charge / discharge speed\n&lt;Touch sensor charge / discharge speed\n&lt;Touch sensor charge / discharge speed\n&lt;Touch sensor charge / discharge speed, fast\nTouch sensor filter configuration\nTouch sensor filter configuration\n@brief Touch channel IIR filter coefficient configuration. …\n&lt;The filter mode is first-order IIR filter. The …\n&lt;The filter mode is first-order IIR filter. The …\n&lt;The filter mode is first-order IIR filter. The …\n&lt;The filter mode is first-order IIR filter. The …\n&lt;The filter mode is first-order IIR filter. The …\n&lt;The filter mode is first-order IIR filter. The …\n&lt;The filter mode is first-order IIR filter. The …\n&lt;The filter mode is jitter filter\nTouch sensor FSM mode\n&lt;To start touch FSM by software trigger\n&lt;To start touch FSM by timer\nTouch sensor high reference voltage\n&lt;Touch sensor high reference voltage, 2.4V\n&lt;Touch sensor high reference voltage, 2.5V\n&lt;Touch sensor high reference voltage, 2.6V\n&lt;Touch sensor high reference voltage, 2.7V\n&lt;Touch sensor high reference voltage, no change\nTouch sensor low reference voltage\n&lt;Touch sensor low reference voltage, 0.5V\n&lt;Touch sensor low reference voltage, 0.6V\n&lt;Touch sensor low reference voltage, 0.7V\n&lt;Touch sensor low reference voltage, 0.8V\n&lt;Touch sensor low reference voltage, no change\n&lt;Set touch channel number for sleep pad. Only one touch …\nTouch channel idle state configuration\n&lt;Idle status of touch channel is ground connection\n&lt;Idle status of touch channel is high resistance state\nTouch sensor denoise configuration\n&lt;Denoise channel internal reference capacitance is 5pf\n&lt;Denoise channel internal reference capacitance is 6.4pf\n&lt;Denoise channel internal reference capacitance is 7.8pf\n&lt;Denoise channel internal reference capacitance is 9.2pf\n&lt;Denoise channel internal reference capacitance is 10.6pf\n&lt;Denoise channel internal reference capacitance is 12.0pf\n&lt;Denoise channel internal reference capacitance is 13.4pf\n&lt;Denoise channel internal reference capacitance is 14.8pf\n&lt;Denoise range is 10bit\n&lt;Denoise range is 12bit\n&lt;Denoise range is 4bit\n&lt;Denoise range is 8bit\nTouch sensor denoise configuration\n&lt;Active for one of the enabled channels.\n&lt;Measurement done for one of the enabled channels.\n&lt;Inactive for one of the enabled channels.\n&lt;Measurement done for all the enabled channels.\n&lt;Timeout for one of the enabled channels.\nTouch sensor shield channel drive capability level\n&lt;The max equivalent capacitance in shield channel is 40pf\n&lt;The max equivalent capacitance in shield channel is 80pf\n&lt;The max equivalent capacitance in shield channel is 120pf\n&lt;The max equivalent capacitance in shield channel is 160pf\n&lt;The max equivalent capacitance in shield channel is 200pf\n&lt;The max equivalent capacitance in shield channel is 240pf\n&lt;The max equivalent capacitance in shield channel is 280pf\n&lt;The max equivalent capacitance in shield channel is 320pf\nTouch sensor channel sleep configuration\nTouch pad channel\n&lt; Touch pad channel 0 is GPIO4(ESP32)\n&lt; Touch pad channel 1 is GPIO0(ESP32) / GPIO1(ESP32-S2)\n&lt; Touch pad channel 2 is GPIO2(ESP32) / GPIO2(ESP32-S2)\n&lt; Touch pad channel 3 is GPIO15(ESP32) / GPIO3(ESP32-S2)\n&lt; Touch pad channel 4 is GPIO13(ESP32) / GPIO4(ESP32-S2)\n&lt; Touch pad channel 5 is GPIO12(ESP32) / GPIO5(ESP32-S2)\n&lt; Touch pad channel 6 is GPIO14(ESP32) / GPIO6(ESP32-S2)\n&lt; Touch pad channel 7 is GPIO27(ESP32) / GPIO7(ESP32-S2)\n&lt; Touch pad channel 8 is GPIO33(ESP32) / GPIO8(ESP32-S2)\n&lt; Touch pad channel 9 is GPIO32(ESP32) / GPIO9(ESP32-S2)\nTouch sensor waterproof configuration\nTouch sensor waterproof configuration\n@brief Level of filter applied on the original data …\n&lt;Filter the raw data. The coefficient is 2 (Typical value).\n&lt;Filter the raw data. The coefficient is 4.\n&lt;Filter the raw data. The coefficient is 8.\n&lt;No filtering of raw data.\nTouch sensor initial charge level\n&lt;Initial level of charging voltage, high level\n&lt;Initial level of charging voltage, low level\nESP32 Only\n&lt;Touch interrupt will happen if counter value is larger …\n&lt;Touch interrupt will happen if counter value is less than …\n&lt; wakeup interrupt is generated if both SET1 and SET2 are …\n&lt; wakeup interrupt is generated if SET1 is “touched”\nTouch sensor high reference voltage attenuation\n&lt;Touch sensor high reference voltage attenuation,   0V …\n&lt;Touch sensor high reference voltage attenuation, 0.5V …\n&lt;Touch sensor high reference voltage attenuation, 1.0V …\n&lt;Touch sensor high reference voltage attenuation, 1.5V …\n&lt;Touch sensor high reference voltage attenuation, no change\n&lt; I2C bus timeout period\n&lt; Max transfer speed\n&lt; Transfer id\n&lt; Transfer id\n&lt; Transfer id\n&lt; Transaction data length, in bits\n&lt; Depth of internal transfer queue, increase this value …\n&lt; Depth of internal transfer queue, increase this value …\n&lt; Size of internal transaction queue\n@endcond\n@brief Transfer complete callback\n&lt; transmit function pointer\n@brief Transmit packet from Ethernet MAC\n&lt; transmit function pointer\n@brief Transmit packet from Ethernet MAC\n@brief Transmit packet from Ethernet MAC constructed with …\n@brief Transmit packet from Ethernet MAC constructed with …\n&lt; transmit wrap function pointer\n&lt; transmit wrap function pointer\n&lt; Selects transport\n&lt; Custom transport handle to use. Warning: The transport …\n&lt; HTTP transport type, see <code>esp_http_client_transport_t</code>\n&lt; tree top, mesh_assoc IE\n&lt; Trigger panic when timeout occurs\n&lt; Enables triple sampling when the TWAI controller samples …\n&lt; truncate without context pointer\n&lt; truncate with context pointer\n&lt; Timing segment 1 (Number of time quanta, between 1 to 16)\n&lt; Timing segment 2 (Number of time quanta, 1 to 8)\nType by which tasks are referenced.  For example, a call …\n&lt; Time to Live,a field specified in the IP header\n@brief   Clear the receive queue\n@brief   Clear the receive queue of a given TWAI driver …\n@brief   Clear the transmit queue\n@brief Clear the transmit queue of a given TWAI driver …\n@brief TWAI clock source\n@brief   Install TWAI driver\n@brief Install TWAI driver and return a handle\n@brief   Uninstall the TWAI driver\n@brief Uninstall the TWAI driver with a given handle\n@brief   Structure for acceptance filter configuration of …\n@brief   Structure for general configuration of the TWAI …\n@brief   Get current status information of the TWAI driver\n@brief Get current status information of a given TWAI …\n@brief TWAI controller handle\n@brief   Start the bus recovery process\n@brief Start the bus recovery process with a given handle\n@brief   Structure to store a TWAI message\n@brief   TWAI Controller operating modes\n&lt; The TWAI controller will not influence the bus (No …\n&lt; Normal operating mode where TWAI controller can …\n&lt; Transmission does not require acknowledgment. Use this …\n@brief   Read TWAI driver alerts\n@brief Read TWAI driver alerts with a given handle\n@brief   Receive a TWAI message\n@brief Receive a TWAI message via a given handle\n@brief   Reconfigure which alerts are enabled\n@brief Reconfigure which alerts are enabled, with a given …\n@brief   Start the TWAI driver\n@brief Start the TWAI driver with a given handle\n@brief   TWAI driver states\n&lt; Bus-off state. The TWAI controller cannot participate in …\n&lt; Recovering state. The TWAI controller is undergoing bus …\n&lt; Running state. The TWAI controller can transmit and …\n&lt; Stopped state. The TWAI controller will not participate …\n@brief   Structure to store status information of TWAI …\n@brief   Stop the TWAI driver\n@brief Stop the TWAI driver with a given handle\n@brief   Structure for bit timing configuration of the …\n@brief   Transmit a TWAI message\n@brief Transmit a TWAI message via a given handle\n&lt; The AES context used for tweak computation.\n&lt; WiFi antenna mode for transmission, it can be set to …\n&lt; WiFi TX buffer type\n&lt; Pointer to transmit buffer, or NULL for no MOSI phase\n&lt; Pointer to transmit buffer, or NULL for no MOSI phase\n&lt;  channel for sending test data, tx_channel = (Frequency …\n&lt;  channel for sending test data, tx_channel = (Frequency …\n&lt; Array of TX channels that are about to be managed by a …\n@brief Transmit LCD RGB data\n&lt; RMT TX parameter\n&lt; If SPI_TRANS_USE_TXDATA is set, data set here is sent …\n&lt; I2S auto clear tx descriptor if there is underflow …\n&lt; I2S auto clear tx descriptor if there is underflow …\n&lt; Current value of Transmit Error Counter\n&lt; Number of messages that failed transmissions\n!&lt; GPIO number for TX path, -1 means using default one\n&lt; Transmit GPIO number\n&lt; pkt tx data length value\n@brief Transmit LCD command and corresponding parameters\n&lt; tx phy type\n&lt; tx phy type\n&lt; ext adv tx power\n&lt; extend advertising tx power\n&lt; periodic advertising tx power\n&lt; Number of messages TX queue can hold (set to 0 to …\n&lt; default Tx antenna\n&lt; UART TX empty interrupt threshold.\n&lt; default Tx power\n&lt;When the configured output format is 12bit.\n&lt; ipaddress type\n@ref lwip_ip_addr_type\n&lt; WebSocket frame type\n&lt; Whether the interrupt is an edge or level type …\n&lt; ipaddress type\n&lt; Service type\n&lt; Service type\n&lt; Type of smartconfig(ESPTouch or AirKiss).\n&lt; ESP defined IE type, include Assoc IE, SSID IE, Ext …\n@ref lwip_ip_addr_type\n&lt; option type\n&lt; partition type (app/data)\n&lt; The SAN type, value of MBEDTLS_X509_SAN_XXX.\n&lt; WebSocket frame type\n&lt; Type of stored key-value pair\n&lt; I2S event type\n&lt; UART event type\n&lt; ext adv type\n&lt; The attribute type\n&lt; The type id.\na bit field indicating pbuf type and allocation sources …\n&lt; IP address union\n&lt; IP address union\n@brief UART AT cmd char configuration parameters Note that …\n@brief Clear UART interrupt status\n@brief UART configuration parameters for uart_param_config …\n@brief Clear UART interrupt enable bits\n@brief   UART disable pattern detect function. Designed …\n@brief Disable UART RX interrupt (RX_FULL &amp; RX_TIMEOUT …\n@brief Disable UART TX interrupt (TX_FULL &amp; TX_TIMEOUT …\n@brief Uninstall UART driver.\n@brief Install UART driver and set the UART to the default …\n@brief Set UART interrupt enable\n@brief UART enable pattern detect function. Designed for …\n@brief Enable UART RX interrupt (RX_FULL &amp; RX_TIMEOUT …\n@brief Enable UART TX interrupt (TX_FULL &amp; TX_TIMEOUT …\n@brief Event structure used in UART event queue\n@brief UART event types used in the ring buffer\n&lt; UART break event\n&lt; UART RX buffer full event\n&lt; UART data event\n&lt; UART TX data and break event\n&lt; UART event max index\n&lt; UART FIFO overflow event\n&lt; UART RX frame error event\n&lt; UART RX parity event\n&lt; UART pattern detected\n&lt; UART wakeup event\n@brief Alias of uart_flush_input. UART ring buffer flush. …\n@brief Clear input buffer, discard all the data is in the …\n@brief Get the UART baud rate configuration.\n@brief   UART get RX ring buffer cached data length\n@brief Returns collision detection flag for RS485 mode …\n@brief Get the UART hardware flow control configuration.\n@brief Get the UART parity mode configuration.\n@brief Get the frequency of a clock source for the HP UART …\n@brief Get mutex guarding select() notifications\n@brief Get the UART stop bit configuration.\n@brief   UART get TX ring buffer free space size\n@brief Get the number of RX pin signal edges for light …\n@brief Get the UART data bit configuration.\n@brief UART hardware flow control modes\n&lt; enable TX hardware flow control (cts)\n&lt; enable hardware flow control\n&lt; disable hardware flow control\n&lt; enable RX hardware flow control (rts)\n@brief Configure UART interrupts.\n@brief UART interrupt configuration parameters for …\n@brief Checks whether the driver is installed or not\n@brief UART mode selection\n&lt; mode: IRDA  UART mode\n&lt; mode: application control RS485 UART mode (used for test …\n&lt; mode: RS485 collision detection UART mode (used for test …\n&lt; mode: half duplex RS485 UART mode control by RTS pin\n&lt; mode: regular UART mode\n@brief Set UART configuration parameters.\n@brief UART parity constants\n&lt; Disable UART parity\n&lt; Enable UART even parity\n&lt; Enable UART odd parity\n@brief Return the nearest detected pattern position in …\n@brief Return the nearest detected pattern position in …\n@brief Allocate a new memory with the given length to save …\n@brief UART port number, can be UART_NUM_0 ~ (UART_NUM_MAX …\n&lt; UART port 0\n&lt; UART port 1\n&lt; UART port max\n@brief UART read bytes from UART buffer\n@brief Type of UART clock source, reserved for the legacy …\n@brief Configure behavior of UART RX timeout interrupt.\n@brief Set UART baud rate.\n@brief Manually set the UART DTR pin level.\n@brief Set hardware flow control.\n@brief Set UART line inverse mode\n@brief Configure TX signal loop back to RX module, just …\n@brief UART set communication mode\n@brief Set UART parity mode.\n@brief Assign signals of a UART peripheral to GPIO pins\n@brief Manually set the UART RTS pin level. @note  UART …\n@brief Set uart threshold value for RX fifo full @note If …\n@brief UART set threshold timeout for TOUT feature\n@brief Set notification callback function for select() …\n@brief Set UART stop bits.\n@brief Set software flow control.\n@brief Set uart threshold values for TX fifo empty\n@brief Set UART idle interval after tx FIFO is empty\n@brief Set the number of RX pin signal edges for light …\n@brief Set UART data bits.\n@brief UART signal bit map\n&lt; inverse the UART cts signal\n&lt; inverse the UART dsr signal\n&lt; inverse the UART dtr signal\n&lt; Disable UART signal inverse\n&lt; inverse the UART irda_rx signal\n&lt; inverse the UART irda_tx signal\n&lt; inverse the UART rts signal\n&lt; inverse the UART rxd signal\n&lt; inverse the UART txd signal\n@brief UART stop bits number\n&lt; stop bit: 1bit\n&lt; stop bit: 1.5bits\n&lt; stop bit: 2bits\n@brief UART software flow control configuration parameters\n@brief Send data to the UART port from a given buffer and …\n@brief Wait until UART TX FIFO is empty.\n@brief Wait until UART tx memory empty and the last char …\n@brief UART word length constants\n&lt; word length: 5bits\n&lt; word length: 6bits\n&lt; word length: 7bits\n&lt; word length: 8bits\n@brief Send data to the UART port from a given buffer and …\n@brief Send data to the UART port from a given buffer and …\n&lt; The total run time allocated to the task so far, as …\n&lt; The total run time allocated to the task so far, as …\nWaits for a direct to task notification on a particular …\nSee https://www.FreeRTOS.org/RTOS-task-notifications.html …\nconfigGENERATE_RUN_TIME_STATS, …\n&lt; ADC controlled by ULP, see <code>adc_ulp_mode_t</code>\n&lt; ext scan uncoded config parameters\n&lt; ADC unit\n&lt; ADC unit\n&lt; ADC unit\n&lt; unlink without context pointer\n&lt; unlink with context pointer\n&lt; Gatt client callback param of …\n&lt; The buffer for the unstructured types. rfc822Name, …\n&lt; Number of unused bits at the end of the string\n&lt; Number of unused bits at the end of the string\n&lt; Up-sampling param fp\n&lt; Up-sampling param fs, not allowed to be greater than 480\n&lt; Event parameter of ESP_GAP_BLE_UPDATE_CONN_PARAMS_EVT\n&lt; Event parameter of …\n&lt; DTM state change event, 0x00: DTM TX start, 0x01: DTM RX …\n&lt; Indicates whether publisher’s service ID needs to be …\n&lt; Event parameter of …\n&lt; The URI of this request (1 byte extra for null …\n&lt; The URI to handle\n&lt; The URI of this request (1 byte extra for null …\n&lt; The URI to handle\n&lt; Complete <em>MQTT</em> broker URI\nURI matcher function.\nURI matcher function.\n&lt; HTTP URL, the information on the URL is most important, …\n&lt; The minimum amount of stack space that has remained for …\n&lt; The minimum amount of stack space that has remained for …\n@brief Configuration structure for the …\n@brief Install USB-SERIAL-JTAG driver and set the …\n@brief Uninstall USB-SERIAL-JTAG driver.\n@brief Check if the USB Serial/JTAG port is connected to …\n@brief USB_SERIAL_JTAG read bytes from USB_SERIAL_JTAG …\n@brief Send data to the USB-UART port from a given buffer …\n&lt; I2S using APLL as main I2S clock, enable it to get …\n&lt; I2S using APLL as main I2S clock, enable it to get …\n&lt; Use the ECDSA peripheral for the private key operations\n&lt; Use the ECDSA peripheral for the private key operations\n&lt; True - Using esp_wifi_ftm_get_report to get FTM report, …\n&lt; Use a global ca_store for all the connections in which …\n&lt; Use a global ca_store for all the connections in which …\n&lt; Use a global ca_store for all the connections in which …\n&lt; Use a global ca_store, look esp-tls documentation for …\n&lt; Enable this option to use secure element or atecc608a …\n&lt; Enable this option to use secure element or atecc608a …\n&lt; Enable secure element, available in ESP32-ROOM-32SE, for …\n&lt; whether the child is joined\n&lt; Number of used entries.\n&lt; User-defined variable. Can be used to store eg …\n&lt; User-defined variable. Can be used to store eg …\n&lt; The User Agent string to send with HTTP requests\n&lt; WS user agent\nUser context pointer passed during URI registration.\nPointer to user context data which will be available to …\nUser context pointer passed during URI registration.\nPointer to user context data which will be available to …\n&lt; User private data, passed directly to on_color_trans_done…\n&lt; User private data, passed directly to on_color_trans_done…\n&lt; user_data context, from esp_http_client_config_t …\n&lt; user_data context, from esp_http_client_config_t …\n&lt; HTTP user_data context\nUser context data to pass as parameter to callback function\n&lt; User data, used to store externally customized data\n&lt; Using for Http authentication\n&lt; <em>MQTT</em> username\n&lt; utime without context pointer\n&lt; utime with context pointer\nUUID to be assigned to the BLE characteristic which is …\nUUID to be assigned to the BLE characteristic which is …\n&lt; UUID\n&lt; UUID\n&lt; Gatt  attribute value UUID of included service\n&lt; The attribute uuid, it’s valid for all of the type\n&lt; The uuid of the service\n&lt; The characteristic uuid\n&lt; The characteristic descriptor uuid\n&lt; The include service uuid\n&lt; 128bit UUID\n&lt; 16bit UUID\n&lt; 32bit UUID\n&lt; UUID length\n&lt; UUID value\n&lt; The priority to which the task will return if the task’…\n&lt; The priority to which the task will return if the task’…\n&lt; Current task list index being traversed.\n&lt; Current task list index being traversed.\n&lt; The priority at which the task was running (may be …\n&lt; The priority at which the task was running (may be …\nReturn the number of messages stored in a queue.\nA version of uxQueueMessagesWaiting() that can be called …\nReturn the number of free spaces available in a queue.  …\n@return The number of tasks that the real time kernel is …\n@brief Fill an array of TaskSnapshot_t structures for …\nINCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in …\nINCLUDE_uxTaskGetStackHighWaterMark2 must be set to 1 in …\nconfigUSE_TRACE_FACILITY must be defined as 1 in …\nINCLUDE_uxTaskPriorityGet must be defined as 1 for this …\nA version of uxTaskPriorityGet() that can be used from an …\nQueries a timer to determine if it is an auto-reload …\n&lt; Optional X.509 v3 extensions.\nThis function is used to provide a statically allocated …\nThis function is used to provide a statically allocated …\n@brief Hook function called on entry to tickless idle\nThe application stack overflow hook is called when a stack …\nDelete an event group that was previously created by a …\n@brief Deletes an event group previously created using …\n@cond !DOC_EXCLUDE_HEADER_SECTION\n@brief Clear current interrupt mask and set given mask\n@brief Re-enable interrupts in a nested manner (meant to …\n@brief Enter a critical section\n@brief Exit a critical section\n@brief Set interrupt mask and return current interrupt …\n@brief Set a watchpoint to watch the last 32 bytes of the …\n@brief TCB cleanup hook\n@brief Perform a context switch from a task\n@brief Perform a context switch from an ISR\n@brief Yields the other core\nDelete a queue - freeing all the memory allocated for …\n@brief Deletes a queue previously created using …\n@cond !DOC_EXCLUDE_HEADER_SECTION\n@brief   Delete a ring buffer\n@brief Deletes a ring buffer previously created using …\n@brief   Get information about ring buffer status\n@brief   Return a previously-retrieved item to the ring …\n@brief   Return a previously-retrieved item to the ring …\n@brief Deletes a semaphore previously created using one of …\nDeletes a stream buffer that was previously created using …\nMemory regions are assigned to a restricted task when the …\nDelay a task for a given number of ticks.  The actual time …\nINCLUDE_vTaskDelete must be defined as 1 for this function …\n@brief Deletes a task previously created using …\nNOTE:  At the time of writing only the x86 real mode port, …\nA version of xTaskNotifyGiveIndexed() that can be called …\nconfigUSE_TRACE_FACILITY must be defined as 1 for this …\nconfigGENERATE_RUN_TIME_STATS and …\n@brief Fill a TaskSnapshot_t structure for specified task.\nconfigUSE_TRACE_FACILITY and …\nINCLUDE_vTaskPrioritySet must be defined as 1 for this …\nINCLUDE_vTaskSuspend must be defined as 1 for this …\nEach task contains an array of pointers that is …\nSet local storage pointer and deletion callback.\nCapture the current time for future use with …\nStarts the real time kernel tick processing.  After …\nINCLUDE_vTaskSuspend must be defined as 1 for this …\nSuspends the scheduler without disabling interrupts.  …\nUpdates a timer to be either an auto-reload timer, in …\nSets the ID assigned to the timer.\n&lt; The named value.\n&lt;Raw data value\n&lt; option value\n&lt; The named value.\n&lt; The named value.\n&lt; Equivalent unsigned value for the RMT item\n&lt; Equivalent unsigned value for the RMT symbol\n&lt; Start time of certificate validity.\n&lt; End time of certificate validity.\n&lt; Element value array\n&lt; Gatt attribute value\n&lt; Characteristic value\n&lt; Notify attribute value\n&lt; The write attribute value\n&lt; The indication or notification value , value is valid …\n&lt; Characteristic value length\n&lt; Notify attribute value\n&lt; Event parameter of ESP_GAP_BLE_VENDOR_CMD_COMPLETE_EVT\n&lt; vendor specific configuration, optional, left as NULL if …\n@brief Vendor Information Element header\n&lt; Vendor identifier (OUI).\n&lt; Vendor-specific OUI type.\nUnique version number of security implementation\nUnique version number of security implementation\n&lt; Security verification of the broker\nPointer to the buffer containing the verifier\nPointer to the buffer containing the verifier\nPointer to the buffer containing the verifier\nLength (in bytes) of the verifier\nLength (in bytes) of the verifier\nLength (in bytes) of the verifier\n&lt; ADC Calibration\n&lt; The crypto callback function structure version\n&lt; CRL version (1=v1, 2=v2)\n&lt; The X.509 version. (1=v1, 2=v2, 3=v3)\n&lt; Application version\n&lt; Bootloader version\n&lt; version number of the defined structure\n&lt; max vote times in self-healing, default:1000\n&lt; the voted address after connection\n&lt; the router RSSI of the voted address\n&lt; vote started\n&lt; vote ttl, indicate the voting is from myself or from …\n&lt; the number of all voting nodes\n&lt; Vref used by lookup table\n&lt; if true, we create a semaphore to signal time sync event\n&lt; if true, we create a semaphore to signal time sync event\n&lt; Warm up time before assuming NAN Anchor Master role\n@brief     The Rx callback function of Action Tx operations\n@brief Action Frame Tx Request\n@brief Range of active scan times per channel\n@brief WiFi antenna configuration\n@brief WiFi GPIOs configuration for antenna selection\n@brief WiFi GPIO configuration for antenna selection\n@brief WiFi antenna mode\n&lt; Enable WiFi antenna 0 only\n&lt; Enable WiFi antenna 1 only\n&lt; Enable WiFi antenna 0 and 1, automatically select an …\n&lt; Invalid WiFi enabled antenna\n@brief WiFi antenna\n&lt; WiFi antenna 0\n&lt; WiFi antenna 1\n&lt; Invalid WiFi antenna\n@brief Soft-AP configuration settings for the device\n@brief Description of a WiFi AP\n&lt; authenticate mode : WiFi EAP security\n&lt; authenticate mode : open\n&lt; authenticate mode : OWE\n&lt; authenticate mode : WAPI_PSK\n&lt; authenticate mode : WEP\n&lt; authenticate mode : WiFi EAP security\n&lt; authenticate mode : WPA2_PSK\n&lt; authenticate mode : WPA2_WPA3_PSK\n&lt; authenticate mode : WPA3_ENT_SUITE_B_192_BIT\n&lt; this authentication mode will yield same result as …\n&lt; this authentication mode will yield same result as …\n&lt; authenticate mode : WPA3_PSK\n&lt; authenticate mode : WPA_PSK\n&lt; authenticate mode : WPA_WPA2_PSK\n@brief WiFi beacon monitor parameter configuration\n@brief Disable Wi-Fi and BT common module\n@brief Enable Wi-Fi and BT common module\n@brief     Callocate memory for WiFi driver\n&lt; the cipher type is AES-CMAC-128\n&lt; the cipher type is AES-GMAC-128\n&lt; the cipher type is AES-GMAC-256\n&lt; the cipher type is CCMP\n&lt; the cipher type is GCMP\n&lt; the cipher type is GCMP-256\n&lt; the cipher type is none\n&lt; the cipher type is SMS4\n&lt; the cipher type is TKIP\n&lt; the cipher type is TKIP and CCMP\n&lt; the cipher type is unknown\n&lt; the cipher type is WEP104\n&lt; the cipher type is WEP40\n@brief Configuration data for device’s AP or STA or NAN.\n&lt; Country policy is auto, use the country info of AP to …\n&lt; Country policy is manual, always use the configured …\n@brief Structure describing WiFi country-based regional …\n@brief The RX callback function of Channel State …\n@brief CSI data type\nArgument structure for WIFI_EVENT_ACTION_TX_STATUS event\nArgument structure for WIFI_EVENT_AP_PROBEREQRECVED event\nArgument structure for WIFI_EVENT_AP_STACONNECTED event\nArgument structure for WIFI_EVENT_AP_STADISCONNECTED event\nArgument structure for WIFI_EVENT_AP_WPS_RG_FAILED event\nArgument structure for WIFI_EVENT_AP_WPS_RG_PIN event\nArgument structure for WIFI_EVENT_AP_WPS_RG_SUCCESS event\nArgument structure for WIFI_EVENT_STA_BSS_RSSI_LOW event\nArgument structure for WIFI_EVENT_FTM_REPORT event\nArgument structure for WIFI_EVENT_HOME_CHANNEL_CHANGE event\nArgument structure for WIFI_EVENT_NAN_RECEIVE event\nArgument structure for WIFI_EVENT_NAN_REPLIED event\nArgument structure for WIFI_EVENT_NAN_SVC_MATCH event\nArgument structure for WIFI_EVENT_NDP_CONFIRM event\nArgument structure for WIFI_EVENT_NDP_INDICATION event\nArgument structure for WIFI_EVENT_NDP_TERMINATED event\nArgument structure for WIFI_EVENT_ROC_DONE event\nArgument structure for WIFI_EVENT_STA_AUTHMODE_CHANGE event\nArgument structure for WIFI_EVENT_STA_CONNECTED event\nArgument structure for WIFI_EVENT_STA_DISCONNECTED event\nArgument structure for WIFI_EVENT_SCAN_DONE event\nArgument structure for WIFI_EVENT_STA_WPS_ER_PIN event\nArgument structure for WIFI_EVENT_STA_WPS_ER_SUCCESS event\nArgument structure for WIFI_EVENT_STA_WPS_ER_FAILED event\n&lt; WPS normal fail reason\n&lt; WPS receive M2D frame\nWiFi event declarations\n&lt; Status indication of Action Tx operation\n&lt; Receive probe request packet in soft-AP interface\n&lt; a station connected to Soft-AP\n&lt; a station disconnected from Soft-AP\n&lt; Soft-AP start\n&lt; Soft-AP stop\n&lt; Soft-AP wps fails in registrar mode\n&lt; Soft-AP wps overlap in registrar mode\n&lt; Soft-AP wps pin code in registrar mode\n&lt; Soft-AP wps succeeds in registrar mode\n&lt; Soft-AP wps timeout in registrar mode\n&lt; Connectionless module wake interval start\n&lt; Receive report of FTM procedure\n&lt; WiFi home channel change，doesn’t occur when scanning\n&lt; iTWT probe\n&lt; iTWT setup\n&lt; iTWT suspend\n&lt; iTWT teardown\n&lt; Invalid WiFi event ID\n&lt; Received a Follow-up message\n&lt; Replied to a NAN peer with Service Discovery match\n&lt; NAN Discovery has started\n&lt; NAN Discovery has stopped\n&lt; NAN Service Discovery match found\n&lt; NDP Confirm Indication\n&lt; Received NDP Request from a NAN Peer\n&lt; NAN Datapath terminated indication\n&lt; Remain-on-Channel operation complete\n&lt; Finished scanning AP\n&lt; the auth mode of AP connected by device’s station …\n&lt; Station beacon timeout\n&lt; AP’s RSSI crossed configured threshold\n&lt; Station connected to AP\n&lt; Station disconnected from AP\n&lt; Station start\n&lt; Station stop\n&lt; Station wps fails in enrollee mode\n&lt; Station wps overlap in enrollee mode\n&lt; Station wps pin code in enrollee mode\n&lt; Station wps succeeds in enrollee mode\n&lt; Station wps timeout in enrollee mode\n&lt; TWT wakeup\n&lt; WiFi ready\n@brief FTM Initiator configuration\nArgument structure for\n@brief FTM operation status types\n&lt; Peer rejected FTM configuration in FTM Request\n&lt; Unknown error during FTM exchange\n&lt; Peer did not respond to FTM Requests\n&lt; FTM session did not result in any valid measurements\n&lt; FTM exchange is successful\n&lt; Peer does not support FTM\n&lt; User triggered termination\n@brief Description of a WiFi AP HE Info\n@brief Configuration for STA’s HT2040 coexist management\n@brief WiFi stack configuration parameters passed to …\n@brief WiFi ioctl command type\n&lt; Get the configuration of STA’s HT2040 coexist …\n&lt; Set the configuration of STA’s HT2040 coexist …\n@brief Configuration for WiFi ioctl\n@brief WiFi log level\n@brief WiFi log module definition\n@brief     Update WiFi MAC time\n@brief     Allocate a chunk of memory for WiFi driver\nSets mode of operation of Wi-Fi during provisioning This …\nSets mode of operation of Wi-Fi during provisioning This …\n&lt; WiFi soft-AP mode\n&lt; WiFi station + soft-AP mode\n&lt; WiFi NAN mode\n&lt; null mode\n&lt; WiFi station mode\n@brief Disable Wi-Fi module\n@brief Enable Wi-Fi module\n@brief NAN Discovery start configuration\n@brief NAN Datapath End parameters\n@brief NAN Datapath Request parameters\n@brief NAN Datapath Response parameters\n@brief NAN Follow-up parameters\n@brief NAN Publish service configuration parameters\n@brief NAN Services types\n&lt; Send unicast Publish frame to Subscribers that match the …\n&lt; Send broadcast Publish frames in every Discovery …\n&lt; Send broadcast Subscribe frames in every DW\n&lt; Passively listens to Publish frames\n@brief NAN Subscribe service configuration parameters\n@brief Forward declaration of WiFi interface handle\n@brief     The net stack buffer free callback function\n@brief     The net stack buffer reference counter callback …\n@brief     Operation Phymode\n&lt; PHY mode for 11b\n&lt; PHY mode for 11g\n&lt; PHY mode for Bandwidth HE20\n&lt; PHY mode for Bandwidth HT20\n&lt; PHY mode for Bandwidth HT40\n&lt; PHY mode for Low Rate\n@brief WiFi PHY rate encodings\n&lt; 11 Mbps with long preamble\n&lt; 11 Mbps with short preamble\n&lt; 12 Mbps\n&lt; 18 Mbps\n&lt; 1 Mbps with long preamble\n&lt; 24 Mbps\n&lt; 2 Mbps with long preamble\n&lt; 2 Mbps with short preamble\n&lt; 36 Mbps\n&lt; 48 Mbps\n&lt; 54 Mbps\n&lt; 5.5 Mbps with long preamble\n&lt; 5.5 Mbps with short preamble\n&lt; 6 Mbps\n&lt; 9 Mbps */ /**&lt; rate table and guard interval information …\n&lt; 250 Kbps\n&lt; 500 Kbps\n&lt; MCS0 with long GI\n&lt; MCS0 with short GI\n&lt; MCS1 with long GI\n&lt; MCS1 with short GI\n&lt; MCS2 with long GI\n&lt; MCS2 with short GI\n&lt; MCS3 with long GI\n&lt; MCS3 with short GI\n&lt; MCS4 with long GI\n&lt; MCS4 with short GI\n&lt; MCS5 with long GI\n&lt; MCS5 with short GI\n&lt; MCS6 with long GI\n&lt; MCS6 with short GI\n&lt; MCS7 with long GI\n&lt; MCS7 with short GI\n@brief Received packet radio metadata header, this is the …\nConfiguration structure for Protected Management Frame\n@brief The RX callback function in the promiscuous mode. …\n@brief Mask for filtering different packet types in …\n@brief Payload passed to ‘buf’ parameter of …\n@brief Promiscuous frame type\n&lt; Control frame, indicates ‘buf’ argument is …\n&lt; Data frame, indiciates ‘buf’ argument is …\n&lt; Management frame, indicates ‘buf’ argument is …\n&lt; Other type, such as MIMO etc. ‘buf’ argument is …\n@brief   Events generated by manager\nEmitted when device fails to connect to the AP of which the\nEmitted when Wi-Fi AP credentials are received via …\nEmitted when device successfully connects to the AP of …\nSignals that manager has been de-initialized\nSignals that provisioning service has stopped\nEmitted when the manager is initialized\nIndicates that provisioning has started\n@brief   Handler for receiving and responding to requests …\n@brief   WiFi status data to be sent in response to …\n@brief   Internal handlers for receiving and responding to …\n@brief   Internal handlers for receiving and responding to …\n@brief   WiFi config data received by slave during …\n@brief   Type of context data passed to each get/set/apply …\n@brief   Event handler that is used by the manager while …\n@brief   Structure for specifying the manager configuration\n@brief   Runs Wi-Fi as Station with the supplied …\n@brief   Stop provisioning (if running) and release …\n@brief   Disable auto stopping of provisioning service …\n@brief   Create an additional endpoint and allocate …\n@brief   Register a handler for the previously created …\n@brief   Unregister the handler for an endpoint\n@brief   Get reason code in case of Wi-Fi station …\n@brief   Get state of Wi-Fi Station during provisioning\n@brief   Initialize provisioning manager instance\n@brief   Checks if device is provisioned\n@brief   Reset Wi-Fi provisioning config\n@brief   Reset internal state machine and clear …\n@brief   Reset internal state machine and clear …\n@brief   Set application version and capabilities in the …\n@brief   Start provisioning service\n@brief   Stop provisioning service\n@brief   Wait for provisioning service to finish\n@brief   Structure for specifying the provisioning scheme …\n@brief   Scheme that can be used by manager for …\n@brief   Set manufacturer specific data in scan response\n@brief   Set the 128 bit GATT service UUID used for …\n@brief   Scheme that can be used by manager for …\n@brief Provide HTTPD Server handle externally.\n@brief   Structure for specifying the provisioning scheme …\n@brief   Security modes supported by the Provisioning …\n@brief  Security 1 params structure This needs to be …\n@brief  Security 2 params structure This needs to be …\nNo security (plain-text communication)\nThis secure communication mode consists of X25519 key …\nThis secure communication mode consists of SRP6a based …\n@brief   Security modes supported by the Provisioning …\n@brief   WiFi STA connected status information\n@brief   WiFi STA connection fail reason\n@brief   WiFi STA status for conveying back to the …\n&lt; Maximum modem power saving. In this mode, interval to …\n&lt; Minimum modem power saving. In this mode, station wakes …\n&lt; No power save\n@brief     Reallocate a chunk of memory for WiFi driver\n@brief     The WiFi RX callback function\nConfiguration for SAE-PK\nConfiguration for SAE PWE derivation\n@brief Parameters for an SSID scan.\n&lt; All channel scan, scan will end after scan all the …\n&lt; Do fast scan, scan will end after find SSID match AP\n@brief Structure describing parameters for a WiFi fast scan\n@brief Aggregate of active &amp; passive scan time per channel\n&lt; active scan\n&lt; passive scan\n&lt; the channel width is HT40 and the secondary channel is …\n&lt; the channel width is HT40 and the secondary channel is …\n&lt; the channel width is HT20\n&lt; Sort match AP in scan list by security mode\n&lt; Sort match AP in scan list by RSSI\n@brief STA configuration settings for the device\n@brief Description of STA associated with AP\n@brief List of stations associated with the Soft-AP\n&lt; WiFi state of the station\n&lt; all configuration will store in both memory and flash\n&lt; all configuration will only store in the memory\n&lt; WiFi Task Core ID\n@brief    TxDone callback function type. Should be …\n@brief     Vendor Information Element index\n@brief     Vendor Information Element type\n@brief Erase part of the WL storage\n@brief wear levelling handle\n@brief Mount WL for defined partition\n&lt; The value is ESP_BLE_WHITELIST_ADD if add address to …\n@brief Read data from the WL storage\n@brief Get sector size of the WL instance\n@brief Get the actual flash size in use for the WL storage …\n@brief Unmount WL for defined partition\n@brief Write data to the WL storage\n&lt; WP pin when SPI pins set via efuse (read by ROM …\n&lt; WiFi station crypto functions when connect\n@brief The crypto callback function structure used by …\n@brief Structure representing WPS factory information for …\n&lt; WPS failed during auth\n&lt; WPS failed due to incorrect config\n&lt; WPS normal fail reason\n@brief Enumeration of WPS (Wi-Fi Protected Setup) types.\n&lt; The type of WPS to be used (PBC or PIN).\n&lt; WPS is disabled\n&lt; Maximum value for WPS type enumeration\n&lt; WPS Push Button Configuration method\n&lt; WPS PIN (Personal Identification Number) method\n@brief Enumeration of WPS (Wi-Fi Protected Setup) types.\n@brief Custom driver SPI write\n&lt; Write without context pointer\n&lt; sector write function\n&lt; Gatt client callback param of ESP_GATTC_WRITE_DESCR_EVT\n&lt; Gatt server callback param of ESP_GATTS_WRITE_EVT\nSlicer for write data. The <code>program_page</code> should be called …\nSlicer for write data. The <code>program_page</code> should be called …\n&lt; Write with context pointer\n@brief Write PHY register\n@brief Write PHY register\n@brief Write PHY register\n&lt; WS pin, input in slave role, output in master role\n&lt; WS pin, input in slave role, output in master role\n&lt; WS pin, input in slave role, output in master role\n&lt; HTTP path to update protocol to websocket\n&lt; WS signal polarity, set true to enable high lever first\n&lt; WS signal polarity, set true to enable high lever first\n&lt; not a valid opcode to indicate no message previously …\n&lt; WS signal width (i.e. the number of BCLK ticks that WS …\n&lt; WS signal width (i.e. the number of BCLK ticks that WS …\n@cond\n@cond\nClear bits within an event group.  This function cannot be …\n@brief Creates an event group with specific memory …\nA version of xEventGroupGetBits() that can be called from …\nSet bits within an event group. This function cannot be …\nAtomically set bits within an event group, then wait for a …\n[Potentially] block to wait for one or more bits to be set …\n&lt; The handle of the task to which the rest of the …\n&lt; The handle of the task to which the rest of the …\n@brief Checks if a given piece of memory can be used to …\n@brief Checks if a given piece of memory can be used to …\n@brief Get the tick rate per second\n@brief Checks if the current core is in an ISR context\n@brief Check if in ISR context from High priority ISRs\n@brief Disable interrupts in a nested manner (meant to be …\n@brief Checks if a given piece of memory can be used to …\nAdds a queue or semaphore to a queue set that was …\n@cond !DOC_EXCLUDE_HEADER_SECTION\nQueue sets provide a mechanism to allow a task to block …\n@brief Creates a queue with specific memory capabilities\nIt is preferred that the macros xQueueSend(), …\nIt is preferred that the macros xQueueSendFromISR(), …\nQueries a queue to determine if the queue is empty. This …\nQueries a queue to determine if the queue is full. This …\nReceive an item from a queue without removing the item …\nA version of xQueuePeek() that can be called from an …\nReceive an item from a queue.  The item is received by …\nReceive an item from a queue.  It is safe to use this …\nRemoves a queue or semaphore from a queue set.  A queue or …\nxQueueSelectFromSet() selects from the members of a queue …\nA version of xQueueSelectFromSet() that can be used from …\n@brief   Add the ring buffer to a queue set. Notified when …\n@brief       Create a ring buffer\n@brief Create a ring buffer of type RINGBUF_TYPE_NOSPLIT …\n@brief       Create a ring buffer but manually provide the …\n@brief Creates a ring buffer with specific memory …\n@brief   Get current free size available for an item/data …\n@brief   Get maximum size of an item that can be placed in …\n@brief Retrieve the pointers to a statically created ring …\n@brief   Debugging function to print the internal pointers …\n@brief   Retrieve an item from the ring buffer\n@brief   Retrieve an item from the ring buffer in an ISR\n@brief   Retrieve a split item from an allow-split ring …\n@brief   Retrieve a split item from an allow-split ring …\n@brief   Retrieve bytes from a byte buffer, specifying the …\n@brief   Retrieve bytes from a byte buffer, specifying the …\n@brief   Remove the ring buffer from a queue set\n@brief       Insert an item into the ring buffer\n@brief Acquire memory from the ring buffer to be written …\n@brief       Actually send an item into the ring buffer …\n@brief       Insert an item into the ring buffer in an ISR\n@brief Struct that is equivalent in size to the ring buffer…\n@cond\nQueries a stream buffer to see how much data it contains, …\n@cond !DOC_EXCLUDE_HEADER_SECTION\n@cond\nQueries a stream buffer to see if it is empty.  A stream …\nQueries a stream buffer to see if it is full.  A stream …\nReceives bytes from a stream buffer.\nFor advanced users only.\nAn interrupt safe version of the API function that …\nResets a stream buffer to its initial, empty, state.  Any …\nSends bytes to a stream buffer.  The bytes are copied into …\nFor advanced users only.\nInterrupt safe version of the API function that sends a …\nA stream buffer’s trigger level is the number of bytes …\nQueries a stream buffer to see how much free space it …\n@brief Task Snapshot structure\nUsed with the uxTaskGetSystemState() function to return …\n@cond !DOC_EXCLUDE_HEADER_SECTION\nINCLUDE_xTaskAbortDelay must be defined as 1 in …\nCalls the hook function associated with xTask.  Passing …\nThis function corrects the tick count value after the …\nDetermines if pxTicksToWait ticks has passed since a time …\n@brief Create a new task that is pinned to a particular …\n@brief Creates a pinned task where its stack has specific …\n@brief Create a new static task that is pinned to a …\nINCLUDE_xTaskDelayUntil must be defined as 1 for this …\nSee https://www.FreeRTOS.org/RTOS-task-notifications.html …\nSee https://www.FreeRTOS.org/RTOS-task-notifications.html …\nSee https://www.FreeRTOS.org/RTOS-task-notifications.html …\nWaits for a direct to task notification to be pending at a …\n@brief Get the current core ID of a particular task\n@brief Get the handle of the task currently running on a …\nNOTE:  This function takes a relatively long time to …\nxTaskGetIdleTaskHandle() is only available if …\n@brief Get the handle of idle task for the given core.\n@brief Get the next task using the task iterator.\n@return The count of ticks since vTaskStartScheduler was …\n@return The count of ticks since vTaskStartScheduler was …\n@cond !DOC_EXCLUDE_HEADER_SECTION\n&lt; A number unique to the task.\n&lt; A number unique to the task.\nResumes scheduler activity after it was suspended by a …\nINCLUDE_xTaskResumeFromISR must be defined as 1 for this …\n@cond !DOC_EXCLUDE_HEADER_SECTION\nReturns the time in ticks at which the timer will expire.  …\nReturns the period of a timer.\nQueries a timer to determine if it is an auto-reload …\nSimply returns the handle of the timer service/daemon …\nQueries a timer to see if it is active or dormant.\nUsed to defer the execution of a function to the RTOS …\nUsed from application interrupt service routines to defer …\n&lt; Xoff flow control char\n&lt; If the software flow control is enabled and the data …\n&lt; Xon flow control char\n&lt; If the software flow control is enabled and the data …\n&lt; Date.\nYield to other tasks. Called during erase operations.\n&lt; zone ID\n&lt; zone ID\nBuild time in the local timescale.\nBuild time in UTC.\nCamel case, eg: <code>fooBarBaz</code>. The first character is always …\nThe casing style of a string.\nKebab case, eg: <code>foo-bar-baz</code>. Also turns the string …\nLowercase\nWrapper for many std types, which implements the …\nPascal case, eg: <code>FooBarBaz</code>. The first character is always …\nSnake case, eg: <code>foo_bar_baz</code>. Also turns the string …\nThe return value of <code>str_splice</code>\nUppercase\nKebab case, eg: <code>FOO-BAR-BAZ</code>. Also turns the string …\nSnake case, eg: <code>FOO_BAR_BAZ</code>. Also turns the string …\nConcatenates constants of primitive types into a …\nFormats constants of primitive types into a <code>&amp;&#39;static str</code>\nConverts the casing style of a <code>&amp;&#39;static str</code> constant, …\nA string that had <code>removed</code> replaced with some other string.\nThe part of the string that was removed.\nIndexes a <code>&amp;&#39;static str</code> constant, returning <code>None</code> when the …\nIndexes a <code>&amp;&#39;static str</code> constant.\nCreates a <code>&amp;&#39;static str</code> by repeating a <code>&amp;&#39;static str</code> …\nReplaces all the instances of <code>$pattern</code> in <code>$input</code> (a …\nReplaces a substring in a <code>&amp;&#39;static str</code> constant. Returns …\nExecutes the supplied future on the current thread, thus …\nCreates a FreeRTOS task.\nDeletes a FreeRTOS task.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>CriticalSection</code> instance\nSafety\nSafety\nExample\nYield from the current task once, allowing other tasks to …\nSingle-slot lock-free signaling primitive supporting …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Notification</code>.\nMarks the supplied bits in this <code>Notification</code> as notified. …\nMarks the least significant bit (bit 0) in this …\nA utility to help in implementing a custom <code>wait</code> logic: …\nNon-blocking method to check whether this notification has …\nClears the state of this notification by removing any …\nFuture that completes when this <code>Notification</code> has been …\nA mutex that allows borrowing data across executors but …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>EspRawMutex</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nThin wrapper on top of the FreeRTOS queue.\nRetrieves the underlying FreeRTOS handle.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAllocate a new queue on the heap.\nCreate a new queue which is not deleted on <code>Drop</code>, but owned …\nCopy the first message from the queue without removing it.\nReceive a message from the queue and remove it.\nCopy item to back of queue, blocking for <code>timeout</code> ticks if …\nCopy item to front of queue, blocking for <code>timeout</code> ticks if …\nFlags to indicate the capabilities of the various memo\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the configured alarm value\nEnable or disable counter reload function when alarm event …\nTimer configuration\nReturns the current counter value of the timer\nDelays for <code>counter</code> ticks\nEnable or disable the timer.\nEnable or disable the alarm.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nResets the internal wait notification\nSet the alarm value of the timer.\nManually set the current counter value of the timer.\nSubscribes the provided callback for ISR notifications. As …\nSubscribes the provided callback for ISR notifications. As …\nReturns the tick rate of the timer.\nWait for an alarm interrupt to occur\nEnable or disable counter reload function when alarm event …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents DATA event with timeout_flag set\nUART data was received and/or a timeout was triggered\nSerial abstraction\nSerial receiver\nSerial transmitter\nReturns the current baudrate\nReturns the current baudrate\nReturns the current baudrate\nChange the baudrate.\nChange the baudrate.\nChange the baudrate.\nChange the number of data bits\nChange the number of data bits\nChange the number of data bits\nChange the type of parity checking\nChange the type of parity checking\nChange the type of parity checking\nChange the number of stop bits\nChange the number of stop bits\nChange the number of stop bits\nClears the receive buffer.\nUART configuration\nGet count of remaining bytes in the receive ring buffer\nGet count of remaining capacity in the transmit ring buffer\nReturn the current number of data bits\nReturn the current number of data bits\nReturn the current number of data bits\nConfigures the interrupts the driver should enable.\nRetrieves the event queue for this UART. Returns <code>None</code> if …\nRetrieves the event queue for this UART. Returns <code>None</code> if …\nRetrieves the event queue for this UART. Returns <code>None</code> if …\nClears the receive buffer.\nWaits until the transmission is complete.\nClears the receive buffer.\nWaits for the transmission to complete.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplit the serial driver in separate TX and RX drivers.\nConfigures the flags to use for interrupt allocation, e.g. …\nCreate a new serial driver\nCreate a new serial receiver\nCreate a new serial transmitter\nSafety\nSafety\nReturns the current type of parity checking\nReturns the current type of parity checking\nReturns the current type of parity checking\nNumber of events that should fit into the event queue. …\nRead multiple bytes into a slice\nRead multiple bytes into a slice; block until specified …\nGet count of remaining bytes in the receive ring buffer\nGet count of remaining capacity in the transmit ring buffer\nThe size of the software rx buffer. Must be bigger than …\nSplit the serial driver in separate TX and RX drivers\nSplit the serial driver in separate TX and RX drivers\nReturns the current number of stop bits\nReturns the current number of stop bits\nReturns the current number of stop bits\nThe size of the software tx buffer. Must be bigger than …\nWaits until the transmission is complete or until the …\nWaits until the transmission is complete or until the …\nWrite multiple bytes from a slice\nWrite multiple bytes from a slice\nWrite multiple bytes from a slice directly to the TX FIFO …\nWrite multiple bytes from a slice directly to the TX FIFO …\nThe number of bytes received\nWhether a timeout has occurred. It is possible that bytes …\nUART source clock from <code>APB</code>\nUART configuration\nUART source clock from <code>XTAL</code>\nNumber of data bits\nConfigures the interrupts the UART driver should enable in …\nNumber of data bits\nParity check\nUART source clock from <code>RTC</code>\n1 stop bit\n1.5 stop bits\n2 stop bits\nUART source clock\nNumber of stop bits\nConfigures the interrupts the driver should enable.\nOther interrupts to enable\nThis setting only has effect if flow control is enabled. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfigures the flags to use for interrupt allocation, e.g. …\nNumber of events that should fit into the event queue. …\nIf <code>Some(number_of_words)</code>, an interrupt will trigger after …\nSets the threshold at which an interrupt will be generated …\nThe size of the software rx buffer. Must be bigger than …\nSets the threshold <strong>below</strong> which an interrupt will be …\nThe size of the software tx buffer. Must be bigger than …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCare should be taken to use the returned ESP-IDF driver …\nHTTP client\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHTTP server\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nA newtype wrapper for <code>ChainHandler</code> that allows non-`’…\nWraps the given function into an <code>FnHandler</code>.\nRegisters a function as the handler for the given URI and …\nRegisters a function as the handler for the given URI and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRegisters a <code>Handler</code> for a URI and a method (GET, POST, …\nSafety\nRegisters a <code>Handler</code> for a URI and a method (GET, POST, …\nSends the HTTP status (e.g. “200 OK”) and the response …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the response headers have been sent to the …\nWraps the given chain with a <code>NonstaticChain</code> newtype.\nSafety\nReads bytes from the body of the HTTP request.\nSends bytes back to the HTTP client; returns the number of …\nRegisters a function as the handler for a Websockets URI.\nA Websocket connection between this server and a client.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> when the connection already has been closed.\nReturns <code>true</code> when the connection still hasn’t received …\nReceives a frame from the client.\nSends a frame to the client.\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nAn entity already exists, often a file.\nThe operation failed because a pipe was closed.\nBlocking buffered reader.\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nSets the offset to the current position plus the specified …\nSets the offset to the size of this object plus the …\nError trait.\nError type of all the IO operations on this type.\nPossible kinds of errors.\nBase trait for all IO traits, defining the error type.\nAn error was encountered while formatting.\nThe target slice was full and so could not receive any new …\nThis operation was interrupted.\nData not valid for the operation were encountered.\nA parameter was incorrect.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nUnspecified error kind.\nError returned by the inner Read.\nError returned by the inner Write.\nAn operation could not be completed, because it failed to …\nThe operation lacked the necessary privileges to complete.\nBlocking reader.\nError returned by <code>Read::read_exact</code>\nGet whether a reader is ready.\nBlocking seek within streams.\nEnumeration of possible methods to seek within an I/O …\nErrors that could be returned by <code>Write</code> on <code>&amp;mut [u8]</code>.\nSets the offset to the provided number of bytes.\nThe I/O operation’s timeout expired, causing it to be …\nAn EOF error was encountered before reading the exact …\nThis operation is unsupported on this platform.\nBlocking writer.\nError returned by <code>Write::write_fmt</code>\nGet whether a writer is ready.\nAn attempted write could not write any data.\nTell this buffer that <code>amt</code> bytes have been consumed from …\nReturn the contents of the internal buffer, filling it …\nFlush this output stream, blocking until all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the kind of this error.\nRead some bytes from this source into the specified …\nRead the exact number of bytes required to fill <code>buf</code>.\nGet whether the reader is ready for immediately reading.\nRewind to the beginning of a stream.\nSeek to an offset, in bytes, in a stream.\nReturns the current seek position from the start of the …\nWrite a buffer into this writer, returning how many bytes …\nWrite an entire buffer into this writer.\nWrite a formatted string into this writer, returning any …\nGet whether the writer is ready for immediately writing.\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nAn entity already exists, often a file.\nThe operation failed because a pipe was closed.\nAsync buffered reader.\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nSets the offset to the current position plus the specified …\nSets the offset to the size of this object plus the …\nError trait.\nError type of all the IO operations on this type.\nPossible kinds of errors.\nBase trait for all IO traits, defining the error type.\nThis operation was interrupted.\nData not valid for the operation were encountered.\nA parameter was incorrect.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nUnspecified error kind.\nError returned by the inner Read.\nAn operation could not be completed, because it failed to …\nThe operation lacked the necessary privileges to complete.\nAsync reader.\nError returned by <code>Read::read_exact</code>\nGet whether a reader is ready.\nAsync seek within streams.\nEnumeration of possible methods to seek within an I/O …\nSets the offset to the provided number of bytes.\nThe I/O operation’s timeout expired, causing it to be …\nAn EOF error was encountered before reading the exact …\nThis operation is unsupported on this platform.\nAsync writer.\nGet whether a writer is ready.\nAn attempted write could not write any data.\nTell this buffer that <code>amt</code> bytes have been consumed from …\nReturn the contents of the internal buffer, filling it …\nFlush this output stream, ensuring that all intermediately …\nGet the kind of this error.\nRead some bytes from this source into the specified …\nRead the exact number of bytes required to fill <code>buf</code>.\nGet whether the reader is ready for immediately reading.\nRewind to the beginning of a stream.\nSeek to an offset, in bytes, in a stream.\nReturns the current seek position from the start of the …\nWrite a buffer into this writer, returning how many bytes …\nWrite an entire buffer into this writer.\nGet whether the writer is ready for immediately writing.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe size of an IPv4 address in bits.\nThe size of an IPv6 address in bits.\nAn IPv4 address representing the broadcast address: …\nAn IP address, either IPv4 or IPv6.\nAn IPv4 address.\nAn IPv6 address.\nAn IPv4 address with the address pointing to localhost: …\nAn IPv6 address representing localhost: <code>::1</code>.\nAn internet socket address, either IPv4 or IPv6.\nAn IPv4 socket address.\nAn IPv6 socket address.\nAn IPv4 address representing an unspecified address: …\nAn IPv6 address representing the unspecified address: <code>::</code>\nAn IPv4 address.\nAn IPv4 socket address.\nAn IPv6 address.\nAn IPv6 socket address.\nReturns the flow information associated with this address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an <code>IpAddr::V4</code> from a four element byte array.\nCreates an <code>IpAddr::V6</code> from an eight element 16-bit array.\nReturns the argument unchanged.\nCopies this address to a new <code>IpAddr::V4</code>.\nCopies this address to a new <code>IpAddr::V6</code>.\nCreates an <code>IpAddr::V6</code> from a sixteen element byte array.\nUses <code>Ipv4Addr::from_bits</code> to convert a host byte order <code>u32</code> …\nReturns the argument unchanged.\nCreates an <code>Ipv4Addr</code> from a four element byte array.\nUses <code>Ipv6Addr::from_bits</code> to convert a host byte order <code>u128</code> …\nCreates an <code>Ipv6Addr</code> from a sixteen element byte array.\nCreates an <code>Ipv6Addr</code> from an eight element 16-bit array.\nReturns the argument unchanged.\nConverts a tuple struct (Into&lt;<code>IpAddr</code>&gt;, <code>u16</code>) into a …\nConverts a <code>SocketAddrV6</code> into a <code>SocketAddr::V6</code>.\nConverts a <code>SocketAddrV4</code> into a <code>SocketAddr::V4</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a native byte order <code>u32</code> into an IPv4 address.\nConverts a native byte order <code>u128</code> into an IPv6 address.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the IP address associated with this socket address.\nReturns the IP address associated with this socket address.\nReturns the IP address associated with this socket address.\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this address part of the <code>198.18.0.0/15</code> …\nReturns <code>true</code> if this is an address reserved for …\nReturns <code>true</code> if this is a broadcast address (…\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this is an address reserved for …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if this address is an <code>IPv4</code> address, and <code>false</code> …\nReturns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …\nReturns <code>true</code> if the address is an IPv4-mapped address (…\nReturns <code>true</code> if this address is an <code>IPv6</code> address, and <code>false</code> …\nReturns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …\nReturns <code>true</code> if the address is link-local (<code>169.254.0.0/16</code>).\nReturns <code>true</code> if this is a loopback address.\nReturns <code>true</code> if this is a loopback address (<code>127.0.0.0/8</code>).\nReturns <code>true</code> if this is the loopback address (<code>::1</code>), as …\nReturns <code>true</code> if this is a multicast address.\nReturns <code>true</code> if this is a multicast address (<code>224.0.0.0/4</code>).\nReturns <code>true</code> if this is a multicast address (<code>ff00::/8</code>).\nReturns <code>true</code> if this is a private address.\nReturns <code>true</code> if this address is reserved by IANA for …\nReturns <code>true</code> if this address is part of the Shared Address …\nReturns <code>true</code> if this is a unicast address, as defined by …\nReturns <code>true</code> if the address is a globally routable unicast …\nReturns <code>true</code> if the address is a unicast address with …\nReturns <code>true</code> if this is a unique local address (<code>fc00::/7</code>).\nReturns <code>true</code> for the special ‘unspecified’ address.\nReturns <code>true</code> for the special ‘unspecified’ address (…\nReturns <code>true</code> for the special ‘unspecified’ address (<code>::</code>…\nReturns the address’s multicast scope if the address is …\nCreates a new IPv4 address from four eight-bit octets.\nCreates a new IPv6 address from eight 16-bit segments.\nCreates a new socket address from an IP address and a port …\nCreates a new socket address from an <code>IPv4</code> address and a …\nCreates a new socket address from an <code>IPv6</code> address, a …\nReturns the four eight-bit integers that make up this …\nReturns the sixteen eight-bit integers the IPv6 address …\nParse an IP address from a slice of bytes.\nParse an IPv4 address from a slice of bytes.\nParse an IPv6 address from a slice of bytes.\nParse a socket address from a slice of bytes.\nParse an IPv4 socket address from a slice of bytes.\nParse an IPv6 socket address from a slice of bytes.\nReturns the port number associated with this socket …\nReturns the port number associated with this socket …\nReturns the port number associated with this socket …\nReturns the scope ID associated with this address.\nReturns the eight 16-bit segments that make up this …\nChanges the flow information associated with this socket …\nChanges the IP address associated with this socket address.\nChanges the IP address associated with this socket address.\nChanges the IP address associated with this socket address.\nChanges the port number associated with this socket …\nChanges the port number associated with this socket …\nChanges the port number associated with this socket …\nChanges the scope ID associated with this socket address.\nConverts an IPv4 address into a <code>u32</code> representation using …\nConverts an IPv6 address into a <code>u128</code> representation using …\nConverts this address to an <code>IpAddr::V4</code> if it is an …\nConverts this address to an <code>IpAddr::V4</code> if it is an …\nConverts this address to an <code>IPv4</code> address if it is either …\nConverts this address to an <code>IPv4</code> address if it’s an …\nConverts this address to an IPv4-compatible <code>IPv6</code> address.\nConverts this address to an IPv4-mapped <code>IPv6</code> address.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMQTT protocol client\nQuality of service\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nAccess point mode (WiFi router)\nEthernet\nStation mode (WiFi client)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\n&lt; For Short Weierstrass: \\p A in the equation. Note that …\n&lt; For Short Weierstrass: \\p B in the equation. For …\n@brief Opaque directory structure\n&lt; anntena NO 0\n&lt; anntena NO 1\n&lt; Disable the limit\n&lt; Always Enable the limit\n&lt; Chip did not respond to the command, or timed out.\n&lt; The chip doesn’t have enough space for the current …\n@addtogroup ets_timer_apis @{\n@addtogroup ets_apis @{\n&lt; return failed in ets\n&lt; return successful in ets\nA wrapped <code>esp_err_t</code> to check if an error occurred.\nType by which event groups are referenced.  For example, a …\n&lt; The generator of the subgroup used.\n&lt; Initial hash value\n&lt; Initial hash value\n&lt; Precalculated HTable high.\n&lt; Precalculated HTable high.\n&lt; Precalculated HTable low.\n&lt; Precalculated HTable low.\nEnum for the HTTP status codes.\nKey length, in bits (including parity), for DES keys. …\nKey length in bits, including parity, for DES in two-key …\nKey length in bits, including parity, for DES in three-key …\nUndefined key length.\n@brief Type defined for MD5 context\nType by which message buffers are referenced.  For …\n&lt; The order of \\p G.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\n&lt; The prime modulus of the base field.\nDefines the prototype to which functions used with the …\nType by which queues are referenced.  For example, a call …\nType by which queue sets are referenced.  For example, a …\nQueue sets can contain both queues and semaphores, so the …\nType by which ring buffers are referenced. For example, a …\nAllow-split buffers will split an item into two parts if …\nByte buffers store data as a sequence of bytes and do not …\nByte buffers store data as a sequence of bytes and do not …\nNo-split buffers will only store an item in contiguous …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\n@brief Struct that is equivalent in size to the ring buffer…\nType used as a stream buffer’s optional callback.\nType by which stream buffers are referenced.  For example, …\nDefines the prototype to which the application task hook …\n@brief Task Snapshot iterator\n@brief Task Snapshot iterator\n@brief Task Snapshot structure\nUsed with the uxTaskGetSystemState() function to return …\n@cond !DOC_EXCLUDE_HEADER_SECTION\nDefines the prototype to which timer callback functions …\nPrototype of local storage pointer deletion callback.\n@brief antenna index used for bluetooth\n@brief Maximum Tx/Rx time limit on Coded-PHY connection\n&lt; HCI transport layer close function\n@cond\n&lt; HCI transport layer finish transfers function\n&lt; HCI transport layer flow off function\n&lt; HCI transport layer flow on function\n@brief IP address\n&lt; Magic number\n&lt; HCI transport layer open function\n&lt; HCI transport layer receive function\n&lt; Reserved for future use\n&lt; HCI transport layer send function\n&lt; Version number of the defined structure\n&lt; The additional data.\n&lt; The additional data.\n&lt; The total length of the additional data.\n&lt; The total length of the additional data.\n&lt; True - Accept incoming NDP, False - Reject it\n&lt; 32-bit acceptance code\n&lt; 32-bit acceptance mask\n&lt; access without context pointer\n&lt; access with context pointer\n&lt; Action to take by the ETM task module\n&lt; Generator action should perform\n&lt; Generator action should perform\n&lt; Generator action should perform\n&lt; Generator action should perform\n&lt; Generator action should perform\n&lt; Array of actions to take by the ETM task module on the …\n&lt; active scan time per channel, units: millisecond.\n&lt; Channel list of ADC1 to be initialized.\n&lt; Channel list of ADC1 to be initialized.\n&lt; ADC1 channel 0 is GPIO0\n&lt; ADC1 channel 1 is GPIO1\n&lt; ADC1 channel 2 is GPIO2\n&lt; ADC1 channel 3 is GPIO3\n&lt; ADC1 channel 4 is GPIO4\n@brief Set the attenuation of a particular channel on …\n@brief Configure ADC1 capture width, meanwhile enable …\n@brief Take an ADC1 reading from a single channel. @note …\n@brief Get the GPIO number of a specific ADC1 channel.\n&lt; Channel list of ADC2 to be initialized.\n&lt; Channel list of ADC2 to be initialized.\n&lt; ADC2 channel 0 is GPIO5\n@brief Configure the ADC2 channel, including setting …\n@brief Take an ADC2 reading on a single channel\n@brief Get the GPIO number of a specific ADC2 channel.\n@brief ADC attenuation parameter. Different parameters …\n&lt;No input attenuation, ADC can measure up to approx.\n&lt;This is deprecated, it behaves the same as <code>ADC_ATTEN_DB_12</code>\n&lt;The input voltage of ADC will be attenuated extending the …\n&lt;The input voltage of ADC will be attenuated extending the …\n&lt;The input voltage of ADC will be attenuated extending the …\n@brief ADC resolution setting option. @note  Only used in …\n&lt; ADC capture width is 12Bit.\n&lt; ADC output width is 10Bit\n&lt; ADC output width is 11Bit\n&lt; ADC output width is 12Bit\n&lt; ADC output width is 13Bit\n&lt; ADC output width is 9Bit\n&lt; Default ADC output bits, max supported width will be …\n@brief Check the supported ADC calibration scheme\n@brief Create a Curve Fitting calibration scheme\n@brief Delete the Curve Fitting calibration scheme handle\n@brief ADC calibration handle\n@brief Convert ADC raw data to calibrated voltage\n@brief ADC calibration scheme\n&lt; Curve fitting scheme\n&lt; Line fitting scheme\n@brief ADC channels\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n&lt; ADC channel\n@brief Prototype of ADC continuous mode event callback\n@brief Get GPIO number from the given ADC channel\n@brief ADC digital controller clock source\n@brief Set ADC continuous mode required configurations\n@brief ADC continuous mode driver configurations\n@brief Deinitialize the ADC continuous driver.\n@brief Group of ADC continuous mode callbacks\n@brief Event data structure @note The <code>conv_frame_buffer</code> is …\n@brief Flush the driver internal pool\n@brief ADC continuous mode driver initial configurations\n@brief Type of adc continuous mode driver handle\n@brief Get ADC channel from the given GPIO number\n@brief Initialize ADC continuous driver and get a handle …\n@brief Read bytes from ADC under continuous mode.\n@brief Register callbacks\n@brief Start the ADC under continuous mode. After this, …\n@brief Stop the ADC. After this, the hardware stops …\n@brief ADC digital controller settings\n@brief Setting the digital controller.\n@brief ADC digital controller (DMA mode) work mode.\n&lt; Use both ADC1 and ADC2 for conversion by turn. e.g. ADC1 …\n&lt; Use Both ADC1 and ADC2 for conversion simultaneously\n&lt; Only use ADC1 for conversion\n&lt; Only use ADC2 for conversion\n@brief Deinitialize the Digital ADC.\n@brief IIR Filter Coefficient\n&lt; The filter coefficient is 16\n&lt; The filter coefficient is 2\n&lt; The filter coefficient is 4\n&lt; The filter coefficient is 64\n&lt; The filter coefficient is 8\n@brief ADC IIR Filter ID\n&lt; Filter 0\n&lt; Filter 1\n@brief ADC DMA driver configuration\n@brief ADC DMA driver configuration\n@brief Initialize the Digital ADC.\n@brief ADC digital controller (DMA mode) output data …\n@brief ADC digital controller (DMA mode) output data …\n&lt; See <code>adc_digi_output_data_t.type1</code>\n&lt; See <code>adc_digi_output_data_t.type2</code>\n@brief ADC digital controller pattern configuration\n@brief Read bytes from Digital ADC through DMA.\n@brief Start the Digital ADC and DMA peripherals. After …\n@brief Stop the Digital ADC and DMA peripherals. After …\n@brief ADC monitor (continuous mode) ID\n&lt; The monitor index 0.\n&lt; The monitor index 1.\n@brief Monitor config/event mode type\n&lt; ADC raw_result &gt; threshold value, monitor interrupt will …\n&lt; ADC raw_result &lt; threshold value, monitor interrupt will …\n&lt; ADC unit\n@brief ADC channel configurations\n@brief Get GPIO number from the given ADC channel\n@brief ADC digital controller clock source\n@brief Set ADC oneshot mode required configurations\n@brief Delete the ADC unit handle\n@brief Convenience function to get ADC calibrated result\n@brief Get ADC channel from the given GPIO number\n@brief Create a handle to a specific ADC unit\n@brief Get one ADC conversion raw result\n@brief Type of ADC unit handle for oneshot mode\n@brief ADC oneshot driver initial configurations\n&lt; List of configs for each ADC channel that will be used\n&lt; List of configs for each ADC channel that will be used\n&lt; ADC ULP mode is disabled\n&lt; ADC is controlled by ULP FSM\n&lt; ADC is controlled by ULP RISCV\n@brief ADC unit\n&lt; SAR ADC 1\n&lt; SAR ADC 2\n@brief Output ADC1 or ADC2’s reference voltage to …\n&lt; Gatt server callback param of …\n&lt; Gatt server callback param of ESP_GATTS_ADD_CHAR_EVT\n&lt; Gatt server callback param of …\n&lt; Gatt server callback param of ESP_GATTS_ADD_INCL_SRVC_EVT\n&lt; IPv4 address\n&lt; IPv6 address\n&lt; mac address\n&lt; IPv6 address\n&lt; IPv4 address\n&lt; The address to be added to the interface\n&lt; mac address\n&lt; other powerful root address\n&lt; Address data, of which the length is set in the …\n&lt; Address of the periodic advertising\n&lt; extend advertising address\n&lt; I2C 10bit address mode enable for slave mode\n&lt; I2C slave address in bit length\n&lt; The address family to use when connecting to a host.\n&lt; The address family to use when connecting to a host.\nIndex of changed IPv6 address\nIndex of affected IPv6 address\n&lt; The line width of address phase, e.g. 1-line-addr-phase.\n&lt; The pointer to the address list which has been get from …\n&lt; The address type\n&lt; Peer device address type\n&lt; Address type of the periodic advertising\n&lt; extend advertising address type\n&lt; periodic advertising address type\n&lt; Address to perform operation on\n&lt; starting address of the partition in flash\nAffected IPv6 address\n&lt; Broker address configuration\n&lt; Length of address in bits, set to 0 if command does not …\n&lt; Default amount of bits in address phase (0-64), used …\n&lt; The address length in this transaction, in bits.\n&lt; periodic advertising address\n&lt; periodic advertising address\n&lt; Periodic advertiser address\n&lt; periodic advertising address type\n&lt; Periodic advertiser address type\n&lt; Event parameter of ESP_GAP_BLE_ADV_CLEAR_COMPLETE_EVT\n&lt; periodic advertising clock accuracy\n&lt; periodic advertising clock accuracy\n&lt; Periodic advertising clock accuracy\n&lt; extend advertising data\n&lt; Event parameter of ESP_GAP_BLE_ADV_DATA_SET_COMPLETE_EVT\n&lt; extend advertising data length\n&lt; Adv data length\n&lt; Event parameter of …\n&lt; Advertising filter policy\n&lt; extend advertising handle\n&lt; extend advertising handle\n&lt; Maximum advertising interval for undirected and low duty …\n&lt; Minimum advertising interval for undirected and low duty …\n&lt; Periodic advertising interval\n&lt; periodic advertising adv phy type\n&lt; periodic advertising phy type\n&lt; Periodic advertising PHY\n&lt; Periodic advertising set id\n&lt; Event parameter of ESP_GAP_BLE_ADV_START_COMPLETE_EVT\n&lt; Event parameter of ESP_GAP_BLE_ADV_STOP_COMPLETE_EVT\n&lt; Event parameter of ESP_GAP_BLE_ADV_TERMINATED_EVT\n&lt; Advertising type\n@brief Advertise pause function supported by MAC layer\n@brief Advertise pause function supported by MAC layer\n&lt; The AES 128 decrypt callback function used by esp_wifi\n&lt; Callback function used in mesh vendor IE decryption\n&lt; The AES 128 encrypt callback function used by esp_wifi\n&lt; Callback function used in mesh vendor IE encryption\n&lt; Decrypt one AES block callback function\n&lt; Deinitialize AES decryption callback function\n&lt; Initialize AES callback function for decryption\n&lt; Encrypt one AES block callback function\n&lt; Deinitialize AES encryption callback function\n&lt; Initialize AES callback function for encryption\n&lt; One-Key GMAC hash callback function with AES for MIC …\n&lt; The AES unwrap callback function used by esp_wifi\n&lt; The AES wrap callback function used by esp_wifi\n&lt; the aid that soft-AP gives to the station connected to\n&lt; the aid that soft-AP gave to the station disconnects to\n&lt; authentication id assigned by the connected AP\n&lt; authentication id assigned by the connected AP\n&lt; the aid that soft-AP gives to the station connected to\n&lt; the aid that soft-AP gave to the station disconnects to\n&lt; Alarm target count value\n&lt; Timer alarm enable\n&lt; Current alarm value\n&lt; Bit field of alerts to enable (see documentation)\n&lt;  Number of (variable size) blocks allocated in the heap.\nIf format_if_mount_failed is set, and mount fails, format …\nIf format_if_mount_failed is set, and mount fails, format …\n&lt; if this value is set, when “fail” (mesh_attempts_t) …\n&lt; if the BSSID is specified and this value is also set, …\n&lt; Elliptic curves for ECDSA\n&lt; MDs for signatures\n&lt; PK algs for public keys; this applies to all certificates\n&lt; Application protocols required for HTTP2. If HTTP2/ALPN …\n&lt; Application protocols required for HTTP2. If HTTP2/ALPN …\n&lt; NULL-terminated list of supported application protocols …\n&lt; WiFi AMPDU RX feature enable flag\n&lt; WiFi AMPDU TX feature enable flag\n&lt; WiFi AMSDU TX feature enable flag\n&lt; antenna used to receive beacon from AP\n&lt; configuration of AP\n&lt; All AP credentials received from WPS handshake\n&lt; Number of AP credentials received\n&lt; sha256 of elf file\n@cond\nEvent handler that can be set for the purpose of …\n&lt; Application id which input in register API\n&lt; Application id which input in register API\n&lt; External appearance of device\nHandler function for applying the configuration that was …\nHandler function for applying the configuration that was …\n&lt; Number of instances arbitration was lost\n!&lt; Argument to pass to the callback\n&lt; SD/MMC command argument\n&lt; Optional argument passed to function\ndeprecated functions, for back-compatibility only\nother functions\narg_xxx constructor functions\nArray or structure of pointers to arg_xxx structures, may …\n&lt; Size of the <code>tx_channel_array</code>\n&lt; current connections of this mesh AP\n&lt; the maximum connections of this mesh AP\n&lt; The attribute type\n&lt; max vote attempts before stopped\n&lt; max vote attempts before a new root is elected …\n&lt; Attenuation of this ADC channel\n&lt; ADC attenuation\n&lt; ADC attenuation\n&lt; ADC attenuation\n&lt; The attribute control type\n&lt; Included service attribute handle\n&lt; Characteristic attribute handle\n&lt; Descriptor attribute handle\n&lt; The attribute  handle\n&lt;  attribute current value length\n&lt;  attribute max value length\n&lt;  the pointer to attribute value\n&lt; Gatt attribute structure\n&lt; The attribute handle, it’s valid for all of the type\n&lt; HTTP authorization header\n&lt; Authentication complete indication.\n&lt; Authorization mode of the AP\n&lt; authentication mode\n&lt; Gatt authentication request\n&lt; Http authentication type, see <code>esp_http_client_auth_type_t</code>\n&lt; Client authentication\n&lt; authentication mode used by AP\n&lt; authmode of AP\n&lt; The weakest authmode to accept in the fast scan mode …\n&lt; Auth mode of soft-AP. Do not support AUTH_WEP, …\n&lt; authentication mode used by AP\n&lt; Optional X.509 v3 extension authority key identifier.\n&lt; Set to auto clear DMA TX buffer, I2S will always send …\n&lt; Timer auto-reload\n@brief if auto_rsp set to ESP_GATT_RSP_BY_APP, means the …\n@brief Configure auto negotiation\n@brief Configure auto negotiation\n&lt; Auto-negotiation timeout value (Unit: ms)\n&lt; Internally used members\n&lt; Internally used members\n&lt; Number of entries available for data storage.\n&lt; Number of backlog connections\n&lt; Number of backlog connections\n&lt; RSSI threshold for connecting to the root\n&lt; base config\n&lt; base config\n&lt; Transaction data, so that pointer to spi_transaction_t …\n&lt; File path prefix associated with the filesystem.\n!&lt; Comunication baud rate\n&lt; UART baud rate\n&lt; BCK pin, input in slave role, output in master role\n&lt; BCK pin, input in slave role, output in master role\n&lt; BCK pin, input in slave role, output in master role\n&lt; The division from MCLK to BCLK. The minimum value is …\n&lt; The division from MCLK to BCLK, only take effect for …\n&lt; peer address\n&lt; peer address\n&lt; peer address\n&lt; peer address\n&lt; BD address peer device.\n&lt; The device address which has been remove from the bond …\n&lt; Bluetooth device address\n&lt; Bluetooth device address which has been searched\n&lt; Bluetooth device address\n&lt; read phy address\n&lt; address\n&lt; The remote device address\n&lt; The remote device address\n&lt; The remote device address\n&lt; The remote device address\n&lt; The bluetooth device address which been read\n&lt; The bluetooth device address which been written\n&lt; The bluetooth device address which been written\n&lt; Beacon interval which should be multiples of 100. Unit: …\n&lt; WiFi softAP maximum length of the beacon\n&lt; Set to enable big endian\n&lt; Set to enable big endian\n&lt; Set to enable big endian\n&lt; Set true to enable big endian\n&lt; How to represent BIT0 in RMT symbol\n&lt; How to represent BIT1 in RMT symbol\n&lt; Length of bit field [1..-]\n&lt; Set to enable lsb first\n&lt; Set true to enable lsb first\n&lt; Set to enable msb order\n&lt; Set to enable msb order\n&lt; Set to enable bit shift in Philips mode\n&lt; Set true to enable bit shift in Philips mode\n&lt; The curve size in bits.\n&lt; Start bit [0..255]\n&lt; ADC output bit width\n&lt; ADC bit width\n&lt; I2S total bits in one channel， only take effect when …\n&lt; I2S total bits in one channel， only take effect when …\n&lt; Color depth, in bpp\n&lt; I2S sample bits in one channel\n&lt; I2S sample bits in one channel\n&lt; ADC raw output bitwidth\n&lt; ADC conversion result bits\n&lt; BLE 5.0 feature support\n&lt; Ble device address type\n&lt; Remote BLE device address type\n&lt; Remote BLE device address type\n&lt; Received EIR\n&lt; maximum number of duplicate scan filter\n&lt; BLE CCA mode\n&lt; BLE channel assessment enable\n&lt; Config ext adv aux option\n&lt; Ble scan result event type\n&lt; controller hardware triggered CCA check\n&lt; BLE IR event\n&lt; BLE SMP keys used when pairing\n&lt; BLE maximum number of air activities\n&lt; BLE ping procedure enable\n&lt; BLE SMP related request\n&lt; ble gap security union type\n&lt; Event parameter of ESP_GAP_BLE_SET_CHANNELS_EVT\n&lt; controller static ACL TX BUFFER number\n&lt; block length\n&lt; Controller mode: BR/EDR, BLE or Dual Mode\n&lt; the pointer to the bond device Structure\n&lt; the bond key information\n@brief Check if the image (bootloader and application) has …\n@brief Check if a GPIO input is held low for a long …\n@brief Check if a GPIO input is held low or high for a …\n@brief Erase the partition data that is specified in the …\n@brief Returns the number of active otadata.\n@brief Get chip package\n@brief Calculates a sha-256 for a given partition or …\n@brief Determines if the list contains the label\n@brief Calculate crc for the OTA data select.\n@brief Returns true if OTADATA is not marked as bootable …\n@brief Verifies the validity of the OTA data select\n@brief Read ota_info partition and fill array from two …\n@brief Returns the number of active otadata.\n@brief Configure VDDSDIO, call this API to rise VDDSDIO to …\n@brief Configure default SPI pin modes and drive strengths\n@brief Fill buffer with ‘length’ random bytes\n@brief Verify and load an app image (available only in …\n@brief Load an app image without verification (available …\n@brief Disable entropy source for RNG\n@brief Enable an entropy source for RNG if RF subsystem is …\n&lt; Brake mode\n&lt; Brake mode\n&lt; LwIP bridge configuration\n&lt; LwIP bridge configuration\nLwIP bridge configuration\nLwIP bridge configuration\n&lt; broadcast and multicast queue\n&lt; Broker address and security verification\n&lt; Baudrate prescale (i.e., clock divider). Any even number …\n&lt; BSSID of disconnected AP\n&lt; BSSID of connected AP\n&lt; MAC address of AP\n&lt; MAC address of AP\n&lt; MAC address of target AP\n&lt; BSSID of connected AP\n&lt; BSSID of disconnected AP\n&lt; MAC address of target AP.\n&lt; BSSID, if this value is specified, users should also …\n&lt; BSSID of the AP to which connection was estalished\n&lt; BSSID of the AP\n&lt; in M-BSSID set, identifies the nontransmitted BSSID\n&lt; whether set MAC address of target AP or not. Generally, …\n&lt; whether set MAC address of target AP or not.\nenum btm_query_reason: Reason code for sending btm query\n&lt; Buffer containing the given ASN.1 item.\n&lt; valid buffer of CSI data\n&lt; Buffer containing the given ASN.1 item.\n&lt; data block being processed\n&lt; data block being processed\n&lt; Buffer size configuration.\n&lt; Pointer for buffer received in callback.\n&lt; HTTP receive buffer size\n&lt; HTTP transmit buffer size\n&lt; length of the buffer\n&lt; Requested period between FTM bursts in 100’s of …\n&lt; Number of instances a bus error has occurred\n&lt; Bus off indicator GPIO number (optional, set to -1 if …\nLocal modes\nOutput modes\nControl characters\nControl modes\nInput modes\ninput baud rate\n&lt; Certificate Authority’s certificate in a buffer. …\n&lt; Size of Certificate Authority certificate pointed to by …\n&lt; CA certificate buffer legacy name\n&lt; Size of Certificate Authority certificate legacy name\n&lt; WiFi TX cache buffer number\n!&lt; Function to call when timer expires\n&lt; Gatt server callback param of ESP_GATTS_CANCEL_OPEN_EVT\n&lt; Capture edge\n&lt;Select internal reference capacitance of denoise channel. …\n&lt;Select internal reference capacitance of denoise channel. …\n&lt; Captured value\n&lt; Deprecated variable. Device will always connect in PMF …\n&lt; the number of devices in current network\n&lt; total number of sectors\n&lt; Card Command Class for SD\n&lt; RMT carrier duty (%)\n&lt; RMT carrier duty (%)\n&lt; RMT carrier enable\n&lt; RMT carrier frequency\n&lt; RMT carrier frequency\n&lt; Level of the RMT output, when the carrier is applied\n&lt; The level to remove the carrier\n@brief arguments for callback functions\n&lt; country code string\nRestart output.\n&lt; cca threshold\n&lt; Decrypt data callback function using CCMP\n&lt; Encrypt data callback function using CCMP\n&lt; connection event length computation method\n&lt; IP address of cellphone.\n&lt; Length of the buffer pointed to by cert_pem. May be 0 …\n&lt; SSL server certification, PEM format as string, if the …\n&lt; Certificate data, default is NULL. It’s not copied nor …\n&lt; Certificate for ssl mutual authentication, not required …\n&lt; Length of the buffer pointed to by certificate.\n&lt; Length of the buffer pointed to by certificate.\n&lt; Optional list of certificate policies (Only anyPolicy is …\n&lt; Configuration mask to set specific options\n&lt; ext scan config mask\n&lt; Gatt client callback param of ESP_GATTC_CFG_MTU_EVT\n@brief Extracts the input baud rate from the input …\n@brief Extracts the output baud rate from the input …\n@brief Set input baud rate in the termios structure\n@brief Set output baud rate in the termios structure\n&lt; chain top, mesh_assoc IE\n&lt; ADC channel, for chips with …\n&lt; I2S active channel bit mask, set value in <code>i2s_channel_t</code> …\n&lt; I2S active channel bit mask, set value in <code>i2s_channel_t</code> …\n&lt; Wi-Fi channel that peer uses to send/receive ESPNOW …\n&lt; channel of connected AP\n!&lt; UART channel number (count from zero)\n&lt; ADC channel\n&lt; channel, scan the specific channel\n&lt; Channel of soft-AP\n&lt; channel of target AP. Set to 1~13 to scan starting from …\n&lt; Primary channel of the FTM Responder\n&lt; channel of connected AP\n&lt; Wi-Fi channel that peer uses to send/receive ESPNOW …\n&lt; new channel\n&lt; channel number of the new found network\n&lt; channel, the mesh network on\n&lt; Channel of the AP\n&lt; Channel of the AP\n&lt; LEDC channel (0 - LEDC_CHANNEL_MAX-1)\n&lt; LEDC channel (0 - LEDC_CHANNEL_MAX-1)\n&lt; RMT channel\n&lt; Sigma-delta channel number\n&lt; enable to turn on channel filter to smooth adjacent …\n&lt; I2S channel format.\n&lt; I2S channel format.\n&lt; Advertising channel map\n&lt; ext adv channel map\n&lt; Event parameter of …\n&lt; channel selection algorithm\n&lt; channel switch\n&lt; The characteristic handle\n&lt; AT cmd char repeat number\n&lt; Characteristic uuid\nConvert <code>error</code> into a <code>Result</code> with <code>Ok(value)</code> if no error …\n@brief Period time of checking Ethernet link status\nSuspend check erase/program operation, reserved for …\nSuspend check erase/program operation, reserved for …\nYield to other tasks. Called during erase operations. …\n&lt; child address, not used currently\n&lt; child\n&lt; child info\n&lt; child connected\n&lt; child disconnected\n&lt; Pointer to chip-model-specific “adapter” structure. …\n&lt; Detected chip id.\n&lt; Chip identification number\n&lt; decoded CID (Card IDentification) register value\n&lt; Pointer to a zero-terminated array of IANA identifiers …\n&lt; Pointer to a zero-terminated array of IANA identifiers …\nFunction for deallocating security infrastructure\nFunction for deallocating security infrastructure\n&lt; Event parameter of …\n&lt; esp_http_client_handle_t context\n&lt; Client handle\n&lt; Client handle\n&lt; esp_http_client_handle_t context\n&lt; Client handle\n&lt; Client handle\n&lt; <em>MQTT</em> client handle for this event\n&lt; Length of the buffer pointed to by client_cert_pem. May …\n&lt; SSL client certification, PEM format as string, if the …\n&lt; Set <em>MQTT</em> client identifier. Ignored if …\n&lt; Length of the buffer pointed to by client_key_pem. May …\n&lt; Client key decryption password string\n&lt; String length of the password pointed to by …\n&lt; SSL client key, PEM format as string, if the server …\n&lt; Client certificate in a buffer Format may be PEM or DER, …\n&lt; Size of client certificate pointed to by …\n&lt; Client certificate legacy name\n&lt; Size of client certificate legacy name\n&lt; Client key in a buffer Format may be PEM or DER, …\n&lt; Size of client key pointed to by clientkey_pem_buf …\n&lt; Client key decryption password string\n&lt; Client key decryption password string\n&lt; String length of the password pointed to by …\n&lt; String length of the password pointed to by …\n&lt; Client key legacy name\n&lt; Size of client key legacy name\n&lt; PDM clk pin, output\n&lt; Configure LEDC source clock from ledc_clk_cfg_t. Note …\n&lt; PDM TX clock configurations, can be generated by macro …\n&lt; Standard mode clock configuration, can be generated by …\n&lt; TDM mode clock configuration, can be generated by macro …\n&lt; RMT channel counter divider\n&lt; Bitwise of <code>I2C_SCLK_SRC_FLAG_**FOR_DFS**</code> for clk source …\n&lt; Clock source of I2C master bus, channels in the same …\n&lt; Clock source of I2C bus.\n&lt; I2C clock frequency for master mode, (no higher than …\n&lt; Clock source\n&lt; Clock source, set to 0 or TWAI_CLK_SRC_DEFAULT if you …\n&lt; GPTimer clock source\n&lt; Choose clock source\n&lt; Choose clock source, see <code>soc_periph_i2s_clk_src_t</code> for …\n&lt; Choose clock source, see <code>soc_periph_i2s_clk_src_t</code> for …\n&lt; MCPWM timer clock source\n&lt; MCPWM carrier clock source\n&lt; MCPWM capture timer clock source\n&lt; Clock source of RMT TX channel, channels in the same …\n&lt; Clock source of RMT RX channel, channels in the same …\n&lt; Selects source clock.\n&lt; the clock source of the temperature sensor.\n&lt; I2C core clock devider\n&lt; CLKOUT divider. Can be 1 or any even number from 2 to 14 …\n&lt; CLKOUT GPIO number (optional, set to -1 if unused)\n&lt; RMII Clock GPIO Configuration\n&lt; RMII Clock Mode Configuration\n&lt; Select SPI clock source, <code>SPI_CLK_SRC_DEFAULT</code> by default.\n&lt; SPI clock speed in Hz. Derived from <code>clock_source</code>.\n&lt; close without context pointer\n&lt; Gatt client callback param of ESP_GATTC_CLOSE_EVT\n&lt; Gatt server callback param of ESP_GATTS_CLOSE_EVT\nCustom session closing callback.\nCustom session closing callback.\n&lt; close with context pointer\nCloses a secure transport session with specified ID\nCloses a secure transport session with specified ID\n&lt; closedir without context pointer\n&lt; closedir with context pointer\n&lt; Command data, of which the length is set in the …\n&lt; UART AT cmd char\n&lt; The line width of command phase, e.g. 2-line-cmd-phase.\n&lt; RSSI threshold for keeping a good connection with parent.\nGet the wrapped <code>esp_err_t</code>.\n&lt; ext scan coded config parameters\n&lt; Gradient of ADC-Voltage curve\n&lt; Offset of ADC-Voltage curve\n&lt; deprecated\n&lt; limit on max tx/rx time in case of connection using …\n&lt; deprecated\n&lt; @deprecated Set RGB color space, please use …\nCommand name. Must not be NULL, must not contain spaces. …\n&lt; Command to send\n&lt; Default amount of bits in command phase (0-16), used …\n&lt; The command length in this transaction, in bits.\n&lt; timeout, in milliseconds, of a single command. Set to 0 …\nSend an user-defined spi transaction to the device.\nSend an user-defined spi transaction to the device.\n&lt; If non-NULL, server certificate CN must match this name. …\n&lt; If non-NULL, server certificate CN must match this name. …\n&lt; Pointer to the string containing server certificate …\n&lt; Pointer to the string containing server certificate …\n&lt; I2S communication format\n&lt; I2S communication format\n&lt; Comparator handle\n&lt; Compare value\n&lt; the number of completed extend advertising events\n&lt; Gatt server callback param of ESP_GATTS_CONF_EVT …\n&lt; vote address configuration\n@brief Custom driver specific configuration data used by …\nHTTP Server Configuration, if a server is not already …\nConfigure the host to work at different read mode. …\nConfigure the host to work at different read mode. …\n&lt; NDP Confirm frame required\n&lt; Gatt client callback param of ESP_GATTC_CONGEST_EVT\n&lt; Gatt server callback param of ESP_GATTS_CONGEST_EVT\n&lt; Congested or not\n&lt; Congested or not\nThe handle of the relevant connection.\n&lt; connection handle\n&lt; HCI connection handle\n&lt; HCI connection handle\n&lt; Connection id\n&lt; Connection id\n&lt; Connection id\n&lt; Connection id\n&lt; Connection id\n&lt; Connection id\n&lt; Connection id\n&lt; Connection id\n&lt; Connection id\n&lt; Connection id\n&lt; Connection id\n&lt; Connection id\n&lt; Connection id\n&lt; Connection id\n&lt; Connection id\n&lt; Connection id\n&lt; Connection id\n&lt; Connection id\n&lt; Connection id\n&lt; Connection id\n&lt; Connection id\n&lt; Connection id\n&lt; Connection id\n&lt; connection index\nConnection information (valid only when <code>wifi_state</code> is …\n&lt; Current connection interval\n&lt; current connection parameters\n&lt; current Connection parameters\nThe status of the connection attempt; o 0: the connection …\n&lt; Gatt client callback param of ESP_GATTC_CONNECT_EVT\n&lt; Gatt server callback param of ESP_GATTS_CONNECT_EVT\n&lt; connection refused error code reported from MQTT* broker …\n&lt; connection refused error code reported from MQTT* broker …\n&lt; parent information, same as Wi-Fi event …\n&lt; parent connected\n&lt; Length of the request body\n&lt; Length of the request body\n&lt; Context to identify the request\n&lt; Context to identify the request\n&lt; I2C LCD panel will encode control information (e.g. D/C …\n&lt; TWAI controller ID, index from 0. If you want to install …\n&lt; Bluetooth controller task priority\n&lt; CPU num that Bluetooth controller task runs on\n&lt; Bluetooth controller task stack size\n&lt; Pointer to conversion result buffer for one conversion …\n&lt; Conversion frame size, in bytes. This should be in …\n&lt; Suggest leaving it empty, this parameter has been …\n&lt; suggest leaving it empty, this parameter has been …\n&lt; ADC DMA conversion mode, see <code>adc_digi_convert_mode_t</code>.\n&lt; ADC DMA conversion mode, see <code>adc_digi_convert_mode_t</code>.\n&lt; Bytes of data that can be converted in 1 interrupt. This …\n&lt; Bytes of data that can be converted in 1 interrupt. This …\nConvert <code>error</code> into a <code>Result</code> with <code>Ok(())</code> if not error …\n&lt; The core the HTTP server task will run on\n&lt; The core the HTTP server task will run on\n&lt; A “ping” session contains count procedures\n&lt; Count mode\n&lt; Current count value\n&lt; MCPWM timer count value\n&lt; The count value that should lock to upon sync event\n&lt; The count value that should lock to upon sync event\n&lt; The counter\n&lt; The counter value\n&lt; Counter direction\n&lt; Counter enable\n&lt; country information of AP\n&lt; Check sum crc32\n&lt; CRC32 value callback function in little endian\n&lt; Gatt server callback param of ESP_GATTS_CREATE_EVT\n&lt; User credentials for broker\n&lt; Function pointer to esp_crt_bundle_attach. Enables the …\n&lt; Pointer to ESP x509 Certificate Bundle attach function …\n&lt; The AES context to use for AES block encryption or …\n&lt; crypto functions\n&lt; Amount of SPI bit-cycles the cs should stay active after …\n&lt; Amount of SPI bit-cycles the cs should be activated …\n&lt; GPIO used for CS line\n&lt; decoded CSD (Card-Specific Data) register value\n&lt; CSD structure format\n&lt; WiFi channel state information enable flag\n&lt; The csrk key\n&lt; The csrk key value\n&lt; periodic advertising sync transfer CET type\nUDP Port number for asynchronously exchanging control …\nUDP Port number for asynchronously exchanging control …\nContext pointer to be passed to above handler functions …\nContext pointer to be passed to above handler functions …\n&lt; Actual offset for the data associated with this event\nThe interface that received the packet for the current …\nHeader of the input packet currently being processed.\nHeader of the input IPv6 packet currently being processed.\nTotal header length of current_ip4/6_header (i.e. after …\nDestination IP address of current_header\nSource IP address of current_header\nThe interface that accepted the packet for the current …\nThis function is called when pbuf_free deallocates this …\n@brief Custom IO function of MAC driver. This function is …\n@brief Custom IO function of PHY driver. This function is …\n@brief Custom IO function of MAC driver. This function is …\n@brief Custom IO function of PHY driver. This function is …\n&lt; Custom SPI driver definitions\n&lt; Custom SPI driver definitions\n&lt; Custom SPI driver definitions\n&lt; file number\n&lt; zero-terminated file name\n&lt; not defined in POSIX, but present in BSD and Linux\n&lt; Destination MAC address\n&lt; data of the event\nPointer to buffer containing the proof of possession data\nPointer to buffer containing the proof of possession data\n&lt; Appended Data payload\n&lt; Configuration of ioctl command\n&lt; data\n&lt; response data\n&lt; buffer to send or read into\n&lt; data of the event\nPUBLIC\n&lt; Data associated with this event\nPointer to buffer containing the proof of possession data\nProtocomm HTTPD Configuration Data\n&lt; Data bytes (not relevant in RTR frame)\n&lt; The pointer of DMA buffer that just finished sending or …\n&lt; periodic advertising data\n&lt; GPIO pin for spi data0 signal in quad/octal mode, or -1 …\n&lt; GPIO pin for spi data1 signal in quad/octal mode, or -1 …\n&lt; GPIO pin for spi data2 signal in quad/octal mode, or -1 …\n&lt; GPIO pin for spi data3 signal in quad/octal mode, or -1 …\n&lt; GPIO pin for spi data4 signal in octal mode, or -1 if …\n&lt; GPIO pin for spi data5 signal in octal mode, or -1 if …\n&lt; GPIO pin for spi data6 signal in octal mode, or -1 if …\n&lt; GPIO pin for spi data7 signal in octal mode, or -1 if …\n&lt; I2S sample data bit width (valid data bits per sample), …\n&lt; I2S sample data bit width (valid data bits per sample)\n&lt; I2S sample data bit width (valid data bits per sample)\n&lt; UART byte size\n&lt; Set the data endian for color data larger than 1 byte\n&lt; DATA pin, input\n&lt; data length of data\n&lt; Length of the appended Data\n&lt; Length of data\n&lt; data length of data\n&lt; Data length\n&lt; Length of the data for this event\n&lt; periodic advertising data length\n&lt; Data length code\n&lt; The line width of data phase, e.g. 4-line-data-phase.\n&lt; DATA pin, output\n&lt; Total data processed\n&lt; Total data processed\n&lt; Size of the data next to ICMP packet header\n&lt; data type\n&lt; periodic advertising data type\n&lt; length of data in the buffer\n&lt; manufacturing date\n&lt; Compile date\n&lt; Compile date and time\n&lt; Date.\n&lt; Offset of the D/C selection bit in control phase\n&lt; GPIO used to select the D/C line, set this to -1 if the …\n&lt; ESPNOW using dcm rate to send frame\n&lt; ESPNOW using dcm rate to send frame\n&lt; field reserved for future extension\n&lt; VFS index, not to be used by applications\n&lt;Set debounce count, such as <code>n</code>. If the measured values …\n&lt;Set debounce count, such as <code>n</code>. If the measured values …\n&lt; Set this field to de-configure a LEDC timer which has …\nFunction which implements the decryption algorithm\nFunction which implements the decryption algorithm\n@brief Deinitialize Ethernet MAC\n@brief Deinitialize Ethernet PHY\n@brief Deinitialize Ethernet MAC\n@brief Custom driver De-initialization\n@brief Deinitialize Ethernet PHY\n&lt; host function to deinitialize the driver\n&lt; host function to deinitialize the driver, called with …\n@brief Delete console REPL environment @param[in] repl …\n@brief Free memory of Ethernet MAC\n@brief Free memory of Ethernet PHY instance\n@brief Delete console REPL environment @param[in] repl …\n@brief Free memory of Ethernet MAC\n@brief Free memory of Ethernet PHY instance\n@brief Delete encoder object\n&lt; Gatt server callback param of ESP_GATTS_DELETE_EVT\n@brief Destory LCD panel\n@brief Destory LCD panel IO handle (deinitialize all and …\nDelay for at least ‘us’ microseconds. Called in …\nFunction which is to be called by the manager to delete a …\nFunction which is to be called by the manager to delete a …\n&lt; Delta early time for RF PHY on\n&lt; Delta timeout time for RF PHY off\n&lt; Denominator part of division\n&lt; Destination address of ESPNOW packet\n&lt; Destination address of ESPNOW packet\n&lt; Characteristic descriptor uuid\n&lt; Destination MAC address\n&lt; I2C device address\n&lt; Select the address length of the slave device.\nConfigure the device-related register before transactions. …\nConfigure the device-related register before transactions. …\n&lt; Indicate the get number device in the bond list\n&lt; Device type\n&lt; Device type\n&lt; device power save duty\n&lt; I2C device raw address. (The 7/10 bit address without …\n&lt; device information, when subcode is …\nBLE device name being broadcast at the time of provisioning\n&lt; Device name. If empty, the default device name is used.\nBLE device name being broadcast at the time of provisioning\n&lt; the 16 bits of the dh key value\n&lt; DATA pin, input\n&lt; DATA pin, input\n&lt; I2S channel direction\n&lt; direct address\n&lt; direct address type\n&lt; Count direction\n&lt; MCPWM timer count direction\n&lt; Count direction\n&lt; The count direction that should lock to upon sync event\n&lt; Timer direction\n&lt; Timer direction\n&lt; Timer direction\n&lt; Timer direction\n&lt; Timer direction\n&lt; The count direction that should lock to upon sync event\n@brief Directory entry structure\n&lt; Gatt client callback param of ESP_GATTC_DIS_SRVC_CMPL_EVT\n&lt; Client will reconnect to server (when …\n&lt; Disable HTTP automatic redirects\n&lt; <em>MQTT</em> clean session, default clean_session is true\n&lt; Set <code>disable_keepalive=true</code> to turn off keep-alive …\n&lt; Gatt client callback param of ESP_GATTC_DISCONNECT_EVT\n&lt; Gatt server callback param of ESP_GATTS_DISCONNECT_EVT\nReturn code indicating the reason for the disconnect.\n&lt; parent disconnected\nEnables real ff_disk_status function implementation for SD …\nEnables real ff_disk_status function implementation for SD …\n@brief Turn on or off the display\n@brief Enter or exit sleep mode\n!&lt; Call the callback from task or from ISR\n&lt; Estimated one-way distance in Centi-Meters\n&lt; The div value\n&lt; The div value\n&lt; Counter clock divider\n&lt; Dialog Token of the FTM frame\n&lt; This is an alias to ‘dma_desc_num’ for backward …\n&lt; This is an alias to ‘dma_frame_num’ for backward …\n&lt; The total number of descriptors used by I2S DMA to …\n&lt; I2S DMA buffer number, it is also the number of DMA …\n&lt; Frame number for one-time sampling. Frame here means the …\n&lt; I2S frame number in one DMA buffer. One frame means …\n&lt; destination MAC address of the CSI data\n&lt; host function to do a transaction\n&lt; DATA pin, output\n&lt; DATA pin, output\n&lt; DATA pin, output\n&lt; The second data pin for the DAC dual-line mode, only …\n@brief Draw bitmap on LCD panel\n&lt; driver config\n&lt; Pointer to the implementation function table\n&lt; driver config\n&lt; free rx buffer function pointer\n&lt; free rx buffer function pointer\n&lt; Pointer for digital signature peripheral context\n&lt; Pointer for digital signature peripheral context\n&lt; Pointer for digital signature peripheral context, see …\n&lt; Carrier of handle for digital signature parameters, …\n&lt; Event parameter of ESP_GAP_BLE_DTM_TEST_UPDATE_EVT\n&lt; Basic dummy bits to use\n&lt; Amount of dummy bits to insert between address and data …\n&lt; The dummy length in this transaction, in bits.\n&lt; enable to dump 802.11 ACK frame, default disabled\n&lt; dup flag of the message associated with this event\n&lt; duplicate scan list refresh time\n&lt; advertising duration\n&lt; parent weak RSSI monitor duration, if the RSSI continues …\n&lt; power save duty of the child\n&lt; parent duty\n&lt; parent or child duty\n&lt; LEDC channel duty, the range of duty setting is [0, (2**…\n&lt; LEDC current duty of the channel, the range of duty is […\n&lt; Carrier duty cycle\n&lt; Carrier wave duty cycle (0~100%)\n&lt; Duty cycle of positive clock, in 1/256th increments (128 …\n&lt; LEDC channel duty resolution\n&lt; WiFi dynamic RX buffer number\n&lt; WiFi dynamic TX buffer number\n&lt; The state in which the task existed when the structure …\n&lt; The state in which the task existed when the structure …\nActions that can be performed when vTaskNotify() is called.\n&lt; Increment the task’s notification value.\n&lt; Notify the task without updating its notify value.\n&lt; Set bits in the task’s notification value.\n&lt; Set the task’s notification value to a specific value …\n&lt; Set the task’s notification value if the previous …\nPossible return values for eTaskConfirmSleepModeStatus().\n&lt; A task has been made ready or a context switch pended …\n&lt; No tasks are waiting for a timeout so it is safe to …\n&lt; Enter a sleep mode that will not last any longer than …\nINCLUDE_eTaskGetState must be defined as 1 for this …")