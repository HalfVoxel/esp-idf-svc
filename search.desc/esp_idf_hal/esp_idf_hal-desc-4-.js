searchState.loadedDescShard("esp_idf_hal", 4, "Serial transmitter\nReturns the current baudrate\nReturns the current baudrate\nReturns the current baudrate\nChange the baudrate.\nChange the baudrate.\nChange the baudrate.\nChange the number of data bits\nChange the number of data bits\nChange the number of data bits\nChange the type of parity checking\nChange the type of parity checking\nChange the type of parity checking\nChange the number of stop bits\nChange the number of stop bits\nChange the number of stop bits\nClears the receive buffer.\nUART configuration\nGet count of remaining bytes in the receive ring buffer\nGet count of remaining capacity in the transmit ring buffer\nReturn the current number of data bits\nReturn the current number of data bits\nReturn the current number of data bits\nConfigures the interrupts the driver should enable.\nRetrieves the event queue for this UART. Returns <code>None</code> if …\nRetrieves the event queue for this UART. Returns <code>None</code> if …\nRetrieves the event queue for this UART. Returns <code>None</code> if …\nClears the receive buffer.\nWaits until the transmission is complete.\nClears the receive buffer.\nWaits for the transmission to complete.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplit the serial driver in separate TX and RX drivers.\nConfigures the flags to use for interrupt allocation, e.g. …\nCreate a new serial driver\nCreate a new serial receiver\nCreate a new serial transmitter\nSafety\nSafety\nReturns the current type of parity checking\nReturns the current type of parity checking\nReturns the current type of parity checking\nNumber of events that should fit into the event queue. …\nRead multiple bytes into a slice\nRead multiple bytes into a slice; block until specified …\nGet count of remaining bytes in the receive ring buffer\nGet count of remaining capacity in the transmit ring buffer\nThe size of the software rx buffer. Must be bigger than …\nSplit the serial driver in separate TX and RX drivers\nSplit the serial driver in separate TX and RX drivers\nReturns the current number of stop bits\nReturns the current number of stop bits\nReturns the current number of stop bits\nThe size of the software tx buffer. Must be bigger than …\nWaits until the transmission is complete or until the …\nWaits until the transmission is complete or until the …\nWrite multiple bytes from a slice\nWrite multiple bytes from a slice\nWrite multiple bytes from a slice directly to the TX FIFO …\nWrite multiple bytes from a slice directly to the TX FIFO …\nThe number of bytes received\nWhether a timeout has occurred. It is possible that bytes …\nUART source clock from <code>APB</code>\nUART configuration\nUART source clock from <code>XTAL</code>\nNumber of data bits\nConfigures the interrupts the UART driver should enable in …\nNumber of data bits\nParity check\nUART source clock from <code>RTC</code>\n1 stop bit\n1.5 stop bits\n2 stop bits\nUART source clock\nNumber of stop bits\nConfigures the interrupts the driver should enable.\nOther interrupts to enable\nThis setting only has effect if flow control is enabled. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfigures the flags to use for interrupt allocation, e.g. …\nNumber of events that should fit into the event queue. …\nIf <code>Some(number_of_words)</code>, an interrupt will trigger after …\nSets the threshold at which an interrupt will be generated …\nThe size of the software rx buffer. Must be bigger than …\nSets the threshold <strong>below</strong> which an interrupt will be …\nThe size of the software tx buffer. Must be bigger than …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")