searchState.loadedDescShard("esp_idf_hal", 3, "@brief      get blob value for given key\n@brief      get int16_t value for given key\n@brief      get int32_t value for given key\n@brief      get int64_t value for given key\n@{*/ /** @brief      get int8_t value for given key\n@brief      Fill structure nvs_stats_t. It provides info …\n@{*/ /** @brief      get string value for given key\n@brief      get uint16_t value for given key\n@brief      get uint32_t value for given key\n@brief      get uint64_t value for given key\n@brief      get uint8_t value for given key\n@brief      Calculate all entries in a namespace.\nOpaque pointer type representing non-volatile storage …\nOpaque pointer type representing iterator to nvs entries\n@brief      Open non-volatile storage with a given …\n@brief      Open non-volatile storage with a given …\n@brief Mode of opening the non-volatile storage\n@brief Mode of opening the non-volatile storage\n&lt; Read only\n&lt; Read and write\n@brief       Release iterator\n@brief Key for encryption and decryption\n@brief NVS encryption: Security scheme configuration …\n@brief       set variable length binary value for given key\n@brief      set int16_t value for given key\n@brief      set int32_t value for given key\n@brief      set int64_t value for given key\n@{*/ /** @brief      set int8_t value for given key\n@brief      set string for given key\n@brief      set uint16_t value for given key\n@brief      set uint32_t value for given key\n@brief      set uint64_t value for given key\n@brief      set uint8_t value for given key\n@note Info about storage space NVS.\n@brief Types of variables\n&lt; Must be last\n&lt; Type blob\n&lt; Type int16_t\n&lt; Type int32_t\n&lt; Type int64_t\n&lt; Type int8_t\n&lt; Type string\n&lt; Type uint16_t\n&lt; Type uint32_t\n&lt; Type uint64_t\n&lt; Type uint8_t\n&lt; OCR (Operation Conditions Register) value\n&lt; OEM/product identification number\n&lt; Start address of this region\n&lt; Gatt attribute value offset\n&lt; The prepare write offset, this value is valid only when …\n&lt; Offset of the value, if the value is too long\n&lt; Offset of the value, if the value is too long\n&lt; The object identifier.\n&lt; The object identifier.\n&lt; The object identifier.\nOld IPv4 address\nOld IPv6 address\n&lt; old home channel of the device\n&lt; the old auth mode of AP\n&lt; old second channel of the device\nOld IPv6 address state\n&lt; One-Key CBC MAC (OMAC1) hash with AES-128 callback …\n&lt; Timer alarm callback\n&lt; callback function when mcpwm operator brakes in CBC\n&lt; callback function when mcpwm operator brakes in OST\n&lt; Callback function that would be invoked when capture …\n&lt; Callback invoked when color data transfer has finished\n&lt; Callback invoked when color data transfer has finished\n&lt; Callback invoked when color data transfer has finished\n&lt; Event callback, invoked when one conversion frame is …\n&lt; callback function when MCPWM timer counts to zero\n&lt; ISR callback function that would be invoked when fault …\n&lt; ISR callback function that would be invoked when fault …\n&lt; callback function when MCPWM timer counts to peak value\n@brief Callback function invoked when lowlevel …\n@brief Callback function invoked when lowlevel …\n@brief Invoked by internal ping thread when a ping session …\n@brief Invoked by internal ping thread when received ICMP …\n@brief Invoked by internal ping thread when receive ICMP …\n&lt; Event callback, invoked when the internal pool is full.\n&lt; ISR callback function which would be invoked when …\n&lt; Callback of data received event, only for RX channel The …\n&lt; I2C slave receive done callback\n&lt; Event callback, invoked when one RMT channel receiving …\n&lt; Callback of receiving queue overflowed event, only for …\n&lt; Callback of sending queue overflowed event, only for TX …\n&lt; Callback of data sent event, only for TX channel The …\n@brief Callback on Ethernet state changed\n@brief Callback on Ethernet state changed\n&lt; callback function when MCPWM timer stops\n&lt; I2C slave stretched callback\n&lt; I2C master transaction finish callback\n&lt; Event callback, invoked when transmission is finished\n&lt; the 128 bits of confirmation value\n&lt; BLE SMP secure connection OOB data\n&lt; the 128 bits of randomizer value\n&lt; NAN Discovery operating channel\n&lt; SD or MMC command index\n&lt; vendor hci command opcode\n&lt; vendor hci command opcode\n&lt; open without context pointer\n&lt; Gatt client callback param of ESP_GATTC_OPEN_EVT\n&lt; Gatt server callback param of ESP_GATTS_OPEN_EVT\nCustom session opening callback.\nCustom session opening callback.\n&lt; open with context pointer\n&lt; opendir without context pointer\n&lt; opendir with context pointer\n&lt; J0 from first iteration.\n&lt; J0 from first iteration.\n&lt; Pointer to os-specific hook structure. Call …\n&lt; Pointer to argument for os-specific hooks. Left NULL and …\n&lt; WiFi OS functions\n&lt; organization identifier, 0x18fe34\n&lt; size of <em>MQTT</em> output buffer. If not defined, defaults to …\n&lt; Outbox configuration.\nThis function is called by the IP module when it wants to …\nThis function is called by the IPv6 module when it wants …\n&lt; Owner bluetooth device address type\n&lt; Owner address type\n&lt; ext adv own address type\n&lt; ext scan own address type\n&lt; Own NAN Data Interface MAC\n&lt; ASN1 data, e.g. in ASCII.\n&lt; Raw ASN1 data for the bit string\n&lt; ASN1 data, e.g. in ASCII.\n&lt; Raw ASN1 data for the bit string\n&lt; the pointer to the key value\n&lt; Manufacturer data point\n&lt; the point of parameter buffer\n&lt; The point of parameter buffer\n&lt; Service data point\n&lt; Service uuid array point\n&lt; I2S pair channel handle in duplex mode, always NULL in …\n&lt; pairwise cipher of AP\n&lt; Pairwise cipher of SoftAP, group cipher will be derived …\nPanic with a specific error message of the contained …\n&lt; Event parameter, sometimes without usage, then will be …\n&lt; Event parameter, sometimes without usage, then will be …\n&lt; the length of parameter\n&lt; The length of parameter buffer\n&lt;  pkt data length value\n&lt; extend advertising report parameters\n&lt; periodic advertising report parameters\n&lt; parent power save duty\n&lt; UART parity mode\n&lt; Partition of application which worked before goes to the …\n&lt; Optional, label of SPIFFS partition to use. If set to …\n&lt; passive scan time per channel, units: millisecond, …\n&lt; the numeric value for comparison. If just_works, do not …\n&lt; Passphrase for the AP\n&lt; Password of soft-AP.\n&lt; Password of target AP.\n&lt; Password of the AP. Null terminated string.\n&lt; password\n&lt; mesh softAP password\n&lt; Using for Http authentication\n&lt; <em>MQTT</em> password\n&lt; Password of the AP\n&lt; Event parameter of …\n&lt; HTTP Path, if not set, default is <code>/</code>\n&lt; Path in the URI\n&lt; Number of ADC channels that will be used\n&lt; Number of ADC channels that will be used\n&lt; Pre-allocated data buffer\n&lt; Payload. Length is equal to value in ‘length’ field, …\n&lt; Data or management payload. Length of payload is …\n&lt; payload of the wifi packet\npointer to the actual data in the buffer\npointer to the actual data in the buffer\n&lt; Pre-allocated data buffer\n&lt; payload len of the wifi packet\n&lt; The number of bits in \\p P.\n&lt; SHA1-based key derivation function (PBKDF2) callback …\nMain packet buffer struct\nThe actual pbuf\nA custom pbuf: like a pbuf, but following a function …\nPrototype for a function to free a custom pbuf\n@ingroup pbuf Enumeration of pbuf layers\nIncludes spare room for IP header. Use this if you intend …\nIncludes spare room for link layer header (ethernet …\nUse this for input packets in a netif driver when calling …\nIncludes spare room for additional encapsulation header …\nIncludes spare room for transport layer header, e.g. UDP …\nHelper struct for const-correctness only. The only meaning …\n@ingroup pbuf Enumeration of pbuf types\npbuf payload refers to RAM. This one comes from a pool and …\npbuf data is stored in RAM, used for TX mostly, struct …\npbuf comes from the pbuf pool. Much like PBUF_ROM but …\npbuf data is stored in ROM, i.e. struct pbuf and its …\n@return The text (human readable) name of the task …\n&lt; A pointer to the task’s name.  This value will be …\n&lt; A pointer to the task’s name.  This value will be …\nReturns the name that was assigned to a timer when the …\n&lt; Frequency of pixel clock\n&lt; I2S PCM a/u-law decompress or compress type\n&lt; received peer device SRK\n&lt; received peer device SRK\n&lt; ESPNOW peer MAC address that is also the MAC address of …\n&lt; ESPNOW peer MAC address that is also the MAC address of …\n&lt; Peer device bluetooth device address\n&lt; ext adv peer address\n&lt; Peer device bluetooth device address type, only support …\n&lt; ext adv peer address type\n&lt; Peer’s NAN Interface MAC\n&lt; Peer’s service instance id\n&lt; Peer’s Service Identifier\n&lt; Peer’s MAC address\n&lt; Peer’s MAC address\n&lt; Peer’s MAC address\n&lt; Peer’s MAC address\n&lt; MAC address of the FTM Peer\n&lt; Enrollee mac address\n&lt; Enrollee mac address\n&lt; Peer’s NAN Data Interface MAC\n&lt; Peer’s NAN Data Interface MAC\n&lt; Peer’s NAN Management Interface MAC\n&lt; Peer’s NAN Management Interface MAC\n&lt; Peer Service Info\n&lt; received peer encryption key\n&lt; received peer encryption key\n&lt; periodic advertising interval\n&lt; vote percentage threshold for approval of being a root\n&lt; Event parameter of …\n&lt; Event parameter of …\n&lt; Event parameter of …\n&lt; Event parameter of …\n&lt; periodic advertising interval\n&lt; periodic advertising interval\n&lt; Event parameter of …\n&lt; Event parameter of …\n&lt; Event parameter of ESP_GAP_BLE_PERIODIC_ADV_REPORT_EVT\n&lt; Event parameter of …\n&lt; Event parameter of …\n&lt; Event parameter of …\n&lt; Event parameter of …\n&lt; Event parameter of …\n&lt; Event parameter of …\n&lt; Number of count ticks within a period\n&lt; Event parameter of …\n&lt; Event parameter of ESP_GAP_BLE_PERIODIC_ADV_SYNC_LOST_EVT\n&lt; interrupt of AES accelerator, level\n&lt; interrupt of APB ADC, LEVEL\n&lt; interrupt of APB ctrl, ?\n&lt; interrupt of Assist debug module, LEVEL\n&lt; interrupt of BT BB, level\n&lt; interrupt of BT BB, NMI, use if BB have bug to fix in NMI\n&lt; will be cancelled\n&lt; interrupt of Cache Invalied Access, LEVEL\n&lt; interrupt of general DMA channel 0, LEVEL\n&lt; interrupt of general DMA channel 1, LEVEL\n&lt; interrupt of general DMA channel 2, LEVEL\n&lt; interrupt of efuse, level, not likely to use\n&lt; interrupt0 generated from a CPU, level\n&lt; interrupt1 generated from a CPU, level\n&lt; interrupt2 generated from a CPU, level\n&lt; interrupt3 generated from a CPU, level\n&lt; interrupt of GPIO, level\n&lt; interrupt of GPIO, NMI\n&lt; interrupt of I2C controller1, level\n&lt; interrupt of I2C Master, level\n&lt; interrupt of I2S1, level\n&lt; interrupt of ICache perload operation, LEVEL\n&lt; interrupt of instruction cache sync done, LEVEL\n&lt; interrupt of LED PWM, level\n&lt; interrupt of remote controller, level\n&lt; interrupt of RSA accelerator, level\n&lt; interrupt of rtc core, level, include rtc watchdog\n&lt; interrupt of RWBLE, level\n&lt; interrupt of RWBLE, NMI, use if RWBT have bug to fix in …\n&lt; interrupt of RWBT, level\n&lt; interrupt of RWBT, NMI, use if RWBT have bug to fix in …\n&lt; interrupt of SHA accelerator, level\n&lt; interrupt of SLC0, level\n&lt; interrupt of SLC1, level\n&lt; interrupt of SPI1, level, SPI1 is for flash read/write, …\n&lt; interrupt of SPI2, level\n&lt; interrupt of SPI0 Cache access and SPI1 access rejected, …\n&lt; use ETS_SYSTIMER_TARGET0_INTR_SOURCE\n&lt; interrupt of system timer 0\n&lt; use ETS_SYSTIMER_TARGET1_INTR_SOURCE\n&lt; interrupt of system timer 1\n&lt; use ETS_SYSTIMER_TARGET2_INTR_SOURCE\n&lt; interrupt of system timer 2\n&lt; interrupt of TIMER_GROUP0, TIMER0, level\n&lt; interrupt of TIMER_GROUP0, WATCH DOG, level\n&lt; interrupt of TIMER_GROUP1, TIMER0, level\n&lt; interrupt of TIMER_GROUP1, WATCHDOG, level\n&lt; interrupt of can, level\n&lt; interrupt of UART0, level\n&lt; interrupt of UART1, level\n&lt; interrupt of UHCI0, level\n&lt; interrupt of USJ, level\n&lt; interrupt of WiFi BB, level, we can do some calibartion\n&lt; interrupt of WiFi MAC, level\n&lt; interrupt of WiFi MAC, NMI, use if MAC have bug to fix …\n&lt;\n@brief Disable peripheral module by gating the clock and …\n@note The following APIs are no longer supported since …\n@brief Reset peripheral module by asserting and …\n@cond\n&lt; Attribute permission\n&lt; Event parameter of …\n@brief Ethernet PHY object\n&lt;  the phy type used by the transmitter, coded phy with …\n&lt;  the phy type used by the receiver, 1M phy: 0x01, 2M …\n&lt; PHY address, set -1 to enable PHY address detection at …\n@brief Read PHY register\n@brief Read PHY register\n@brief Write PHY register\n@brief Write PHY register\n&lt; Event parameter of ESP_GAP_BLE_PHY_UPDATE_COMPLETE_EVT\n&lt; ESPNOW phymode of specified interface\n&lt; ESPNOW phymode of specified interface\n&lt; peer device ID key\n&lt; peer device ID key\n&lt; WPS PIN (Personal Identification Number) used when …\n&lt; GPIO pin: set with bit mask, each bit maps to a GPIO\n&lt; PIN code of station in enrollee mode\n&lt; PIN code of station in enrollee mode\n&lt; The core id to pin the thread to. Has the same value …\n&lt; Container for the public key context.\n&lt; Event parameter of …\n&lt;  packet payload type. value range: 0x00-0x07\n&lt;  packet payload type. value range: 0x00-0x07\n&lt; Configuration for Protected Management Frame\n&lt; Configuration for Protected Management Frame. Will be …\n&lt; country policy\nInternal use, poll the HW until the last operation is done.\nInternal use, poll the HW until the last operation is done.\n&lt; Period in ms to poll rx status when interrupt mode is …\n&lt; Period in ms to poll rx status when interrupt mode is …\n&lt; Period in ms to poll rx status when interrupt mode is …\n&lt; port\n&lt; Port to connect, default depend on …\n&lt; <em>MQTT</em> server port\n&lt; Port on which the HTTP server will listen\n&lt; delay time applied to rising edge, 0 means no rising …\n&lt; post attach function pointer\n&lt; post attach function pointer\n&lt; Callback to be called after a transmission has completed.\n&lt; the idle time(in baud-rate) between the last AT char and …\n&lt; Callback called after the SPI registers are loaded with …\n&lt; Callback called after a transaction is done.\n&lt; Power class used by the card\n&lt; Callback to be called before a transmission is started.\n&lt; the idle time(in baud-rate) between the non AT char and …\n&lt; pread without context pointer\n&lt; pread with context pointer\n&lt; The default preference of the address\n&lt; Prescale of input signal, effective frequency = …\n&lt; channel of AP\n&lt; ext adv primary phy\n&lt; extend advertising primary phy\n&lt; The thread’s priority\n&lt; Priority of the interrupt if it has a fixed priority, …\n&lt; <em>MQTT</em> task priority\n&lt; ESPNOW peer private data\n&lt; ESPNOW peer private data\nProgram a page of the flash. Check <code>max_write_bytes</code> for the …\nProgram a page of the flash. Check <code>max_write_bytes</code> for the …\n&lt; Project name\n!&lt; prompt (NULL represents default: “esp&gt; “)\n&lt; If true, control frames are passed to the reader If …\n&lt; periodic advertising properties\n&lt; The characteristic properties, it’s valid only when …\n&lt; The characteristic properties\n&lt; data protocol\n&lt; MQTT protocol version used for connection, defaults to …\n&lt; <em>MQTT</em> protocol version used for connection.\n@brief   Add endpoint request handler for a protocomm …\n@brief   Config parameters for protocomm BLE service\n@brief   Config parameters for protocomm BLE service\n@brief Structure for BLE events in Protocomm.\n@brief   This structure maps handler required by protocomm …\n@brief   Start Bluetooth Low Energy based transport layer …\n@brief   Stop Bluetooth Low Energy based transport layer …\n@brief   Frees internal resources used by a transport …\n@brief   Delete a protocomm instance\n@brief   Config parameters for protocomm HTTP server\nProtocomm HTTPD Configuration Data\n@brief   Config parameters for protocomm HTTP server\n@brief   Start HTTPD protocomm transport\n@brief   Stop HTTPD protocomm transport\n@brief   Create a new protocomm instance\n@brief   Allocates internal resources for new transport …\n@brief   Remove endpoint request handler for a protocomm …\n@brief   Calls the registered handler of an endpoint …\n@brief Function prototype for protocomm endpoint handler\n@brief   Protocomm security object structure.\n@brief   Protocomm Security 1 parameters: Proof Of …\n@brief   Protocomm Security 1 parameters: Proof Of …\n@brief Protocomm Security 2 parameters: Salt and Verifier\n@brief Protocomm Security 2 parameters: Salt and Verifier\n@brief   Protocomm Security 1 parameters: Proof Of …\n@brief   Events generated by the protocomm security layer\n&lt; Received incorrect credentials (username / PoP)\n&lt; Received invalid (NULL) security parameters (username / …\n&lt; Secured session established successfully\n@brief   Protocomm security object structure.\n@brief   Add endpoint security for a protocomm instance\n@brief   Set endpoint for version verification\n@brief   This structure corresponds to a unique instance …\n@brief   Events generated by BLE transport\n@brief   Remove endpoint security for a protocomm instance\n@brief   Remove version verification endpoint from a …\nFunction which is to be called by the manager when it is to\nFunction which is to be called by the manager when it is to\nFunction which is to be called by the manager to stop the …\nFunction which is to be called by the manager to stop the …\n&lt; PS duty information\nAbort an AEAD operation.\nProcess an authenticated decryption operation.\nSet the key for a multipart authenticated decryption …\nProcess an authenticated encryption operation.\nSet the key for a multipart authenticated encryption …\nFinish encrypting a message in an AEAD operation.\nGenerate a random nonce for an authenticated encryption …\nThe type of the state data structure for multipart AEAD …\nDeclare the lengths of the message and additional data for …\nSet the nonce for an authenticated encryption or …\nEncrypt or decrypt a message fragment in an active AEAD …\nPass additional data to an active AEAD operation.\nFinish authenticating and decrypting a message in an AEAD …\n\\brief Encoding of a cryptographic algorithm.\n\\brief Decrypt a short message with a private key.\n\\brief Encrypt a short message with a public key.\nAbort a cipher operation.\nDecrypt a message using a symmetric cipher.\nSet the key for a multipart symmetric decryption operation.\nEncrypt a message using a symmetric cipher.\nSet the key for a multipart symmetric encryption operation.\nFinish encrypting or decrypting a message in a cipher …\nGenerate an IV for a symmetric encryption operation.\nThe type of the state data structure for multipart cipher …\nSet the IV for a symmetric encryption or decryption …\nEncrypt or decrypt a message fragment in an active cipher …\nClose a key handle.\nMake a copy of a key.\nGet the cipher suite from given inputs.\nGet the password from given inputs.\nGet the length of the password in bytes from given inputs.\nGet the peer id from given inputs.\nGet the length of the peer id in bytes from given inputs.\nGet the user id from given inputs.\nGet the length of the user id in bytes from given inputs.\nThe type of input values for PAKE operations.\n\\brief Library initialization.\n\\brief Destroy a key.\nThe type of PSA Diffie-Hellman group family identifiers.\nA slot number identifying a key in a driver.\nThe type of PSA elliptic curve family identifiers.\nFor encrypt-decrypt functions, whether the operation is an …\n\\brief Export a key in binary format.\n\\brief Export a public key or the public part of a key …\n\\brief Generate a key or key pair.\n\\brief Generate a key or key pair using custom production …\n\\brief Generate random bytes.\nRetrieve the attributes of a key.\nAbort a hash operation.\nClone a hash operation.\nCalculate the hash (digest) of a message and compare it …\nCalculate the hash (digest) of a message.\nFinish the calculation of the hash of a message.\nThe type of the state data structure for multipart hash …\nSet up a multipart hash operation.\nAdd a message fragment to a multipart hash operation.\nFinish the calculation of the hash of a message and …\n\\brief Import a key in binary format.\n\\brief                       Get the maximum number of ops …\n\\brief                       Set the maximum number of ops …\nThe type of computation stage for J-PAKE operations.\nThe type of a structure containing key attributes.\nAbort a key derivation operation.\nRetrieve the current capacity of a key derivation …\nProvide an input for key derivation or key agreement.\nProvide a numeric input for key derivation or key …\nProvide an input for key derivation in the form of a key.\nPerform a key agreement and use the shared secret as input …\nThe type of the state data structure for key derivation …\nRead some data from a key derivation operation.\nDerive a key from an ongoing key derivation operation.\nDerive a key from an ongoing key derivation operation with …\nSet the maximum capacity of a key derivation operation.\nSet up a key derivation operation.\n\\brief Encoding of the step of a key derivation.\nCompare output data from a key derivation operation to an …\nCompare output data from a key derivation operation to an …\nEncoding of identifiers of persistent keys.\nEncoding of key lifetimes.\nEncoding of key location indicators.\nEncoding of key persistence levels.\n\\brief Custom parameters for key generation or key …\n\\brief Encoding of a key type.\n\\brief Encoding of permitted usage on a key.\nAbort a MAC operation.\nCalculate the MAC (message authentication code) of a …\nThe type of the state data structure for multipart MAC …\nFinish the calculation of the MAC of a message.\nSet up a multipart MAC calculation operation.\nAdd a message fragment to a multipart MAC operation.\nCalculate the MAC of a message and compare it with a …\nFinish the calculation of the MAC of a message and compare …\nSet up a multipart MAC verification operation.\nOpen a handle to an existing persistent key.\nAbort a PAKE operation.\nThe type of the data structure for PAKE cipher suites.\n\\brief Encoding of the family of the primitive associated …\nGet implicitly confirmed shared secret from a PAKE.\nProvide input for a step of a password-authenticated key …\nThe type of the state data structure for PAKE operations.\nGet output for a step of a password-authenticated key …\n\\brief Encoding of the primitive associated with the PAKE.\nEncoding of the type of the PAKE’s primitive.\n\\brief Encoding of the application role of PAKE\nSet the password for a password-authenticated key exchange …\nSet the peer ID for a password-authenticated key exchange.\nSet the application role for a password-authenticated key …\nSet the user ID for a password-authenticated key exchange.\nSet the session information for a password-authenticated …\nEncoding of input and output indicators for PAKE.\nRemove non-essential copies of key material from memory.\nPerform a key agreement and return the raw shared secret.\nReset a key attribute structure to a freshly initialized …\n\\brief Sign a hash or short message with a private key.\n\\brief                       Abort a sign hash operation.\n\\brief                       Continue and eventually …\n\\brief                       Get the number of ops that a …\n\\brief The context for PSA interruptible hash signing.\nThe type of the state data structure for interruptible hash\n\\brief                       Start signing a hash or short …\n\\brief Sign a message with a private key. For …\n\\brief Verify the signature of a hash or short message …\n\\brief                     Abort a verify hash operation.\n\\brief                       Continue and eventually …\n\\brief                       Get the number of ops that a …\n\\brief The context for PSA interruptible hash verification.\nThe type of the state data structure for interruptible hash\n\\brief                       Start reading and verifying a …\n\\brief Verify the signature of a message with a public …\n&lt; Pointer to PSK hint and key. if not NULL (and …\n&lt; Pointer to PSK hint and key. if not NULL (and …\n&lt; Pointer to PSK struct defined in esp_tls.h to enable PSK …\n@brief ESP-TLS preshared key and hint structure\n@brief ESP-TLS preshared key and hint structure\n&lt; Publisher’s service instance id\n&lt; NAN Interface MAC of the Publisher\n&lt; Publish Service Identifier\n&lt; Publish Service Identifier\n&lt; Publish Id for NAN Service\n&lt; GPIO pull-down\n&lt; GPIO pull-up\n@brief Get a void pointer to the current TCB of a …\nReturns the ID assigned to the timer.\n@brief Power control of Ethernet PHY\n@brief Power control of Ethernet PHY\n&lt; pwrite without context pointer\n&lt; pwrite with context pointer\n&lt; Points to the end of the stack. pxTopOfStack &lt; …\n&lt; Points to the end of the stack. pxTopOfStack &lt; …\n&lt; Next task list item will being traversed.\n&lt; Next task list item will being traversed.\n&lt; Points to the lowest address of the task’s stack area.\n&lt; Points to the lowest address of the task’s stack area.\n&lt; Address of the task control block.\n&lt; Address of the task control block.\nReturns the start of the stack associated with xTask.\n&lt; Current task handle being traversed.\n&lt; Current task handle being traversed.\n&lt; Points to the location of the last item placed on the …\n&lt; Points to the location of the last item placed on the …\n&lt; Max QoS level of the subscription\n&lt; QoS of the messages associated with this event\n&lt; LWT message QoS\n&lt; Max QoS level of the subscription\n&lt; GPIO pin for HD (Hold) signal, or -1 if not used.\n&lt; GPIO pin for WP (Write Protect) signal, or -1 if not …\n&lt; The resolution of one timing quanta, in Hz. Note: the …\n&lt; HTTP query\n&lt; Gatt client callback param of ESP_GATTC_QUEUE_FULL_EVT\n&lt; size of the event loop queue\n&lt; Transaction queue size. This sets how many transactions …\n&lt; Transaction queue size. This sets how many transactions …\n&lt; The random number\n&lt; the maximum value of the temperature you want to test\n&lt; the minimum value of the temperature you want to test\n&lt; ESPNOW rate of specified interface\n&lt; ESPNOW rate of specified interface\nDirect access to the whole entry inside the containing …\n&lt; The raw certificate data (DER).\n&lt; The raw certificate data (DER).\n&lt; raw CID of MMC card to be decoded after the CSD is …\n&lt; XOR RC4 stream callback function to given data with …\n&lt; the address of the root candidate, i.e. the voted …\n&lt; root address specified by users via API …\n&lt; the address of root switch requester\n&lt; a new root address specified by users for API …\n&lt; the router RSSI of the root candidate\n&lt; RCA (Relative Card Address)\nRead data from the flash. Check <code>max_read_bytes</code> for the …\nRead data from the flash. Check <code>max_read_bytes</code> for the …\n@brief Custom driver SPI read\n&lt; Read without context pointer\n&lt; sector read function\n&lt; Gatt client callback param of ESP_GATTC_READ_CHAR_EVT\n&lt; Gatt server callback param of ESP_GATTS_READ_EVT\n&lt; block length for reads\nSlicer for read data. The <code>read</code> should be called …\nSlicer for read data. The <code>read</code> should be called …\nRead flash ID.\nRead flash ID.\n&lt; Configured SPI flash read mode. Set before <code>esp_flash_init</code>…\n&lt; Read with context pointer\n&lt; Event parameter of ESP_GAP_BLE_READ_PHY_COMPLETE_EVT\n@brief Read PHY register\n@brief Read PHY register\n@brief Read PHY register\n&lt; Event parameter of ESP_GAP_BLE_READ_RSSI_COMPLETE_EVT\nRead the status of the flash chip.\nRead the status of the flash chip.\n&lt; readdir without context pointer\n&lt; readdir with context pointer\n&lt; readdir_r without context pointer\n&lt; readdir_r with context pointer\n&lt; flag is set to true if partition is read-only\n&lt; Real working frequency, in kHz, configured on the host …\n&lt; reason of disconnection\n&lt; reason of disconnection\n&lt; reason of disconnection\n&lt; reason of disconnection\n&lt; WPS failure reason wps_fail_reason_t\n&lt; Termination reason code\n&lt; the reason why the voting happens, root initiated or …\n&lt; vote reason, vote could be initiated by children or by …\n&lt; root switch reason, generally root switch is initialized …\n&lt; The reason of gatt connection close\n&lt; disconnection reason\n&lt; Indicate the reason of disconnection\n&lt; Reboot counter. Reset only when power is off.\n@brief Receive packet from Ethernet MAC\n@brief Receive packet from Ethernet MAC\n&lt; Point to the received RMT symbols\n&lt; Reconnect to the broker after this value in miliseconds …\n&lt; Timeout for recv function (in seconds)\n&lt; Timeout for recv function (in seconds)\nthe reference count always equals the number of pointers …\n&lt; Refresh connection after this value (in milliseconds)\n&lt; Gatt client callback param of ESP_GATTC_REG_EVT\n&lt; Gatt server callback param of ESP_GATTS_REG_EVT\n&lt; PHY register address\n&lt; Gatt client callback param of …\n&lt; Pointer to a memory where the register value is …\nCalled before any erase/write operations to check whether …\n@brief Register LCD panel IO callbacks\nCalled for release temp buffer.\n&lt; Alarm reload count value, effect only when …\n&lt; The remote device address\n&lt; Remote bluetooth device address\n&lt; Remote bluetooth device address\n&lt; Remote bluetooth device address\n&lt; Remote bluetooth device address\n&lt; Remote bluetooth device address\n&lt; Remote bluetooth device address\n&lt; Remote bluetooth device address\n&lt; Remote bluetooth device address\n&lt; Event parameter of …\n&lt; rename without context pointer\n&lt; rename with context pointer\n&lt; this is used to refresh server list if NTP provided by …\n&lt; this is used to refresh server list if NTP provided by …\n&lt; Advertizes that Protected Management Frame is required. …\n&lt; reserv1\n&lt; reserv2\n&lt; Reserve\n&lt; Reserved, must be 0.\n&lt; Reserved bytes in additional header space, currently …\n&lt; reserved for IDF\n&lt; reserved for IDF\n@brief Software Reset Ethernet PHY\n@brief Software Reset Ethernet PHY\n@brief Reset encoding state\n@brief Reset LCD panel\n&lt; Reset GPIO number, -1 means no hardware reset\n&lt; GPIO used to reset the LCD panel, set to -1 if it’s …\n@brief Hardware Reset Ethernet PHY\n@brief Hardware Reset Ethernet PHY\n&lt; Reset timeout value (Unit: ms)\n&lt; Counter resolution (working frequency) in Hz, hence, the …\n&lt; Counter resolution in Hz The step size of each count …\n&lt; Resolution of capture timer\n&lt; Channel clock resolution, in Hz\n&lt; Channel clock resolution, in Hz\n&lt; MAC address of the FTM Responder\n&lt; response buffer\nResume flash from suspend manually\nResume flash from suspend manually\n&lt; Retained flag of the message associated with this event\n&lt; LWT retained message flag\n&lt; Extended CSD Revision\n&lt; product revision\nThe revocation date of this entry.\n&lt; Set RGB element order, RGB or BGR\n&lt; @deprecated Set RGB data endian, please use …\n&lt; RMT receiver remove carrier enable\n&lt; rmdir without context pointer\n&lt; rmdir with context pointer\n&lt; EMAC RMII Clock Configuration\n@brief Add channel into a synchronous group (channels in …\n@brief A helper function to allocate a proper memory for …\n@brief Apply modulation feature for TX channel or …\n@brief Bytes encoder configuration\n@brief Update the configuration of the bytes encoder\n@brief RMT carrier wave configuration (for either …\n@brief RMT Carrier Level\n&lt; RMT carrier wave is modulated for high Level output\n&lt; RMT carrier wave is modulated for low Level output\n@brief Type of RMT channel handle\n@brief Data struct of RMT channel status\n@brief RMT Channel Status\n&lt; RMT channel status busy\n&lt; RMT channel status idle\n&lt; RMT channel uninitialized\n@brief RMT channel ID\n&lt; RMT channel number 0\n&lt; RMT channel number 1\n&lt; RMT channel number 2\n&lt; RMT channel number 3\n&lt; Number of RMT channels\n@brief Type of RMT clock source\n@brief Configure RMT parameters\n@brief Data struct of RMT configure parameters\n@brief Copy encoder configuration\n@brief RMT Data Mode\n@brief Delete an RMT channel\n@brief Delete RMT encoder\n@brief Delete synchronization manager\n@brief Disable the RMT channel\n@brief Initialize RMT driver\n@brief Uninstall RMT driver.\n@brief Enable the RMT channel\n@brief Enable or disable the feature that when loop count …\n@brief RMT encoding state\n&lt; The encoding session is finished, the caller can …\n&lt; The encoding artifact memory is full, the caller should …\n&lt; The encoding session is in reset state\n@brief Type of RMT encoder handle\n@brief Reset RMT encoder\n@brief Interface of RMT encoder\n@brief Fill memory data of channel with given RMT items.\n@brief Get the current status of eight channels.\n@brief Get RMT clock divider, channel clock is divided …\n@brief Get speed of channel’s internal counter clock.\n@brief Get RMT idle output level for transmitter\n@brief Get RMT memory block number\n@brief Get RMT memory low power mode.\n@brief Get RMT memory owner.\n@brief Get ringbuffer from RMT.\n@brief Get RMT idle threshold value.\n@brief Get RMT source clock\n@brief Get RMT status\n@brief Get RMT tx loop mode.\n@brief RMT Idle Level\n&lt; RMT TX idle level: high Level\n&lt; RMT TX idle level: low Level\n@brief   Deregister previously registered RMT interrupt …\n@brief RMT interrupt handle\n@brief Register RMT interrupt handler, the handler is an …\n@brief Definition of RMT item\n@brief RMT Internal Memory Owner\n&lt; RMT RX mode, RMT receiver owns the memory block\n&lt; RMT RX mode, RMT transmitter owns the memory block\n@brief RMT hardware memory layout\n&lt; RMT mode: transmitter or receiver\n@brief RMT Channel Working Mode (TX or RX)\n&lt; RMT RX mode\n&lt; RMT TX mode\n@brief Create RMT bytes encoder, which can encode byte …\n@brief Create RMT copy encoder, which copies the given RMT …\n@brief Create a RMT RX channel\n@brief Create a synchronization manager for multiple TX …\n@brief Create a RMT TX channel\n@brief Initiate a receive job for RMT RX channel\n@brief RMT receive specific configuration\n@brief Registers a callback that will be called when …\n@brief Remove channel out of a group\n@brief RMT RX channel specific configuration\n@brief Data struct of RMT RX configure parameters\n@brief Prototype of RMT event callback\n@brief Type of RMT RX done event data\n@brief Group of RMT RX callbacks @note The callbacks are …\n@brief Reset RMT RX memory\n@brief Set callbacks for RMT RX channel\n@brief Set RMT start receiving data.\n@brief Set RMT stop receiving data.\n@brief Set RMT clock divider, channel clock is divided …\n@brief Set RMT RX error interrupt enable\n@brief Configure the GPIO used by RMT channel\n@brief Set RMT idle output level for transmitter\n@brief Set RMT memory block number for RMT channel\n@brief Set RMT memory in low power mode.\n@brief Set RMT memory owner. @note Setting memory is only …\n@brief Set RMT RX filter.\n@brief Set RMT RX idle threshold value\n@brief Set RMT RX interrupt enable\n@brief Set RMT RX threshold event interrupt enable\n@brief Set RMT source clock\n@brief Configure RMT carrier for TX signal.\n@brief Set RMT TX interrupt enable\n@brief Set loop count threshold value for RMT TX channel\n@brief Set RMT tx loop mode.\n@brief Set RMT TX threshold event interrupt enable\n@brief Type of RMT clock source, reserved for the legacy …\n@brief The layout of RMT symbol stored in memory, which is …\n@brief Synchronous manager configuration\n@brief Type of RMT synchronization manager handle\n@brief Reset synchronization manager\n@brief Get the user context set by ‘…\n@brief Init rmt translator and register user callback. The …\n@brief Set user context for the translator of specific …\n@brief Transmit data by RMT TX channel\n@brief RMT transmit specific configuration\n@brief RMT TX channel specific configuration\n@brief Data struct of RMT TX configure parameters\n@brief Prototype of RMT event callback @param[in] tx_chan …\n@brief Type of RMT TX done event data\n@brief Structure encapsulating a RMT TX end callback\n@brief Type of RMT Tx End callback function\n@brief Group of RMT TX callbacks @note The callbacks are …\n@brief Reset RMT TX memory\n@brief Set event callbacks for RMT TX channel\n@brief Set RMT start sending data from memory.\n@brief Set RMT stop sending.\n@brief Wait for all pending TX transactions done\n@brief Wait RMT TX finished.\n@brief RMT send waveform from rmt_item array.\n@brief Translate uint8_t type of data into rmt format and …\n&lt; I2S role, I2S_ROLE_MASTER or I2S_ROLE_SLAVE\n&lt; I2S role, I2S_ROLE_MASTER or I2S_ROLE_SLAVE\n&lt; root address\n&lt; the capacity of the root, equal to the total child …\n&lt; other powerful root\n&lt; fixed root\n&lt; Integer division operation. For the case that doesn’t …\n&lt; numeric priority of this interface to become a default …\n&lt; numeric priority of this interface to become a default …\n&lt; router configuration\n&lt; router BSSID\n&lt; RSSI of the router, default value is -120\n&lt; new router information\n&lt; routing table change\nNumber of Router Solicitation messages that remain to be …\n&lt; Minimum size for RSA keys\n&lt; Gatt server callback param of ESP_GATTS_RESPONSE_EVT\n&lt; rssi of disconnection\n&lt; signal strength of AP. Note that in some rare cases …\n&lt; The minimum rssi to accept in the fast scan mode\n&lt; current average rssi of sta connected\n&lt; rssi of disconnection\n&lt; Received probe request signal strength\n&lt; RSSI value of bss\n&lt; RSSI of the FTM frame received\n&lt; RSSI of the connected parent, default value is -120, …\n&lt; rssi with router\n&lt; extend advertising rssi\n&lt; periodic advertising rssi\n&lt; Searched device’s RSSI\n&lt; The ble remote device rssi value, the range is from -127 …\n&lt; reserved for manufacturer usage\n&lt; the changed value\n&lt; the new value\n@brief Determine if the specified GPIO is a valid RTC GPIO.\nRTCIO output/input mode type.\n&lt; Pad (output + input) disable\n&lt; Pad input\n&lt; Pad input + output\n&lt; Pad input + open-drain output\n&lt; Pad open-drain output\n&lt; Pad output\n@brief Deregister the handler previously registered using …\n@brief Disable the RTC interrupt that is allowed to be …\n@brief Enable the RTC interrupt that is allowed to be …\n@brief Register a handler for specific RTC_CNTL interrupts\n&lt; Round Trip Time in pSec with a peer\n&lt; Estimated Round-Trip-Time with peer in Nano-Seconds\n&lt; Raw average Round-Trip-Time with peer in Nano-Seconds\n&lt; Default antenna mode for receiving, it’s ignored if …\n&lt; WiFi antenna mode for receiving\n&lt; WiFi Block Ack RX window size\n&lt; Pointer to receive buffer, or NULL for no MISO phase. …\n&lt; Pointer to receive buffer, or NULL for no MISO phase. …\n&lt; Rx Callback to receive any response\n&lt;  channel for test data reception, rx_channel = …\n&lt;  channel for test data reception, rx_channel = …\n&lt; RMT RX parameter\n&lt; Rx control info of ESPNOW packet\n&lt; metadata header\n&lt; received packet radio metadata header of the CSI data\n&lt; Rx control info of ESPNOW packet\n&lt; If SPI_TRANS_USE_RXDATA is set, data is received …\n&lt; Current value of Receive Error Counter\n&lt; UART HW RTS threshold\n!&lt; GPIO number for RX path, -1 means using default one\n&lt; Receive GPIO number\n&lt; pkt rx data length value\n&lt; WiFi RX MGMT buffer number\n&lt; WiFi RX MGMT buffer type\n&lt; Number of messages that were lost due to a full RX queue …\n&lt; Number of messages that were lost due to a RX FIFO …\n@brief Transmit LCD command and receive corresponding …\n&lt; rx phy type\n&lt; rx phy type\n&lt; Number of messages RX queue can hold\n&lt; rx sequence number of the wifi packet\n&lt; Priority of the receive task\n&lt; Stack size of the receive task\n&lt; UART timeout interrupt threshold (unit: time of sending …\n&lt; default Rx antenna\n&lt; UART RX full interrupt threshold.\n&lt; Total data length received, should be not greater than …\n&lt; Password identifier for H2E. this needs to be null …\n&lt; Configuration for SAE-PK (Public Key) Authentication …\n&lt; Configuration for SAE PWE derivation method\n&lt; Configuration for SAE PWE derivation method\nPointer to the buffer containing the salt\nPointer to the buffer containing the salt\nPointer to the buffer containing the salt\nLength (in bytes) of the salt\nLength (in bytes) of the salt\nLength (in bytes) of the salt\n&lt; Please refer to <code>soc/soc_caps.h</code> to know the ADC sampling …\n&lt; The expected ADC sampling frequency in Hz. Please refer …\n&lt; I2S sample rate\n&lt; I2S PDM sample rate\n&lt; I2S sample rate\n&lt; I2S sample rate, not suggest to exceed 48000 Hz, …\n&lt; I2S sample rate\n&lt; I2S sample rate\n@brief User callback function to convert uint8_t type data …\n&lt; A union of the supported SAN types\n&lt; minimum scan times before being a root, default:10\n&lt; scanner address\n&lt; scanner address type\n&lt; the number of mesh APs around\n&lt; scan backoff upperlimitmax value\n&lt; scan done\n&lt; The Scan_Duplicates parameter controls whether the Link …\n&lt; ext scan duplicate scan\n&lt; scan duplicate mode\n&lt; scan duplicate type\n&lt; Scan filter policy\n&lt; scan sequence number, used for block scan\n&lt; Scan interval. This is defined as the time interval from …\n&lt; ext scan interval\n&lt; init scan interval\n&lt; do all channel scan or fast scan\n&lt; Event parameter of …\n&lt; ext adv scan request event notify\n&lt; Event parameter of ESP_GAP_BLE_SCAN_REQ_RECEIVED_EVT\n&lt; Event parameter of …\n&lt; Event parameter of …\n&lt; Scan response length\n&lt; Event parameter of …\n&lt; Event parameter of ESP_GAP_BLE_SCAN_RESULT_EVT\n&lt; Event parameter of ESP_GAP_BLE_SCAN_START_COMPLETE_EVT\n&lt; Event parameter of ESP_GAP_BLE_SCAN_STOP_COMPLETE_EVT\n&lt; scan time per channel\n&lt; Scan time in seconds while searching for a NAN cluster\n&lt; scan times being through\n&lt; scan type, active or passive\n&lt; Scan type\n&lt; ext scan type\n&lt; Scan window. The duration of the LE scan. LE_Scan_Window …\n&lt; ext scan window\n&lt; init scan window\n&lt; start channel\nProvisioning scheme to use. Following schemes are already …\n&lt;  Scheme-specific data (E.g. eFuse block for HMAC-based …\nEvent handler required by the scheme for incorporating …\n&lt;  Security Scheme ID (E.g. HMAC)\n&lt; I2C scl hight period\n&lt; GPIO number of I2C SCL signal, pulled-up internally\n&lt; SCL IO number used by I2C bus\n&lt; GPIO number for I2C scl signal\n&lt; I2C scl low period\n&lt; Internal GPIO pull mode for I2C scl signal\n&lt; I2C SCL line frequency.\n&lt; I2C LCD SCL frequency (hz)\n&lt; I2C scl wait_high period\n&lt; Timeout value. (unit: us). Please note this value should …\n&lt; GPIO pin for SPI Clock signal, or -1 if not used.\n&lt; decoded SCR (SD card Configuration Register) value\n&lt; Sigma-delta filter dither\n&lt; Sigma-delta filter dither2\n&lt; Sigma-delta filter prescale\n&lt; Sigma-delta filter scaling value\n&lt; I2C scl low period\n&lt; GPIO number of I2C SDA signal, pulled-up internally\n&lt; SDA IO number used by I2C bus\n&lt; GPIO number for I2C sda signal\n&lt; Internal GPIO pull mode for I2C sda signal\n&lt; I2C sda sample time\nCheck if SD/MMC card supports discard\nCheck if SD/MMC card supports trim\nProbe and initialize SD/MMC card using given host\n@brief Print information about the card to a stream @param …\nSD/MMC card information structure\nDecoded values from SD card Card IDentification register\nSD/MMC command information\nDecoded values from SD card Card Specific Data register\nSD/MMC Host clock timing delay phases\n&lt; Delay phase 0\n&lt; Delay phase 1\n&lt; Delay phase 2\n&lt; Delay phase 3\nSD/MMC erase command(38) arguments SD: ERASE: Erase the …\n&lt; Discard operation for SD/MMC\n&lt; Erase operation on SD, Trim operation on MMC\nErase given number of sectors from the SD/MMC card\nDecoded values of Extended Card Specific Data\nErase complete SD/MMC card\nGet status of SD/MMC card\nSD/MMC Host description\nEnable SDIO interrupt in the SDMMC host\nGet the data of CIS region of an SDIO card.\nParse and print the CIS information of an SDIO card.\nRead blocks of data from an SDIO card using IO_RW_EXTENDED …\nRead one byte from an SDIO card using IO_RW_DIRECT (CMD52)\nRead multiple bytes from an SDIO card using IO_RW_EXTENDED …\nBlock until an SDIO interrupt is received\nWrite blocks of data to an SDIO card using IO_RW_EXTENDED …\nWrite one byte to an SDIO card using IO_RW_DIRECT (CMD52)\nWrite multiple bytes to an SDIO card using IO_RW_EXTENDED …\nCheck if SD/MMC card supports sanitize\nSanitize the data that was unmapped by a Discard command\nRead given number of sectors from the SD/MMC card\nSD/MMC command response buffer\nDecoded values from SD Configuration Register Note: When …\nDecoded values from SD Status Register Note: When new …\nSD SWITCH_FUNC response buffer\nWrite given number of sectors to SD/MMC card\nHandle representing an SD SPI device\nExtra configuration for SD SPI device.\n@brief Release resources allocated using sdspi_host_init\n@brief Send command to the card and get response\n@brief Calculate working frequency for specific device\n@brief Initialize SD SPI driver\n@brief Attach and initialize an SD SPI device on the …\n@brief Enable SDIO interrupt.\n@brief Wait for SDIO interrupt until timeout.\n@brief Remove an SD SPI device\n@brief Set card clock frequency\n&lt; Gatt client callback param of ESP_GATTC_SEARCH_CMPL_EVT\n&lt; Search event type\n&lt; Gatt client callback param of ESP_GATTC_SEARCH_RES_EVT\n&lt; The source of the service information\n&lt; Time.\n&lt; secure data management features supported by the card\n&lt; The security level of the security link\n&lt; The security level\n&lt; The security level of the security link\n&lt; The security level of the security link\n&lt; secondary channel of AP\n&lt; ext adv secondary phy\n&lt; extend advertising secondary phy\n&lt; sector size in bytes\n&lt; Secure version\nHandler function for authenticating connection request and …\nHandler function for authenticating connection request and …\n&lt; seekdir without context pointer\n&lt; seekdir with context pointer\n&lt; Count of memory segments\n&lt; RSSI threshold for parent selection. It should be a …\n&lt; the capacity of myself, total child numbers plus 1, all …\n&lt; layer\n&lt; semaphore instance\n&lt; Depth of internal transfer ringbuffer, increase this …\n&lt; Timeout for send function (in seconds)\n&lt; Timeout for send function (in seconds)\n&lt; product serial number\nThe serial number of the revoked certificate.\n&lt; Unique id for certificate issued by a specific CA.\n&lt; set to true to request NTP server config from DHCP\n&lt; set to true to request NTP server config from DHCP\nTCP Port number for receiving and transmitting HTTP traffic\nTCP Port number for receiving and transmitting HTTP traffic\n&lt; list of servers\n&lt; list of servers\n&lt; Gatt server callback param of …\n&lt; The value provided by the peer device\n&lt; Service data length\n&lt; Service attribute handle\n&lt; Service attribute handle\n&lt; Service attribute handle\n&lt; Service attribute handle\n&lt; Service attribute handle\n&lt; Service attribute handle\n&lt; Service attribute handle\n&lt; Service id, include service uuid and other information\n&lt; Service name identifier\n&lt; Service name identifier\n128 bit UUID of the provisioning service\n128 bit UUID of the provisioning service\n&lt; Service uuid length\nSession Context Pointer\nSession Context Pointer\n&lt; <em>MQTT</em> session configuration.\n&lt; <em>MQTT</em> session_present flag for connection event\n@brief Set MAC address\n@brief Set PHY chip address\n@brief Set MAC address\n@brief Set PHY chip address\n&lt; Gatt client callback param of ESP_GATTC_SET_ASSOC_EVT\n&lt; Gatt server callback param of ESP_GATTS_SET_ATTR_VAL_EVT\n&lt; host function to set DDR mode\n&lt; host function to set bus width\n&lt; host function to set card clock frequency\n&lt; host function to set whether the clock is always enabled\nFunction which is to be called by the manager to set a …\nFunction which is to be called by the manager to set a …\nHandler function called when WiFi connection configuration …\nHandler function called when WiFi connection configuration …\nFunction which is to be called by the manager to set the …\nFunction which is to be called by the manager to set the …\n@brief Set duplex mode of MAC\n@brief Sets PHY duplex mode\n@brief Set duplex mode of MAC\n@brief Sets PHY duplex mode\n&lt; Event parameter of …\nCall to set flash operation status\n@brief Set extra gap in x and y axis\n&lt; set input delay phase\n@brief Set link status of MAC\n@brief Set Ethernet PHY link status\n@brief Set link status of MAC\n@brief Set Ethernet PHY link status\n@brief Set mediator for Ethernet MAC\n@brief Set mediator for PHY\n@brief Set mediator for Ethernet MAC\n@brief Set mediator for PHY\n&lt; Selects a NULL client id\n&lt; Event parameter of …\n@brief Set the PAUSE ability of peer node\n@brief Set the PAUSE ability of peer node\n&lt; Event parameter of …\n&lt; Event parameter of …\n@brief Set promiscuous of MAC\n@brief Set promiscuous of MAC\n&lt; Event parameter of ESP_GAP_BLE_SET_STATIC_RAND_ADDR_EVT\n&lt; Set this advertising data as scan response or not\n@brief Set speed of MAC\n@brief Sets PHY speed mode\n@brief Set speed of MAC\n@brief Sets PHY speed mode\nDisable write protection.\nDisable write protection.\n&lt; I2C start and stop condition setup period\n&lt; SHA1-based Pseudo-Random Function (PRF) (IEEE 802.11i, …\n&lt; SHA-1 hash callback function for data vector\n&lt; The SHA256 PRF callback function used by esp_wifi\n&lt; SHA256 hash callback function for data vector\n&lt;Waterproof. Shield channel drive capability configuration.\n&lt;Waterproof. Shield channel drive capability configuration.\n&lt; manually left shift bits of the scale of the CSI data. …\n&lt; enable to scan AP whose SSID is hidden\nShutdown handler type\n&lt; ext adv sid\n&lt; SID of the periodic advertising\n&lt; extend advertising sid\n&lt; periodic advertising sid\n&lt; periodic advertising sid\n&lt; Event signal, in same task, different Event with …\n&lt; Event signal, in same task, different Event with …\n&lt; CRL signature type identifier\n&lt; Signature algorithm, e.g. sha1RSA\n@brief Sigma-delta channel list\n&lt; Sigma-delta channel 0\n&lt; Sigma-delta channel 1\n&lt; Sigma-delta channel 2\n&lt; Sigma-delta channel 3\n&lt; Sigma-delta channel max\n@brief Configure Sigma-delta channel\n@brief Sigma-delta configure struct\n&lt; Sigma-delta duty, duty ranges from -128 to 127.\n&lt; Sigma-delta output io number, refer to gpio.h for more …\n@brief SIGMADELTA port number, the max port number is …\n&lt; SIGMADELTA port 0\n&lt; SIGMADELTA port max\n&lt; Sigma-delta prescale, prescale ranges from 0 to 255.\n@brief Set Sigma-delta channel duty.\n@brief Set Sigma-delta signal output pin\n@brief Set Sigma-delta channel’s clock pre-scale value. …\n&lt; RMT will stop receiving if one symbol level has kept …\n&lt; A pulse whose width is smaller than this threshold will …\n&lt; Sinc filter scaling value\n&lt; Use Single Filter Mode (see documentation)\n&lt; Size of the region\n&lt; Size of SPI flash in bytes. If 0, size will be detected …\n&lt; The crypto callback function structure size\n&lt; data size\n&lt; size of the partition, in bytes\nElement size\n&lt; size of <em>MQTT</em> send/receive buffer\n&lt; Conversion frame size\n&lt; The buffer size of DMA buffer when success to send or …\n&lt; I2S data size for I2S_DATA event\n&lt; UART data size for UART_DATA event\n&lt; Synchronization Jump Width (Max time quanta jump for …\n&lt; Maximum number of periodic advertising events that can …\n&lt; the number of periodic advertising packets that can be …\n&lt; Skip any validation of server certificate CN field\n&lt; Skip any validation of server certificate CN field, this …\n&lt; Skip any validation of server certificate CN field\n&lt; Skip any validation of server certificate CN field\n&lt; Set true to enable skip mask. If it is enabled, only the …\n&lt; Set to enable skip mask. If it is enabled, only the data …\n&lt; Set to enable skip mask. If it is enabled, only the data …\n!&lt; Skip unhandled events for periodic timers\n&lt; I2C slave config\n&lt; I2C slave address\n&lt; I2C address for slave mode\n&lt; slave minimum ce length\n@endcond\n&lt; controller sleep clock\n&lt; controller sleep mode\n&lt; slot number, to be passed to host functions\n&lt; I2S slot bit width (total bits per slot), only support …\n&lt; I2S slot bit width (total bits per slot)\n&lt; I2S slot bit width (total bits per slot)\n&lt; PDM TX slot configurations, can be generated by macro …\n&lt; Standard mode slot configuration, can be generated by …\n&lt; TDM mode slot configuration, can be generated by macros …\n&lt; Select the left, right or both slot\n&lt; Slot mask. Activating slots by setting 1 to …\n&lt; Set mono or stereo mode with I2S_SLOT_MODE_MONO or …\n&lt; Set mono or stereo mode with I2S_SLOT_MODE_MONO or …\n&lt; Set mono or stereo mode with I2S_SLOT_MODE_MONO or …\nArgument structure for SC_EVENT_GOT_SSID_PSWD event\nSmartconfig event declarations\n&lt; Station smartconfig has found the channel of the target …\n&lt; Station smartconfig got the SSID and password\n&lt; Station smartconfig has finished to scan for APs\n&lt; Station smartconfig has sent ACK to cellphone\nConfigure structure for esp_smartconfig_start\n&lt; protocol: AirKiss\n&lt; protocol: ESPTouch\n&lt; protocol: ESPTouch and AirKiss\n&lt; protocol: ESPTouch v2\n&lt;Level of filter applied on the original data against …\n&lt;Level of filter applied on the original data against …\n&lt; set to true if smooth sync required\n&lt; set to true if smooth sync required\n@brief Get the sync interval of SNTP operation\n@brief Get set sync mode\n@brief Get status of time sync\n@brief system time getter used in the sntp module @note …\n@brief Restart SNTP\n@brief Set the sync interval of SNTP operation\n@brief Set the sync mode\n@brief Set status of time sync\n@brief system time setter used in the sntp module @note …\n@brief Set a callback function for time synchronization …\nSNTP time update mode\n&lt; Update system time immediately when receiving a response …\n&lt; Smooth time updating. Time error is gradually reduced …\nSNTP sync status\n@brief This function updates the system time.\n@brief SNTP callback function for notifying about time …\nCLOCK …\n&lt; PLL_CLK is the output of crystal oscillator frequency …\n&lt; From PLL, usually be 80MHz\n&lt; RC fast clock, about 17.5MHz\n&lt; RC slow clock, depends on the RTC_CLK_SRC configuration\n&lt; Main crystal oscillator clock\n@brief CPU_CLK mux inputs, which are the supported clock …\n&lt; Invalid CPU_CLK source\n&lt; Select PLL_CLK as CPU_CLK source (PLL_CLK is the output …\n&lt; Select RC_FAST_CLK as CPU_CLK source\n&lt; Select XTAL_CLK as CPU_CLK source\n@brief Supported clock sources for modules (CPU, …\n&lt; APB_CLK is highly dependent on the CPU_CLK source\n&lt; CPU_CLK can be sourced from XTAL, PLL, or RC_FAST by …\n&lt; Indication of the end of the available module clock …\n&lt; PLL_F160M_CLK is derived from PLL, and has a fixed …\n&lt; PLL_F80M_CLK is derived from PLL, and has a fixed …\n&lt; RC_FAST_CLK comes from the internal 20MHz rc oscillator, …\n&lt; RC_FAST_D256_CLK comes from the internal 20MHz rc …\n&lt; RTC_FAST_CLK can be sourced from XTAL_D2 or RC_FAST by …\n&lt; RTC_SLOW_CLK can be sourced from RC_SLOW, XTAL32K, or …\n&lt; XTAL_CLK comes from the external 40MHz crystal\n&lt; XTAL32K_CLK comes from the external 32kHz crystal, …\n@brief ADC digital controller clock source\n&lt; Select APB as the source clock\n&lt; Select APB as the default clock choice\n@brief Glitch filter clock source\n&lt; Select APB clock as the source clock\n&lt; Select APB clock as the default clock choice\n@brief Type of GPTimer clock source\n&lt; Select APB as the source clock\n&lt; Select APB as the default choice\n&lt; Select XTAL as the source clock\n@brief Type of I2C clock source.\n@brief I2S clock source enum\n&lt; Select PLL_F160M as the default source clock\n&lt; Select external clock as source clock\n&lt; Select PLL_F160M as the source clock\n&lt; Select XTAL as the source clock\n@brief Type of LEDC clock source, reserved for the legacy …\n&lt; LEDC source clock will be automatically selected based …\n&lt; Select APB as the source clock\n&lt; Select RC_FAST as the source clock\n&lt; Alias of ‘LEDC_USE_RC_FAST_CLK’\n&lt; Select XTAL as the source clock\n@brief MWDT clock source\n&lt; Select APB as the source clock\n&lt; Select APB as the default clock choice\n&lt; Select XTAL as the source clock\n@brief Type of RMT clock source, reserved for the legacy …\n&lt; RMT source clock is APB\n&lt; RMT source clock default choice is APB\n&lt; RMT source clock is XTAL\n@brief Type of RMT clock source\n&lt; Select APB as the source clock\n&lt; Select APB as the default choice\n&lt; Select RC_FAST as the source clock\n&lt; Select XTAL as the source clock\n@brief Sigma Delta Modulator clock source\n&lt; Select APB as the source clock\n&lt; Select APB as the default clock choice\n@brief Type of SPI clock source.\n&lt; Select APB as SPI source clock\n&lt; Select APB as SPI source clock\n&lt; Select XTAL as SPI source clock\n@brief Type of SYSTIMER clock source\n&lt; SYSTIMER source clock default choice is XTAL\n&lt; SYSTIMER source clock is XTAL\n@brief Type of Temp Sensor clock source\n&lt; Select XTAL as the default choice\n&lt; Select RC_FAST as the source clock\n&lt; Select XTAL as the source clock\n@brief Type of Timer Group clock source, reserved for the …\n&lt; Timer group clock source is APB\n&lt; Timer group clock source default choice is APB\n&lt; Timer group clock source is XTAL\n@brief TWAI clock source\n&lt; Select APB as the source clock\n&lt; Select APB as the default clock choice\n@brief Type of UART clock source, reserved for the legacy …\n&lt; UART source clock is APB CLK\n&lt; UART source clock default choice is APB\n&lt; UART source clock is RC_FAST\n&lt; UART source clock is XTAL\n@brief Naming conventions: RESET_REASON_{reset level}_…\n@brief Root clock\n&lt; External 40MHz crystal\n&lt; External 32kHz crystal/clock signal\n&lt; Internal 17.5MHz RC oscillator\n&lt; Internal 136kHz RC oscillator\n@brief RTC_FAST_CLK mux inputs, which are the supported …\n&lt; Invalid RTC_FAST_CLK source\n&lt; Select RC_FAST_CLK as RTC_FAST_CLK source\n&lt; Select XTAL_D2_CLK (may referred as XTAL_CLK_DIV_2) as …\n&lt; Alias name for <code>SOC_RTC_FAST_CLK_SRC_XTAL_D2</code>\n@brief RTC_SLOW_CLK mux inputs, which are the supported …\n&lt; Invalid RTC_SLOW_CLK source\n&lt; Select RC_FAST_D256_CLK (referred as FOSC_DIV or …\n&lt; Select RC_SLOW_CLK as RTC_SLOW_CLK source\n&lt; Select XTAL32K_CLK as RTC_SLOW_CLK source\nsocket select function for socket FDs with the …\n&lt; sort the connect AP in the list by rssi or security mode\n&lt; UART source clock selection\n&lt; LEDC speed speed_mode, high-speed mode (only exists on …\n&lt; LEDC speed speed_mode, high-speed mode (only exists on …\n&lt; Speed mode of the LEDC channel group\n@brief Allocate a device on a SPI bus\n@brief This is a configuration structure for a SPI bus.\n@brief Free a SPI bus\n@brief Get max length (in bytes) of one transaction\n@brief Initialize a SPI bus\n@brief Remove a device from the SPI bus\n@brief Type of SPI clock source.\n@brief SPI command.\n@brief SPI DMA channels\n&lt; Enable DMA, channel is automatically selected by driver\n&lt; Do not enable DMA for SPI\n&lt; SPI device configuration (this field is invalid when …\n&lt; SPI device configuration (this field is invalid when …\n&lt; SPI device configuration (this field is invalid when …\n@brief Occupy the SPI bus for a device to do continuous …\n@brief Calculate working frequency for specific device\n@brief Get the result of a SPI transaction queued earlier …\n@brief This is a configuration for a SPI slave device that …\n@brief Poll until the polling transaction ends.\n@brief Immediately start a polling transaction.\n@brief Send a polling transaction, wait for it to …\n@brief Queue a SPI transaction for interrupt transaction …\n@brief Release the SPI bus occupied by the device. All …\n@brief Send a SPI transaction, wait for it to complete, …\n@brief SPI DMA channels\nSPI Events\n&lt; The buffer has received data from master.\n&lt; The buffer has sent data to master.\n&lt; Received CMD9 from master.\n&lt; Received CMDA from master.\n&lt; Slave has received certain number of data from master, …\n&lt; Slave has loaded its RX data buffer to the hardware …\n&lt; Master has received certain number of the data, the …\n&lt; Slave has loaded its TX data buffer to the hardware …\n&lt; A transaction has done\n@brief Given a memory address where flash is mapped, …\nStructure for flash encryption operations.\nHost driver configuration and context structure.\nHost driver configuration and context structure.\nSPI Flash Host driver instance\n@brief Map region of flash memory into data or instruction …\n@brief Display information about mapped regions\n@brief get free pages number which can be mmap\n@brief Opaque handle for memory region obtained from …\n@brief Enumeration which specifies memory space requested …\n&lt; map to data memory, allows byte-aligned access\n&lt; map to instruction memory, allows only 4-byte-aligned …\n@brief Map sequences of pages of flash memory into data or …\n@brief Release region previously obtained using …\n@brief Given a physical offset in flash, return the …\nConfiguration structure for the flash chip suspend feature.\nDefinition of a common transaction. Also holds the return …\n@brief Calculate the working frequency that is most close …\n@brief Get the frequency limit of current configurations. …\n@brief Calculate the timing settings of specified …\n@brief Enum with the three SPI peripherals that are …\n&lt; SPI1\n&lt; SPI2\n&lt; invalid host value\n&lt; SPI peripheral (this field is invalid when custom SPI …\n&lt; SPI peripheral (this field is invalid when custom SPI …\n&lt; SPI peripheral (this field is invalid when custom SPI …\n@brief Line mode of SPI transaction phases: CMD, ADDR, …\n&lt; flash read mode (esp_image_spi_mode_t as uint8_t)\n&lt; Traditional SPI mode (0~3)\n&lt; Drive settings for the SPI flash pins (read by ROM …\n@brief Free a SPI bus claimed as a SPI slave interface\n@brief Get the result of a SPI transaction queued earlier\n@brief Initialize a SPI bus as a slave interface\n@brief This is a configuration for a SPI host acting as a …\n@brief Queue a SPI transaction for execution\nThis structure describes one SPI transaction\n@brief Do a SPI transaction\nThis struct is for SPI transactions which may change their …\nThis structure describes one SPI transaction. The …\n&lt; CS GPIO pin for this device, or -1 if not used\n&lt; CS GPIO pin for this device\n&lt; Source address of ESPNOW packet\n&lt; Source address of ESPNOW packet\n&lt; Source clock frequency, unit: Hz\n&lt; Gatt client callback param of ESP_GATTC_SRVC_CHG_EVT\n&lt; The service handle\n&lt; Service id, include service uuid and other information\n&lt; SSID of disconnected AP\n&lt; SSID of connected AP\n&lt; SSID of AP\n&lt; SSID of AP\n&lt; SSID of soft-AP. If ssid_len field is 0, this must be a …\n&lt; SSID of target AP.\n&lt; SSID of connected AP\n&lt; SSID of disconnected AP\n&lt; SSID of AP\n&lt; SSID of the AP. Null terminated string.\n&lt; SSID\n&lt; SSID of the to which connection was estalished\n&lt; SSID of the AP to which the slave is to be connected\n&lt; Broadcast SSID or not, default 0, broadcast the SSID\n&lt; SSID length of disconnected AP\n&lt; SSID length of connected AP\n&lt; Optional length of SSID field.\n&lt; SSID length of connected AP\n&lt; SSID length of disconnected AP\n&lt; length of SSID\n&lt; Whether SSP(secure simple pairing) or legacy pairing is …\n&lt; decoded SSR (SD Status Register) value\n&lt; configuration of STA\n&lt; station list\n&lt; WiFi Power Management for station at disconnected status\n&lt; stack config\n&lt; stack config\n@brief Deliver packet to upper stack\n@brief Deliver packet to upper stack\n@brief Input frame buffer to user’s stack\n&lt; The maximum stack size allowed for the server task\n&lt; The maximum stack size allowed for the server task\n&lt; <em>MQTT</em> task stack size\nStack size of server task, adjusted depending upon stack …\n&lt; The stack size of the pthread\n@brief Start Ethernet MAC\n&lt; set to true to automatically start the SNTP service\nCalled before commencing any flash operation. Does not …\n@brief Start Ethernet MAC\n&lt; set to true to automatically start the SNTP service\n&lt; Gatt server callback param of ESP_GATTS_START_EVT\n&lt; The service start handle, it’s valid only when the …\n&lt; The start handle of the service\n&lt; Service start handle\n&lt; Gatt  start handle value of included service\n&lt; Gatt  start handle value of included 128 bit service\nstart_select is called for setting up synchronous I/O …\n&lt; stat without context pointer\n&lt; BLE set channel status\n&lt; stat with context pointer\nThis field can be set by the device driver and could point …\n1: up; 0: down\n1: up; 0: down\n&lt; intermediate digest state\n&lt; intermediate digest state\n&lt; Current state of TWAI controller …\n&lt; The static address\n&lt; WiFi static RX buffer number\n&lt; WiFi static TX buffer number\n&lt; status of scanning APs: 0 — success, 1 - failure\n&lt; Status of the FTM operation\n&lt; Status of the operation\n&lt; NDP status code\n&lt; disk status check function\n&lt; Store the current status of each channel\n&lt; periodic advertising sync status\n&lt; Indicate the get device name success status\n&lt; Indicate the set advertising data operation success …\n&lt; Indicate the set scan response data operation success …\n&lt; Indicate the set scan param operation success status\n&lt; Indicate the set raw advertising data operation success …\n&lt; Indicate the set raw advertising data operation success …\n&lt; Indicate advertising start operation success status\n&lt; Indicate scan start operation success status\n&lt; Indicate scan stop operation success status\n&lt; Indicate adv stop operation success status\n&lt; Indicate adv clear operation success status\n&lt; Indicate set static rand address operation success status\n&lt; Indicate update connection parameters success status\n&lt; Indicate the set pkt data length operation success status\n&lt; Indicate the set local privacy operation success status\n&lt; Indicate the remove bond device operation success status\n&lt; Indicate the clear bond device operation success status\n&lt; Indicate the get bond device operation success status\n&lt; Indicate the read adv tx power operation success status\n&lt; Indicate the add or remove whitelist operation success …\n&lt; Indicate update duplicate scan exceptional list …\n&lt; read phy complete status\n&lt; Indicate perf default phy set status\n&lt; Indicate perf phy set status\n&lt; Indicate extend advertising random address set status\n&lt; Indicate extend advertising parameters set status\n&lt; Indicate extend advertising data set status\n&lt; Indicate extend advertising scan response data set status\n&lt; Indicate advertising start operation success status\n&lt; Indicate advertising stop operation success status\n&lt; Indicate advertising stop operation success status\n&lt; Indicate advertising stop operation success status\n&lt; Indicate periodic advertisingparameters set status\n&lt; Indicate periodic advertising data set status\n&lt; Indicate periodic advertising start status\n&lt; Indicate periodic advertising stop status\n&lt; Indicate periodic advertising create sync status\n&lt; Indicate periodic advertising sync cancel status\n&lt; Indicate periodic advertising sync terminate status\n&lt; Indicate periodic advertising device list add status\n&lt; Indicate periodic advertising device list remove status\n&lt; Indicate periodic advertising device list clean status\n&lt; Indicate extend advertising parameters set status\n&lt; Indicate extend advertising start status\n&lt; Indicate extend advertising stop status\n&lt; Indicate extend connection parameters set status\n&lt; Indicate adv terminate status\n&lt; periodic advertising sync status\n&lt; phy update status\n&lt; Set periodic advertising receive enable status\n&lt; Periodic advertising sync transfer status\n&lt; Periodic advertising set info transfer status\n&lt; Set periodic advertising sync transfer params status\n&lt; Periodic advertising sync transfer received status\n&lt; Indicate DTM operation success status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Operation status\n&lt; Status Code\n&lt; Status Code\n&lt; enable to receive space time block code HT long training …\n@brief Stop Ethernet MAC\n@brief Stop Ethernet MAC\n&lt; Gatt server callback param of ESP_GATTS_STOP_EVT\n&lt; UART stop bits\ncalled by VFS to interrupt the socket_select call when …\nstop_socket_select which can be called from ISR; set only …\n&lt; storage for FreeRTOS queue\n&lt; Stretch cause can be got in callback\n&lt; NAN Interface MAC of the Subscriber\n&lt; WS subprotocol\n&lt; Define in esp_bt_duplicate_exceptional_subcode_type_t\n&lt; The parsed subject data (named information object).\n&lt; Optional list of raw entries of Subject Alternative …\n&lt; Optional X.509 v2/v3 subject unique identifier.\n&lt; Optional X.509 v3 extension subject key identifier.\n&lt; The raw subject data (DER). Used for quick comparison.\n&lt; Subscribe Service Identifier\n&lt; Subscribe Service Identifier\n&lt; partition subtype\n&lt; TRUE of authentication succeeded, FALSE if failed.\n&lt; connection supervision timeout\nPointer to subprotocol supported by URI\nPointer to subprotocol supported by URI\n@brief Check whether the SPI host supports direct read\n@brief Check whether the SPI host supports direct read\n@brief Check whether the SPI host supports direct write\n@brief Check whether the SPI host supports direct write\n&lt; SUS/SUS1/SUS2 bit in flash register.\nSuspend feature setup for setting cmd and status register …\nSuspend feature setup for setting cmd and status register …\nSet flash in suspend status manually\nSet flash in suspend status manually\n&lt; Service info shared in Publish frame\n&lt; Service info shared in Subscribe frame\n&lt; Service info(or message) to be shared\n&lt; Service Specific Info\n&lt; Service Specific Info\n&lt; Service id\n&lt; Service uuid type\n&lt; Software reset timeout value (Unit: ms)\n@brief Swap/Exchange x and y axis\n&lt; root switch request\n&lt; Disassociate with current parent and switch to a new …\n&lt; Which sync as the trigger\n&lt; optionally sets callback function on time sync event\n&lt; optionally sets callback function on time sync event\n&lt; periodic advertising train handle\n&lt; periodic advertising train handle\n&lt; sync handle\n&lt; periodic advertising sync handle\n&lt; Periodic advertising sync handle\n&lt; The sync event source. Set to NULL will disable the …\n&lt; The sync event source\n&lt; Synchronization timeout\n&lt; synchronization timeout for the periodic advertising …\n&lt; Time of departure of FTM frame from FTM Responder in pSec\n&lt; Time of arrival of FTM frame at FTM Initiator in pSec\n&lt; Time of departure of ACK from FTM Initiator in pSec\n&lt; Time of arrival of ACK at FTM Responder in pSec\n&lt; ASN1 type, e.g. MBEDTLS_ASN1_UTF8_STRING.\n&lt; ASN1 type, e.g. MBEDTLS_ASN1_UTF8_STRING.\n&lt; Target IP address, either IPv4 or IPv6\n&lt; FreeRTOS task configuration.\n&lt; core to which the event loop task is pinned to, ignored …\n&lt; name of the event loop task; if NULL, a dedicated task …\n&lt; Priority of internal ping task\n&lt; Priority of FreeRTOS task which runs the server\n!&lt; repl task priority\n&lt; priority of the event loop task, ignored if task name is …\n&lt; Priority of FreeRTOS task which runs the server\n&lt; Priority of server task\n!&lt; repl task stack size\n&lt; stack size of the event loop task, ignored if task name …\n&lt; Stack size of internal ping task\n&lt; GPTimer ETM task type\n&lt; The raw certificate body (DER). The part that is To Be …\n&lt; The raw certificate body (DER). The part that is To Be …\n@brief Wait for transmission of output\n&lt; tcdrain without context pointer\n&lt; tcdrain with context pointer\n@brief Suspend or restart the transmission or reception of …\n&lt; tcflow without context pointer\n&lt; tcflow with context pointer\n@brief Flush non-transmitted output data and non-read …\n&lt; tcflush without context pointer\n&lt; tcflush with context pointer\n@brief Gets the parameters of the terminal\n&lt; tcgetattr without context pointer\n&lt; tcgetattr with context pointer\n@brief Get process group ID for session leader for …\n&lt; tcgetsid without context pointer\n&lt; tcgetsid with context pointer\n@brief Send a break for a specific duration\n&lt; tcsendbreak without context pointer\n&lt; tcsendbreak with context pointer\n@brief Sets the parameters of the terminal\n&lt; tcsetattr without context pointer\n&lt; tcsetattr with context pointer\n&lt; telldir without context pointer\n&lt; telldir with context pointer\n@brief Type of Temp Sensor clock source\n@brief Configuration of measurement range for the …\n@brief Disable temperature sensor\n@brief Enable the temperature sensor\n@brief Read temperature sensor data that is converted to …\n@brief Type of temperature sensor driver handle\n@brief Install temperature sensor driver\n@brief Uninstall the temperature sensor driver\n&lt; The thread name.\n&lt; When scan_threshold is set, only APs which have an auth …\n&lt; Compile time\n&lt; Supervision timeout for the LE Link. Range: 0x000A to …\n&lt; Supervision timeout for the LE Link. Range: 0x000A to …\n&lt; Supervision timeout for the LE Link. Range: 0x000A to …\n&lt; Supervision timeout for the LE Link. Range: 0x000A to …\n&lt; UART data read timeout flag for UART_DATA event (no new …\n&lt; Network timeout in milliseconds. Note: If this value is …\n&lt; TWDT timeout duration in milliseconds\n&lt; response timeout, in milliseconds\n&lt; Timeout value (in milliseconds) of each ping procedure\n&lt; Network timeout in milliseconds. Note: If this value is …\n&lt; Network timeout in milliseconds\n&lt; Abort network operation if it is not completed after …\n@brief Timer alarm command\n&lt; Disable timer alarm\n&lt; Enable timer alarm\n&lt; timer handler argument\n&lt; timer handler argument\n@brief Timer autoreload command\n&lt; Disable auto-reload: hardware will not load counter …\n&lt; Enable auto-reload: hardware will load counter value …\n@brief Timer configurations\n@brief Timer count direction\n&lt; Descending Count from cnt.high|cnt.low\n&lt; Maximum number of timer count directions\n&lt; Ascending Count from Zero\n@brief Deinitializes the timer.\n@brief Disable timer interrupt\n@brief Enable timer interrupt\n&lt; Timer event, upon which MCPWM timer will generate the …\n&lt; abstruct time when timer expire\n&lt; abstruct time when timer expire\n&lt; timer handler\n&lt; timer handler\n@brief Get timer alarm value.\n@brief Get timer configure value.\n@brief Read the counter value of hardware timer, in unit …\n@brief Read the counter value of hardware timer.\n@brief Clear timer interrupt status, just used in ISR\n@brief Enable alarm interrupt, just used in ISR\n@brief Get auto reload enable status, just used in ISR\n@brief Get the current counter value, just used in ISR\n@brief Get interrupt status, just used in ISR\n@brief Disable timer group interrupt, by disable mask\n@brief Enable timer group interrupt, by enable mask\n@brief Set the alarm threshold for the timer, just used in …\n@brief Enable/disable a counter, just used in ISR\n@brief Timer-Group ID\n&lt; Hw timer group 0\n&lt; Hw timer group 1\n&lt; Maximum number of Hw timer groups\n@brief Timer ID\n&lt; Select timer0 of GROUPx\n@brief Initializes and configure the timer.\n@brief Timer interrupt type\n&lt; Interrupt mode: level mode\n@brief Interrupt types of the timer.\n&lt; interrupt of timer 0\n&lt; interrupt of watchdog\n@brief Add ISR handle callback for the corresponding timer.\n@brief Remove ISR handle callback for the corresponding …\n@brief Interrupt handle, used in order to free the isr …\n@brief Register Timer interrupt handler, the handler is an …\n@brief Interrupt handler callback function\n&lt; timer linker\n&lt; timer linker\n&lt; The timer source of channel (0 - LEDC_TIMER_MAX-1)\n@brief Pause the counter of hardware timer.\n&lt; timer period, 0 means timer is not periodic repeated\n&lt; timer period, 0 means timer is not periodic repeated\n&lt; Select the timer source of channel (0 - LEDC_TIMER_MAX-1)\n@brief Enable or disable generation of timer alarm events.\n@brief Set timer alarm value.\n@brief Enable or disable counter reload function when …\n@brief Set counting mode for hardware timer.\n@brief Set counter value to hardware timer.\n@brief Set hardware divider of the source clock to the …\n@brief Type of Timer Group clock source, reserved for the …\n@brief Start the counter of hardware timer.\n@brief Timer start/stop command\n&lt; Pause timer counter\n&lt; Start timer counter\n&lt;  XTS tweak key\n&lt; The TLS NamedCurve identifier.\n@brief Keep alive parameters structure\n@brief Keep alive parameters structure\n&lt; TLS protocol version of the connection, e.g., TLS 1.2, …\n&lt; TLS protocol version of the connection, e.g., TLS 1.2, …\n&lt; TLS protocol version of the connection, e.g., TLS 1.2, …\nType by which software timers are referenced.  For …\n&lt; state represents whether the root is able to access …\n&lt; to external DS\n&lt; toDS state, devices shall check this state firstly …\n&lt; to self\n&lt; to child queue\n&lt; to child (P2P) queue\n&lt; to parent queue\n&lt; to parent (P2P) queue\n&lt; Token from cellphone which is used to send ACK to …\n&lt; Topic associated with this event\n&lt; LWT (Last Will and Testament) message topic\n&lt; Length of the topic for this event associated with this …\nTopic definition struct\n&lt; data type of service\n&lt; Type of Service, a field specified in the IP header\ntotal length of this buffer and all next buffers in chain …\n&lt; number of bytes processed\n&lt; number of bytes processed\n&lt;  Total bytes allocated to data in the heap.\n&lt;  Total number of (variable size) blocks in the heap.\n&lt; I2S Total number of channels. If it is smaller than the …\n&lt; I2S Total number of channels. If it is smaller than the …\n&lt; Total length of the data (longer data are supplied with …\n&lt; Number of all entries.\n&lt;  Total free bytes in the heap. Equivalent to …\n&lt; Total number of ESPNOW peers, maximum value is …\n&lt; Total number of ESPNOW peers, maximum value is …\n&lt; I2S total number of slots. If it is smaller than the …\nTouch sensor charge/discharge speed\n&lt;Touch sensor charge / discharge speed, always zero\n&lt;Touch sensor charge / discharge speed, slowest\n&lt;Touch sensor charge / discharge speed\n&lt;Touch sensor charge / discharge speed\n&lt;Touch sensor charge / discharge speed\n&lt;Touch sensor charge / discharge speed\n&lt;Touch sensor charge / discharge speed\n&lt;Touch sensor charge / discharge speed, fast\nTouch sensor filter configuration\nTouch sensor filter configuration\n@brief Touch channel IIR filter coefficient configuration. …\n&lt;The filter mode is first-order IIR filter. The …\n&lt;The filter mode is first-order IIR filter. The …\n&lt;The filter mode is first-order IIR filter. The …\n&lt;The filter mode is first-order IIR filter. The …\n&lt;The filter mode is first-order IIR filter. The …\n&lt;The filter mode is first-order IIR filter. The …\n&lt;The filter mode is first-order IIR filter. The …\n&lt;The filter mode is jitter filter\nTouch sensor FSM mode\n&lt;To start touch FSM by software trigger\n&lt;To start touch FSM by timer\nTouch sensor high reference voltage\n&lt;Touch sensor high reference voltage, 2.4V\n&lt;Touch sensor high reference voltage, 2.5V\n&lt;Touch sensor high reference voltage, 2.6V\n&lt;Touch sensor high reference voltage, 2.7V\n&lt;Touch sensor high reference voltage, no change\nTouch sensor low reference voltage\n&lt;Touch sensor low reference voltage, 0.5V\n&lt;Touch sensor low reference voltage, 0.6V\n&lt;Touch sensor low reference voltage, 0.7V\n&lt;Touch sensor low reference voltage, 0.8V\n&lt;Touch sensor low reference voltage, no change\n&lt;Set touch channel number for sleep pad. Only one touch …\nTouch channel idle state configuration\n&lt;Idle status of touch channel is ground connection\n&lt;Idle status of touch channel is high resistance state\nTouch sensor denoise configuration\n&lt;Denoise channel internal reference capacitance is 5pf\n&lt;Denoise channel internal reference capacitance is 6.4pf\n&lt;Denoise channel internal reference capacitance is 7.8pf\n&lt;Denoise channel internal reference capacitance is 9.2pf\n&lt;Denoise channel internal reference capacitance is 10.6pf\n&lt;Denoise channel internal reference capacitance is 12.0pf\n&lt;Denoise channel internal reference capacitance is 13.4pf\n&lt;Denoise channel internal reference capacitance is 14.8pf\n&lt;Denoise range is 10bit\n&lt;Denoise range is 12bit\n&lt;Denoise range is 4bit\n&lt;Denoise range is 8bit\nTouch sensor denoise configuration\n&lt;Active for one of the enabled channels.\n&lt;Measurement done for one of the enabled channels.\n&lt;Inactive for one of the enabled channels.\n&lt;Measurement done for all the enabled channels.\n&lt;Timeout for one of the enabled channels.\nTouch sensor shield channel drive capability level\n&lt;The max equivalent capacitance in shield channel is 40pf\n&lt;The max equivalent capacitance in shield channel is 80pf\n&lt;The max equivalent capacitance in shield channel is 120pf\n&lt;The max equivalent capacitance in shield channel is 160pf\n&lt;The max equivalent capacitance in shield channel is 200pf\n&lt;The max equivalent capacitance in shield channel is 240pf\n&lt;The max equivalent capacitance in shield channel is 280pf\n&lt;The max equivalent capacitance in shield channel is 320pf\nTouch sensor channel sleep configuration\nTouch pad channel\n&lt; Touch pad channel 0 is GPIO4(ESP32)\n&lt; Touch pad channel 1 is GPIO0(ESP32) / GPIO1(ESP32-S2)\n&lt; Touch pad channel 2 is GPIO2(ESP32) / GPIO2(ESP32-S2)\n&lt; Touch pad channel 3 is GPIO15(ESP32) / GPIO3(ESP32-S2)\n&lt; Touch pad channel 4 is GPIO13(ESP32) / GPIO4(ESP32-S2)\n&lt; Touch pad channel 5 is GPIO12(ESP32) / GPIO5(ESP32-S2)\n&lt; Touch pad channel 6 is GPIO14(ESP32) / GPIO6(ESP32-S2)\n&lt; Touch pad channel 7 is GPIO27(ESP32) / GPIO7(ESP32-S2)\n&lt; Touch pad channel 8 is GPIO33(ESP32) / GPIO8(ESP32-S2)\n&lt; Touch pad channel 9 is GPIO32(ESP32) / GPIO9(ESP32-S2)\nTouch sensor waterproof configuration\nTouch sensor waterproof configuration\n@brief Level of filter applied on the original data …\n&lt;Filter the raw data. The coefficient is 2 (Typical value).\n&lt;Filter the raw data. The coefficient is 4.\n&lt;Filter the raw data. The coefficient is 8.\n&lt;No filtering of raw data.\nTouch sensor initial charge level\n&lt;Initial level of charging voltage, high level\n&lt;Initial level of charging voltage, low level\nESP32 Only\n&lt;Touch interrupt will happen if counter value is larger …\n&lt;Touch interrupt will happen if counter value is less than …\n&lt; wakeup interrupt is generated if both SET1 and SET2 are …\n&lt; wakeup interrupt is generated if SET1 is “touched”\nTouch sensor high reference voltage attenuation\n&lt;Touch sensor high reference voltage attenuation,   0V …\n&lt;Touch sensor high reference voltage attenuation, 0.5V …\n&lt;Touch sensor high reference voltage attenuation, 1.0V …\n&lt;Touch sensor high reference voltage attenuation, 1.5V …\n&lt;Touch sensor high reference voltage attenuation, no change\n&lt; I2C bus timeout period\n&lt; Max transfer speed\n&lt; Transfer id\n&lt; Transfer id\n&lt; Transfer id\n&lt; Transaction data length, in bits\n&lt; Depth of internal transfer queue, increase this value …\n&lt; Depth of internal transfer queue, increase this value …\n&lt; Size of internal transaction queue\n@endcond\n@brief Transfer complete callback\n&lt; transmit function pointer\n@brief Transmit packet from Ethernet MAC\n&lt; transmit function pointer\n@brief Transmit packet from Ethernet MAC\n@brief Transmit packet from Ethernet MAC constructed with …\n@brief Transmit packet from Ethernet MAC constructed with …\n&lt; transmit wrap function pointer\n&lt; transmit wrap function pointer\n&lt; Selects transport\n&lt; Custom transport handle to use. Warning: The transport …\n&lt; HTTP transport type, see <code>esp_http_client_transport_t</code>\n&lt; tree top, mesh_assoc IE\n&lt; Trigger panic when timeout occurs\n&lt; Enables triple sampling when the TWAI controller samples …\n&lt; truncate without context pointer\n&lt; truncate with context pointer\n&lt; Timing segment 1 (Number of time quanta, between 1 to 16)\n&lt; Timing segment 2 (Number of time quanta, 1 to 8)\nType by which tasks are referenced.  For example, a call …\n&lt; Time to Live,a field specified in the IP header\n@brief   Clear the receive queue\n@brief   Clear the receive queue of a given TWAI driver …\n@brief   Clear the transmit queue\n@brief Clear the transmit queue of a given TWAI driver …\n@brief TWAI clock source\n@brief   Install TWAI driver\n@brief Install TWAI driver and return a handle\n@brief   Uninstall the TWAI driver\n@brief Uninstall the TWAI driver with a given handle\n@brief   Structure for acceptance filter configuration of …\n@brief   Structure for general configuration of the TWAI …\n@brief   Get current status information of the TWAI driver\n@brief Get current status information of a given TWAI …\n@brief TWAI controller handle\n@brief   Start the bus recovery process\n@brief Start the bus recovery process with a given handle\n@brief   Structure to store a TWAI message\n@brief   TWAI Controller operating modes\n&lt; The TWAI controller will not influence the bus (No …\n&lt; Normal operating mode where TWAI controller can …\n&lt; Transmission does not require acknowledgment. Use this …\n@brief   Read TWAI driver alerts\n@brief Read TWAI driver alerts with a given handle\n@brief   Receive a TWAI message\n@brief Receive a TWAI message via a given handle\n@brief   Reconfigure which alerts are enabled\n@brief Reconfigure which alerts are enabled, with a given …\n@brief   Start the TWAI driver\n@brief Start the TWAI driver with a given handle\n@brief   TWAI driver states\n&lt; Bus-off state. The TWAI controller cannot participate in …\n&lt; Recovering state. The TWAI controller is undergoing bus …\n&lt; Running state. The TWAI controller can transmit and …\n&lt; Stopped state. The TWAI controller will not participate …\n@brief   Structure to store status information of TWAI …\n@brief   Stop the TWAI driver\n@brief Stop the TWAI driver with a given handle\n@brief   Structure for bit timing configuration of the …\n@brief   Transmit a TWAI message\n@brief Transmit a TWAI message via a given handle\n&lt; The AES context used for tweak computation.\n&lt; WiFi antenna mode for transmission, it can be set to …\n&lt; WiFi TX buffer type\n&lt; Pointer to transmit buffer, or NULL for no MOSI phase\n&lt; Pointer to transmit buffer, or NULL for no MOSI phase\n&lt;  channel for sending test data, tx_channel = (Frequency …\n&lt;  channel for sending test data, tx_channel = (Frequency …\n&lt; Array of TX channels that are about to be managed by a …\n@brief Transmit LCD RGB data\n&lt; RMT TX parameter\n&lt; If SPI_TRANS_USE_TXDATA is set, data set here is sent …\n&lt; I2S auto clear tx descriptor if there is underflow …\n&lt; I2S auto clear tx descriptor if there is underflow …\n&lt; Current value of Transmit Error Counter\n&lt; Number of messages that failed transmissions\n!&lt; GPIO number for TX path, -1 means using default one\n&lt; Transmit GPIO number\n&lt; pkt tx data length value\n@brief Transmit LCD command and corresponding parameters\n&lt; tx phy type\n&lt; tx phy type\n&lt; ext adv tx power\n&lt; extend advertising tx power\n&lt; periodic advertising tx power\n&lt; Number of messages TX queue can hold (set to 0 to …\n&lt; default Tx antenna\n&lt; UART TX empty interrupt threshold.\n&lt; default Tx power\n&lt;When the configured output format is 12bit.\n&lt; ipaddress type\n@ref lwip_ip_addr_type\n&lt; WebSocket frame type\n&lt; Whether the interrupt is an edge or level type …\n&lt; ipaddress type\n&lt; Service type\n&lt; Service type\n&lt; Type of smartconfig(ESPTouch or AirKiss).\n&lt; ESP defined IE type, include Assoc IE, SSID IE, Ext …\n@ref lwip_ip_addr_type\n&lt; option type\n&lt; partition type (app/data)\n&lt; The SAN type, value of MBEDTLS_X509_SAN_XXX.\n&lt; WebSocket frame type\n&lt; Type of stored key-value pair\n&lt; I2S event type\n&lt; UART event type\n&lt; ext adv type\n&lt; The attribute type\n&lt; The type id.\na bit field indicating pbuf type and allocation sources …\n&lt; IP address union\n&lt; IP address union\n@brief UART AT cmd char configuration parameters Note that …\n@brief Clear UART interrupt status\n@brief UART configuration parameters for uart_param_config …\n@brief Clear UART interrupt enable bits\n@brief   UART disable pattern detect function. Designed …\n@brief Disable UART RX interrupt (RX_FULL &amp; RX_TIMEOUT …\n@brief Disable UART TX interrupt (TX_FULL &amp; TX_TIMEOUT …\n@brief Uninstall UART driver.\n@brief Install UART driver and set the UART to the default …\n@brief Set UART interrupt enable\n@brief UART enable pattern detect function. Designed for …\n@brief Enable UART RX interrupt (RX_FULL &amp; RX_TIMEOUT …\n@brief Enable UART TX interrupt (TX_FULL &amp; TX_TIMEOUT …\n@brief Event structure used in UART event queue\n@brief UART event types used in the ring buffer\n&lt; UART break event\n&lt; UART RX buffer full event\n&lt; UART data event\n&lt; UART TX data and break event\n&lt; UART event max index\n&lt; UART FIFO overflow event\n&lt; UART RX frame error event\n&lt; UART RX parity event\n&lt; UART pattern detected\n&lt; UART wakeup event\n@brief Alias of uart_flush_input. UART ring buffer flush. …\n@brief Clear input buffer, discard all the data is in the …\n@brief Get the UART baud rate configuration.\n@brief   UART get RX ring buffer cached data length\n@brief Returns collision detection flag for RS485 mode …\n@brief Get the UART hardware flow control configuration.\n@brief Get the UART parity mode configuration.\n@brief Get the frequency of a clock source for the HP UART …\n@brief Get mutex guarding select() notifications\n@brief Get the UART stop bit configuration.\n@brief   UART get TX ring buffer free space size\n@brief Get the number of RX pin signal edges for light …\n@brief Get the UART data bit configuration.\n@brief UART hardware flow control modes\n&lt; enable TX hardware flow control (cts)\n&lt; enable hardware flow control\n&lt; disable hardware flow control\n&lt; enable RX hardware flow control (rts)\n@brief Configure UART interrupts.\n@brief UART interrupt configuration parameters for …\n@brief Checks whether the driver is installed or not\n@brief UART mode selection\n&lt; mode: IRDA  UART mode\n&lt; mode: application control RS485 UART mode (used for test …\n&lt; mode: RS485 collision detection UART mode (used for test …\n&lt; mode: half duplex RS485 UART mode control by RTS pin\n&lt; mode: regular UART mode\n@brief Set UART configuration parameters.\n@brief UART parity constants\n&lt; Disable UART parity\n&lt; Enable UART even parity\n&lt; Enable UART odd parity\n@brief Return the nearest detected pattern position in …\n@brief Return the nearest detected pattern position in …\n@brief Allocate a new memory with the given length to save …\n@brief UART port number, can be UART_NUM_0 ~ (UART_NUM_MAX …\n&lt; UART port 0\n&lt; UART port 1\n&lt; UART port max\n@brief UART read bytes from UART buffer\n@brief Type of UART clock source, reserved for the legacy …\n@brief Configure behavior of UART RX timeout interrupt.\n@brief Set UART baud rate.\n@brief Manually set the UART DTR pin level.\n@brief Set hardware flow control.\n@brief Set UART line inverse mode\n@brief Configure TX signal loop back to RX module, just …\n@brief UART set communication mode\n@brief Set UART parity mode.\n@brief Assign signals of a UART peripheral to GPIO pins\n@brief Manually set the UART RTS pin level. @note  UART …\n@brief Set uart threshold value for RX fifo full @note If …\n@brief UART set threshold timeout for TOUT feature\n@brief Set notification callback function for select() …\n@brief Set UART stop bits.\n@brief Set software flow control.\n@brief Set uart threshold values for TX fifo empty\n@brief Set UART idle interval after tx FIFO is empty\n@brief Set the number of RX pin signal edges for light …\n@brief Set UART data bits.\n@brief UART signal bit map\n&lt; inverse the UART cts signal\n&lt; inverse the UART dsr signal\n&lt; inverse the UART dtr signal\n&lt; Disable UART signal inverse\n&lt; inverse the UART irda_rx signal\n&lt; inverse the UART irda_tx signal\n&lt; inverse the UART rts signal\n&lt; inverse the UART rxd signal\n&lt; inverse the UART txd signal\n@brief UART stop bits number\n&lt; stop bit: 1bit\n&lt; stop bit: 1.5bits\n&lt; stop bit: 2bits\n@brief UART software flow control configuration parameters\n@brief Send data to the UART port from a given buffer and …\n@brief Wait until UART TX FIFO is empty.\n@brief Wait until UART tx memory empty and the last char …\n@brief UART word length constants\n&lt; word length: 5bits\n&lt; word length: 6bits\n&lt; word length: 7bits\n&lt; word length: 8bits\n@brief Send data to the UART port from a given buffer and …\n@brief Send data to the UART port from a given buffer and …\n&lt; The total run time allocated to the task so far, as …\n&lt; The total run time allocated to the task so far, as …\nWaits for a direct to task notification on a particular …\nSee https://www.FreeRTOS.org/RTOS-task-notifications.html …\nconfigGENERATE_RUN_TIME_STATS, …\n&lt; ADC controlled by ULP, see <code>adc_ulp_mode_t</code>\n&lt; ext scan uncoded config parameters\n&lt; ADC unit\n&lt; ADC unit\n&lt; ADC unit\n&lt; unlink without context pointer\n&lt; unlink with context pointer\n&lt; Gatt client callback param of …\n&lt; The buffer for the unstructured types. rfc822Name, …\n&lt; Number of unused bits at the end of the string\n&lt; Number of unused bits at the end of the string\n&lt; Up-sampling param fp\n&lt; Up-sampling param fs, not allowed to be greater than 480\n&lt; Event parameter of ESP_GAP_BLE_UPDATE_CONN_PARAMS_EVT\n&lt; Event parameter of …\n&lt; DTM state change event, 0x00: DTM TX start, 0x01: DTM RX …\n&lt; Indicates whether publisher’s service ID needs to be …\n&lt; Event parameter of …\n&lt; The URI of this request (1 byte extra for null …\n&lt; The URI to handle\n&lt; The URI of this request (1 byte extra for null …\n&lt; The URI to handle\n&lt; Complete <em>MQTT</em> broker URI\nURI matcher function.\nURI matcher function.\n&lt; HTTP URL, the information on the URL is most important, …\n&lt; The minimum amount of stack space that has remained for …\n&lt; The minimum amount of stack space that has remained for …\n@brief Configuration structure for the …\n@brief Install USB-SERIAL-JTAG driver and set the …\n@brief Uninstall USB-SERIAL-JTAG driver.\n@brief Check if the USB Serial/JTAG port is connected to …\n@brief USB_SERIAL_JTAG read bytes from USB_SERIAL_JTAG …\n@brief Send data to the USB-UART port from a given buffer …\n&lt; I2S using APLL as main I2S clock, enable it to get …\n&lt; I2S using APLL as main I2S clock, enable it to get …\n&lt; Use the ECDSA peripheral for the private key operations\n&lt; Use the ECDSA peripheral for the private key operations\n&lt; True - Using esp_wifi_ftm_get_report to get FTM report, …\n&lt; Use a global ca_store for all the connections in which …\n&lt; Use a global ca_store for all the connections in which …\n&lt; Use a global ca_store for all the connections in which …\n&lt; Use a global ca_store, look esp-tls documentation for …\n&lt; Enable this option to use secure element or atecc608a …\n&lt; Enable this option to use secure element or atecc608a …\n&lt; Enable secure element, available in ESP32-ROOM-32SE, for …\n&lt; whether the child is joined\n&lt; Number of used entries.\n&lt; User-defined variable. Can be used to store eg …\n&lt; User-defined variable. Can be used to store eg …\n&lt; The User Agent string to send with HTTP requests\n&lt; WS user agent\nUser context pointer passed during URI registration.\nPointer to user context data which will be available to …\nUser context pointer passed during URI registration.\nPointer to user context data which will be available to …\n&lt; User private data, passed directly to on_color_trans_done…\n&lt; User private data, passed directly to on_color_trans_done…\n&lt; user_data context, from esp_http_client_config_t …\n&lt; user_data context, from esp_http_client_config_t …\n&lt; HTTP user_data context\nUser context data to pass as parameter to callback function\n&lt; User data, used to store externally customized data\n&lt; Using for Http authentication\n&lt; <em>MQTT</em> username\n&lt; utime without context pointer\n&lt; utime with context pointer\nUUID to be assigned to the BLE characteristic which is …\nUUID to be assigned to the BLE characteristic which is …\n&lt; UUID\n&lt; UUID\n&lt; Gatt  attribute value UUID of included service\n&lt; The attribute uuid, it’s valid for all of the type\n&lt; The uuid of the service\n&lt; The characteristic uuid\n&lt; The characteristic descriptor uuid\n&lt; The include service uuid\n&lt; 128bit UUID\n&lt; 16bit UUID\n&lt; 32bit UUID\n&lt; UUID length\n&lt; UUID value\n&lt; The priority to which the task will return if the task’…\n&lt; The priority to which the task will return if the task’…\n&lt; Current task list index being traversed.\n&lt; Current task list index being traversed.\n&lt; The priority at which the task was running (may be …\n&lt; The priority at which the task was running (may be …\nReturn the number of messages stored in a queue.\nA version of uxQueueMessagesWaiting() that can be called …\nReturn the number of free spaces available in a queue.  …\n@return The number of tasks that the real time kernel is …\n@brief Fill an array of TaskSnapshot_t structures for …\nINCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in …\nINCLUDE_uxTaskGetStackHighWaterMark2 must be set to 1 in …\nconfigUSE_TRACE_FACILITY must be defined as 1 in …\nINCLUDE_uxTaskPriorityGet must be defined as 1 for this …\nA version of uxTaskPriorityGet() that can be used from an …\nQueries a timer to determine if it is an auto-reload …\n&lt; Optional X.509 v3 extensions.\nThis function is used to provide a statically allocated …\nThis function is used to provide a statically allocated …\n@brief Hook function called on entry to tickless idle\nThe application stack overflow hook is called when a stack …\nDelete an event group that was previously created by a …\n@brief Deletes an event group previously created using …\n@cond !DOC_EXCLUDE_HEADER_SECTION\n@brief Clear current interrupt mask and set given mask\n@brief Re-enable interrupts in a nested manner (meant to …\n@brief Enter a critical section\n@brief Exit a critical section\n@brief Set interrupt mask and return current interrupt …\n@brief Set a watchpoint to watch the last 32 bytes of the …\n@brief TCB cleanup hook\n@brief Perform a context switch from a task\n@brief Perform a context switch from an ISR\n@brief Yields the other core\nDelete a queue - freeing all the memory allocated for …\n@brief Deletes a queue previously created using …\n@cond !DOC_EXCLUDE_HEADER_SECTION\n@brief   Delete a ring buffer\n@brief Deletes a ring buffer previously created using …\n@brief   Get information about ring buffer status\n@brief   Return a previously-retrieved item to the ring …\n@brief   Return a previously-retrieved item to the ring …\n@brief Deletes a semaphore previously created using one of …\nDeletes a stream buffer that was previously created using …\nMemory regions are assigned to a restricted task when the …\nDelay a task for a given number of ticks.  The actual time …\nINCLUDE_vTaskDelete must be defined as 1 for this function …\n@brief Deletes a task previously created using …\nNOTE:  At the time of writing only the x86 real mode port, …\nA version of xTaskNotifyGiveIndexed() that can be called …\nconfigUSE_TRACE_FACILITY must be defined as 1 for this …\nconfigGENERATE_RUN_TIME_STATS and …\n@brief Fill a TaskSnapshot_t structure for specified task.\nconfigUSE_TRACE_FACILITY and …\nINCLUDE_vTaskPrioritySet must be defined as 1 for this …\nINCLUDE_vTaskSuspend must be defined as 1 for this …\nEach task contains an array of pointers that is …\nSet local storage pointer and deletion callback.\nCapture the current time for future use with …\nStarts the real time kernel tick processing.  After …\nINCLUDE_vTaskSuspend must be defined as 1 for this …\nSuspends the scheduler without disabling interrupts.  …\nUpdates a timer to be either an auto-reload timer, in …\nSets the ID assigned to the timer.\n&lt; The named value.\n&lt;Raw data value\n&lt; option value\n&lt; The named value.\n&lt; The named value.\n&lt; Equivalent unsigned value for the RMT item\n&lt; Equivalent unsigned value for the RMT symbol\n&lt; Start time of certificate validity.\n&lt; End time of certificate validity.\n&lt; Element value array\n&lt; Gatt attribute value\n&lt; Characteristic value\n&lt; Notify attribute value\n&lt; The write attribute value\n&lt; The indication or notification value , value is valid …\n&lt; Characteristic value length\n&lt; Notify attribute value\n&lt; Event parameter of ESP_GAP_BLE_VENDOR_CMD_COMPLETE_EVT\n&lt; vendor specific configuration, optional, left as NULL if …\n@brief Vendor Information Element header\n&lt; Vendor identifier (OUI).\n&lt; Vendor-specific OUI type.\nUnique version number of security implementation\nUnique version number of security implementation\n&lt; Security verification of the broker\nPointer to the buffer containing the verifier\nPointer to the buffer containing the verifier\nPointer to the buffer containing the verifier\nLength (in bytes) of the verifier\nLength (in bytes) of the verifier\nLength (in bytes) of the verifier\n&lt; ADC Calibration\n&lt; The crypto callback function structure version\n&lt; CRL version (1=v1, 2=v2)\n&lt; The X.509 version. (1=v1, 2=v2, 3=v3)\n&lt; Application version\n&lt; Bootloader version\n&lt; version number of the defined structure\n&lt; max vote times in self-healing, default:1000\n&lt; the voted address after connection\n&lt; the router RSSI of the voted address\n&lt; vote started\n&lt; vote ttl, indicate the voting is from myself or from …\n&lt; the number of all voting nodes\n&lt; Vref used by lookup table\n&lt; if true, we create a semaphore to signal time sync event\n&lt; if true, we create a semaphore to signal time sync event\n&lt; Warm up time before assuming NAN Anchor Master role\n@brief     The Rx callback function of Action Tx operations\n@brief Action Frame Tx Request\n@brief Range of active scan times per channel\n@brief WiFi antenna configuration\n@brief WiFi GPIOs configuration for antenna selection\n@brief WiFi GPIO configuration for antenna selection\n@brief WiFi antenna mode\n&lt; Enable WiFi antenna 0 only\n&lt; Enable WiFi antenna 1 only\n&lt; Enable WiFi antenna 0 and 1, automatically select an …\n&lt; Invalid WiFi enabled antenna\n@brief WiFi antenna\n&lt; WiFi antenna 0\n&lt; WiFi antenna 1\n&lt; Invalid WiFi antenna\n@brief Soft-AP configuration settings for the device\n@brief Description of a WiFi AP\n&lt; authenticate mode : WiFi EAP security\n&lt; authenticate mode : open\n&lt; authenticate mode : OWE\n&lt; authenticate mode : WAPI_PSK\n&lt; authenticate mode : WEP\n&lt; authenticate mode : WiFi EAP security\n&lt; authenticate mode : WPA2_PSK\n&lt; authenticate mode : WPA2_WPA3_PSK\n&lt; authenticate mode : WPA3_ENT_SUITE_B_192_BIT\n&lt; this authentication mode will yield same result as …\n&lt; this authentication mode will yield same result as …\n&lt; authenticate mode : WPA3_PSK\n&lt; authenticate mode : WPA_PSK\n&lt; authenticate mode : WPA_WPA2_PSK\n@brief WiFi beacon monitor parameter configuration\n@brief Disable Wi-Fi and BT common module\n@brief Enable Wi-Fi and BT common module\n@brief     Callocate memory for WiFi driver\n&lt; the cipher type is AES-CMAC-128\n&lt; the cipher type is AES-GMAC-128\n&lt; the cipher type is AES-GMAC-256\n&lt; the cipher type is CCMP\n&lt; the cipher type is GCMP\n&lt; the cipher type is GCMP-256\n&lt; the cipher type is none\n&lt; the cipher type is SMS4\n&lt; the cipher type is TKIP\n&lt; the cipher type is TKIP and CCMP\n&lt; the cipher type is unknown\n&lt; the cipher type is WEP104\n&lt; the cipher type is WEP40\n@brief Configuration data for device’s AP or STA or NAN.\n&lt; Country policy is auto, use the country info of AP to …\n&lt; Country policy is manual, always use the configured …\n@brief Structure describing WiFi country-based regional …\n@brief The RX callback function of Channel State …\n@brief CSI data type\nArgument structure for WIFI_EVENT_ACTION_TX_STATUS event\nArgument structure for WIFI_EVENT_AP_PROBEREQRECVED event\nArgument structure for WIFI_EVENT_AP_STACONNECTED event\nArgument structure for WIFI_EVENT_AP_STADISCONNECTED event\nArgument structure for WIFI_EVENT_AP_WPS_RG_FAILED event\nArgument structure for WIFI_EVENT_AP_WPS_RG_PIN event\nArgument structure for WIFI_EVENT_AP_WPS_RG_SUCCESS event\nArgument structure for WIFI_EVENT_STA_BSS_RSSI_LOW event\nArgument structure for WIFI_EVENT_FTM_REPORT event\nArgument structure for WIFI_EVENT_HOME_CHANNEL_CHANGE event\nArgument structure for WIFI_EVENT_NAN_RECEIVE event\nArgument structure for WIFI_EVENT_NAN_REPLIED event\nArgument structure for WIFI_EVENT_NAN_SVC_MATCH event\nArgument structure for WIFI_EVENT_NDP_CONFIRM event\nArgument structure for WIFI_EVENT_NDP_INDICATION event\nArgument structure for WIFI_EVENT_NDP_TERMINATED event\nArgument structure for WIFI_EVENT_ROC_DONE event\nArgument structure for WIFI_EVENT_STA_AUTHMODE_CHANGE event\nArgument structure for WIFI_EVENT_STA_CONNECTED event\nArgument structure for WIFI_EVENT_STA_DISCONNECTED event\nArgument structure for WIFI_EVENT_SCAN_DONE event\nArgument structure for WIFI_EVENT_STA_WPS_ER_PIN event\nArgument structure for WIFI_EVENT_STA_WPS_ER_SUCCESS event\nArgument structure for WIFI_EVENT_STA_WPS_ER_FAILED event\n&lt; WPS normal fail reason\n&lt; WPS receive M2D frame\nWiFi event declarations\n&lt; Status indication of Action Tx operation\n&lt; Receive probe request packet in soft-AP interface\n&lt; a station connected to Soft-AP\n&lt; a station disconnected from Soft-AP\n&lt; Soft-AP start\n&lt; Soft-AP stop\n&lt; Soft-AP wps fails in registrar mode\n&lt; Soft-AP wps overlap in registrar mode\n&lt; Soft-AP wps pin code in registrar mode\n&lt; Soft-AP wps succeeds in registrar mode\n&lt; Soft-AP wps timeout in registrar mode\n&lt; Connectionless module wake interval start\n&lt; Receive report of FTM procedure\n&lt; WiFi home channel change，doesn’t occur when scanning\n&lt; iTWT probe\n&lt; iTWT setup\n&lt; iTWT suspend\n&lt; iTWT teardown\n&lt; Invalid WiFi event ID\n&lt; Received a Follow-up message\n&lt; Replied to a NAN peer with Service Discovery match\n&lt; NAN Discovery has started\n&lt; NAN Discovery has stopped\n&lt; NAN Service Discovery match found\n&lt; NDP Confirm Indication\n&lt; Received NDP Request from a NAN Peer\n&lt; NAN Datapath terminated indication\n&lt; Remain-on-Channel operation complete\n&lt; Finished scanning AP\n&lt; the auth mode of AP connected by device’s station …\n&lt; Station beacon timeout\n&lt; AP’s RSSI crossed configured threshold\n&lt; Station connected to AP\n&lt; Station disconnected from AP\n&lt; Station start\n&lt; Station stop\n&lt; Station wps fails in enrollee mode\n&lt; Station wps overlap in enrollee mode\n&lt; Station wps pin code in enrollee mode\n&lt; Station wps succeeds in enrollee mode\n&lt; Station wps timeout in enrollee mode\n&lt; TWT wakeup\n&lt; WiFi ready\n@brief FTM Initiator configuration\nArgument structure for\n@brief FTM operation status types\n&lt; Peer rejected FTM configuration in FTM Request\n&lt; Unknown error during FTM exchange\n&lt; Peer did not respond to FTM Requests\n&lt; FTM session did not result in any valid measurements\n&lt; FTM exchange is successful\n&lt; Peer does not support FTM\n&lt; User triggered termination\n@brief Description of a WiFi AP HE Info\n@brief Configuration for STA’s HT2040 coexist management\n@brief WiFi stack configuration parameters passed to …\n@brief WiFi ioctl command type\n&lt; Get the configuration of STA’s HT2040 coexist …\n&lt; Set the configuration of STA’s HT2040 coexist …\n@brief Configuration for WiFi ioctl\n@brief WiFi log level\n@brief WiFi log module definition\n@brief     Update WiFi MAC time\n@brief     Allocate a chunk of memory for WiFi driver\nSets mode of operation of Wi-Fi during provisioning This …\nSets mode of operation of Wi-Fi during provisioning This …\n&lt; WiFi soft-AP mode\n&lt; WiFi station + soft-AP mode\n&lt; WiFi NAN mode\n&lt; null mode\n&lt; WiFi station mode\n@brief Disable Wi-Fi module\n@brief Enable Wi-Fi module\n@brief NAN Discovery start configuration\n@brief NAN Datapath End parameters\n@brief NAN Datapath Request parameters\n@brief NAN Datapath Response parameters\n@brief NAN Follow-up parameters\n@brief NAN Publish service configuration parameters\n@brief NAN Services types\n&lt; Send unicast Publish frame to Subscribers that match the …\n&lt; Send broadcast Publish frames in every Discovery …\n&lt; Send broadcast Subscribe frames in every DW\n&lt; Passively listens to Publish frames\n@brief NAN Subscribe service configuration parameters\n@brief Forward declaration of WiFi interface handle\n@brief     The net stack buffer free callback function\n@brief     The net stack buffer reference counter callback …\n@brief     Operation Phymode\n&lt; PHY mode for 11b\n&lt; PHY mode for 11g\n&lt; PHY mode for Bandwidth HE20\n&lt; PHY mode for Bandwidth HT20\n&lt; PHY mode for Bandwidth HT40\n&lt; PHY mode for Low Rate\n@brief WiFi PHY rate encodings\n&lt; 11 Mbps with long preamble\n&lt; 11 Mbps with short preamble\n&lt; 12 Mbps\n&lt; 18 Mbps\n&lt; 1 Mbps with long preamble\n&lt; 24 Mbps\n&lt; 2 Mbps with long preamble\n&lt; 2 Mbps with short preamble\n&lt; 36 Mbps\n&lt; 48 Mbps\n&lt; 54 Mbps\n&lt; 5.5 Mbps with long preamble\n&lt; 5.5 Mbps with short preamble\n&lt; 6 Mbps\n&lt; 9 Mbps */ /**&lt; rate table and guard interval information …\n&lt; 250 Kbps\n&lt; 500 Kbps\n&lt; MCS0 with long GI\n&lt; MCS0 with short GI\n&lt; MCS1 with long GI\n&lt; MCS1 with short GI\n&lt; MCS2 with long GI\n&lt; MCS2 with short GI\n&lt; MCS3 with long GI\n&lt; MCS3 with short GI\n&lt; MCS4 with long GI\n&lt; MCS4 with short GI\n&lt; MCS5 with long GI\n&lt; MCS5 with short GI\n&lt; MCS6 with long GI\n&lt; MCS6 with short GI\n&lt; MCS7 with long GI\n&lt; MCS7 with short GI\n@brief Received packet radio metadata header, this is the …\nConfiguration structure for Protected Management Frame\n@brief The RX callback function in the promiscuous mode. …\n@brief Mask for filtering different packet types in …\n@brief Payload passed to ‘buf’ parameter of …\n@brief Promiscuous frame type\n&lt; Control frame, indicates ‘buf’ argument is …\n&lt; Data frame, indiciates ‘buf’ argument is …\n&lt; Management frame, indicates ‘buf’ argument is …\n&lt; Other type, such as MIMO etc. ‘buf’ argument is …\n@brief   Events generated by manager\nEmitted when device fails to connect to the AP of which the\nEmitted when Wi-Fi AP credentials are received via …\nEmitted when device successfully connects to the AP of …\nSignals that manager has been de-initialized\nSignals that provisioning service has stopped\nEmitted when the manager is initialized\nIndicates that provisioning has started\n@brief   Handler for receiving and responding to requests …\n@brief   WiFi status data to be sent in response to …\n@brief   Internal handlers for receiving and responding to …\n@brief   Internal handlers for receiving and responding to …\n@brief   WiFi config data received by slave during …\n@brief   Type of context data passed to each get/set/apply …\n@brief   Event handler that is used by the manager while …\n@brief   Structure for specifying the manager configuration\n@brief   Runs Wi-Fi as Station with the supplied …\n@brief   Stop provisioning (if running) and release …\n@brief   Disable auto stopping of provisioning service …\n@brief   Create an additional endpoint and allocate …\n@brief   Register a handler for the previously created …\n@brief   Unregister the handler for an endpoint\n@brief   Get reason code in case of Wi-Fi station …\n@brief   Get state of Wi-Fi Station during provisioning\n@brief   Initialize provisioning manager instance\n@brief   Checks if device is provisioned\n@brief   Reset Wi-Fi provisioning config\n@brief   Reset internal state machine and clear …\n@brief   Reset internal state machine and clear …\n@brief   Set application version and capabilities in the …\n@brief   Start provisioning service\n@brief   Stop provisioning service\n@brief   Wait for provisioning service to finish\n@brief   Structure for specifying the provisioning scheme …\n@brief   Scheme that can be used by manager for …\n@brief   Set manufacturer specific data in scan response\n@brief   Set the 128 bit GATT service UUID used for …\n@brief   Scheme that can be used by manager for …\n@brief Provide HTTPD Server handle externally.\n@brief   Structure for specifying the provisioning scheme …\n@brief   Security modes supported by the Provisioning …\n@brief  Security 1 params structure This needs to be …\n@brief  Security 2 params structure This needs to be …\nNo security (plain-text communication)\nThis secure communication mode consists of X25519 key …\nThis secure communication mode consists of SRP6a based …\n@brief   Security modes supported by the Provisioning …\n@brief   WiFi STA connected status information\n@brief   WiFi STA connection fail reason\n@brief   WiFi STA status for conveying back to the …\n&lt; Maximum modem power saving. In this mode, interval to …\n&lt; Minimum modem power saving. In this mode, station wakes …\n&lt; No power save\n@brief     Reallocate a chunk of memory for WiFi driver\n@brief     The WiFi RX callback function\nConfiguration for SAE-PK\nConfiguration for SAE PWE derivation\n@brief Parameters for an SSID scan.\n&lt; All channel scan, scan will end after scan all the …\n&lt; Do fast scan, scan will end after find SSID match AP\n@brief Structure describing parameters for a WiFi fast scan\n@brief Aggregate of active &amp; passive scan time per channel\n&lt; active scan\n&lt; passive scan\n&lt; the channel width is HT40 and the secondary channel is …\n&lt; the channel width is HT40 and the secondary channel is …\n&lt; the channel width is HT20\n&lt; Sort match AP in scan list by security mode\n&lt; Sort match AP in scan list by RSSI\n@brief STA configuration settings for the device\n@brief Description of STA associated with AP\n@brief List of stations associated with the Soft-AP\n&lt; WiFi state of the station\n&lt; all configuration will store in both memory and flash\n&lt; all configuration will only store in the memory\n&lt; WiFi Task Core ID\n@brief    TxDone callback function type. Should be …\n@brief     Vendor Information Element index\n@brief     Vendor Information Element type\n@brief Erase part of the WL storage\n@brief wear levelling handle\n@brief Mount WL for defined partition\n&lt; The value is ESP_BLE_WHITELIST_ADD if add address to …\n@brief Read data from the WL storage\n@brief Get sector size of the WL instance\n@brief Get the actual flash size in use for the WL storage …\n@brief Unmount WL for defined partition\n@brief Write data to the WL storage\n&lt; WP pin when SPI pins set via efuse (read by ROM …\n&lt; WiFi station crypto functions when connect\n@brief The crypto callback function structure used by …\n@brief Structure representing WPS factory information for …\n&lt; WPS failed during auth\n&lt; WPS failed due to incorrect config\n&lt; WPS normal fail reason\n@brief Enumeration of WPS (Wi-Fi Protected Setup) types.\n&lt; The type of WPS to be used (PBC or PIN).\n&lt; WPS is disabled\n&lt; Maximum value for WPS type enumeration\n&lt; WPS Push Button Configuration method\n&lt; WPS PIN (Personal Identification Number) method\n@brief Enumeration of WPS (Wi-Fi Protected Setup) types.\n@brief Custom driver SPI write\n&lt; Write without context pointer\n&lt; sector write function\n&lt; Gatt client callback param of ESP_GATTC_WRITE_DESCR_EVT\n&lt; Gatt server callback param of ESP_GATTS_WRITE_EVT\nSlicer for write data. The <code>program_page</code> should be called …\nSlicer for write data. The <code>program_page</code> should be called …\n&lt; Write with context pointer\n@brief Write PHY register\n@brief Write PHY register\n@brief Write PHY register\n&lt; WS pin, input in slave role, output in master role\n&lt; WS pin, input in slave role, output in master role\n&lt; WS pin, input in slave role, output in master role\n&lt; HTTP path to update protocol to websocket\n&lt; WS signal polarity, set true to enable high lever first\n&lt; WS signal polarity, set true to enable high lever first\n&lt; not a valid opcode to indicate no message previously …\n&lt; WS signal width (i.e. the number of BCLK ticks that WS …\n&lt; WS signal width (i.e. the number of BCLK ticks that WS …\n@cond\n@cond\nClear bits within an event group.  This function cannot be …\n@brief Creates an event group with specific memory …\nA version of xEventGroupGetBits() that can be called from …\nSet bits within an event group. This function cannot be …\nAtomically set bits within an event group, then wait for a …\n[Potentially] block to wait for one or more bits to be set …\n&lt; The handle of the task to which the rest of the …\n&lt; The handle of the task to which the rest of the …\n@brief Checks if a given piece of memory can be used to …\n@brief Checks if a given piece of memory can be used to …\n@brief Get the tick rate per second\n@brief Checks if the current core is in an ISR context\n@brief Check if in ISR context from High priority ISRs\n@brief Disable interrupts in a nested manner (meant to be …\n@brief Checks if a given piece of memory can be used to …\nAdds a queue or semaphore to a queue set that was …\n@cond !DOC_EXCLUDE_HEADER_SECTION\nQueue sets provide a mechanism to allow a task to block …\n@brief Creates a queue with specific memory capabilities\nIt is preferred that the macros xQueueSend(), …\nIt is preferred that the macros xQueueSendFromISR(), …\nQueries a queue to determine if the queue is empty. This …\nQueries a queue to determine if the queue is full. This …\nReceive an item from a queue without removing the item …\nA version of xQueuePeek() that can be called from an …\nReceive an item from a queue.  The item is received by …\nReceive an item from a queue.  It is safe to use this …\nRemoves a queue or semaphore from a queue set.  A queue or …\nxQueueSelectFromSet() selects from the members of a queue …\nA version of xQueueSelectFromSet() that can be used from …\n@brief   Add the ring buffer to a queue set. Notified when …\n@brief       Create a ring buffer\n@brief Create a ring buffer of type RINGBUF_TYPE_NOSPLIT …\n@brief       Create a ring buffer but manually provide the …\n@brief Creates a ring buffer with specific memory …\n@brief   Get current free size available for an item/data …\n@brief   Get maximum size of an item that can be placed in …\n@brief Retrieve the pointers to a statically created ring …\n@brief   Debugging function to print the internal pointers …\n@brief   Retrieve an item from the ring buffer\n@brief   Retrieve an item from the ring buffer in an ISR\n@brief   Retrieve a split item from an allow-split ring …\n@brief   Retrieve a split item from an allow-split ring …\n@brief   Retrieve bytes from a byte buffer, specifying the …\n@brief   Retrieve bytes from a byte buffer, specifying the …\n@brief   Remove the ring buffer from a queue set\n@brief       Insert an item into the ring buffer\n@brief Acquire memory from the ring buffer to be written …\n@brief       Actually send an item into the ring buffer …\n@brief       Insert an item into the ring buffer in an ISR\n@brief Struct that is equivalent in size to the ring buffer…\n@cond\nQueries a stream buffer to see how much data it contains, …\n@cond !DOC_EXCLUDE_HEADER_SECTION\n@cond\nQueries a stream buffer to see if it is empty.  A stream …\nQueries a stream buffer to see if it is full.  A stream …\nReceives bytes from a stream buffer.\nFor advanced users only.\nAn interrupt safe version of the API function that …\nResets a stream buffer to its initial, empty, state.  Any …\nSends bytes to a stream buffer.  The bytes are copied into …\nFor advanced users only.\nInterrupt safe version of the API function that sends a …\nA stream buffer’s trigger level is the number of bytes …\nQueries a stream buffer to see how much free space it …\n@brief Task Snapshot structure\nUsed with the uxTaskGetSystemState() function to return …\n@cond !DOC_EXCLUDE_HEADER_SECTION\nINCLUDE_xTaskAbortDelay must be defined as 1 in …\nCalls the hook function associated with xTask.  Passing …\nThis function corrects the tick count value after the …\nDetermines if pxTicksToWait ticks has passed since a time …\n@brief Create a new task that is pinned to a particular …\n@brief Creates a pinned task where its stack has specific …\n@brief Create a new static task that is pinned to a …\nINCLUDE_xTaskDelayUntil must be defined as 1 for this …\nSee https://www.FreeRTOS.org/RTOS-task-notifications.html …\nSee https://www.FreeRTOS.org/RTOS-task-notifications.html …\nSee https://www.FreeRTOS.org/RTOS-task-notifications.html …\nWaits for a direct to task notification to be pending at a …\n@brief Get the current core ID of a particular task\n@brief Get the handle of the task currently running on a …\nNOTE:  This function takes a relatively long time to …\nxTaskGetIdleTaskHandle() is only available if …\n@brief Get the handle of idle task for the given core.\n@brief Get the next task using the task iterator.\n@return The count of ticks since vTaskStartScheduler was …\n@return The count of ticks since vTaskStartScheduler was …\n@cond !DOC_EXCLUDE_HEADER_SECTION\n&lt; A number unique to the task.\n&lt; A number unique to the task.\nResumes scheduler activity after it was suspended by a …\nINCLUDE_xTaskResumeFromISR must be defined as 1 for this …\n@cond !DOC_EXCLUDE_HEADER_SECTION\nReturns the time in ticks at which the timer will expire.  …\nReturns the period of a timer.\nQueries a timer to determine if it is an auto-reload …\nSimply returns the handle of the timer service/daemon …\nQueries a timer to see if it is active or dormant.\nUsed to defer the execution of a function to the RTOS …\nUsed from application interrupt service routines to defer …\n&lt; Xoff flow control char\n&lt; If the software flow control is enabled and the data …\n&lt; Xon flow control char\n&lt; If the software flow control is enabled and the data …\n&lt; Date.\nYield to other tasks. Called during erase operations.\n&lt; zone ID\n&lt; zone ID\nBuild time in the local timescale.\nBuild time in UTC.\nCamel case, eg: <code>fooBarBaz</code>. The first character is always …\nThe casing style of a string.\nKebab case, eg: <code>foo-bar-baz</code>. Also turns the string …\nLowercase\nWrapper for many std types, which implements the …\nPascal case, eg: <code>FooBarBaz</code>. The first character is always …\nSnake case, eg: <code>foo_bar_baz</code>. Also turns the string …\nThe return value of <code>str_splice</code>\nUppercase\nKebab case, eg: <code>FOO-BAR-BAZ</code>. Also turns the string …\nSnake case, eg: <code>FOO_BAR_BAZ</code>. Also turns the string …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how much space is necessary to write the wrapped …\nComputes how much space is necessary to write …\nConcatenates constants of primitive types into a …\nFormats constants of primitive types into a <code>&amp;&#39;static str</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nComputes how long much space is necessary to write this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the casing style of a <code>&amp;&#39;static str</code> constant, …\nA string that had <code>removed</code> replaced with some other string.\nThe part of the string that was removed.\nFor constructing from a reference to an array.\nIndexes a <code>&amp;&#39;static str</code> constant, returning <code>None</code> when the …\nIndexes a <code>&amp;&#39;static str</code> constant.\nCreates a <code>&amp;&#39;static str</code> by repeating a <code>&amp;&#39;static str</code> …\nReplaces all the instances of <code>$pattern</code> in <code>$input</code> (a …\nReplaces a substring in a <code>&amp;&#39;static str</code> constant. Returns …\nReturns the absolute value of this integer, as the …\nReturns the absolute value of this integer, as the …\nReturns the absolute value of this integer, as the …\nReturns the absolute value of this integer.\nReturns the absolute value of this integer, as the …\nReturns the absolute value of this integer, as the …\nReturns the absolute value of this integer, as the …\nReturns the absolute value of this integer, as the …\nReturns the absolute value of this integer, as the …\nReturns the absolute value of this integer, as the …\nReturns the absolute value of this integer, as the …\nReturns the absolute value of this integer, as the …\nExecutes the supplied future on the current thread, thus …\nCreates a FreeRTOS task.\nDeletes a FreeRTOS task.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>CriticalSection</code> instance\nSafety\nSafety\nExample\nYield from the current task once, allowing other tasks to …\nSingle-slot lock-free signaling primitive supporting …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Notification</code>.\nMarks the supplied bits in this <code>Notification</code> as notified. …\nMarks the least significant bit (bit 0) in this …\nA utility to help in implementing a custom <code>wait</code> logic: …\nNon-blocking method to check whether this notification has …\nClears the state of this notification by removing any …\nFuture that completes when this <code>Notification</code> has been …\nA mutex that allows borrowing data across executors but …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>EspRawMutex</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nThin wrapper on top of the FreeRTOS queue.\nRetrieves the underlying FreeRTOS handle.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAllocate a new queue on the heap.\nCreate a new queue which is not deleted on <code>Drop</code>, but owned …\nCopy the first message from the queue without removing it.\nReceive a message from the queue and remove it.\nCopy item to back of queue, blocking for <code>timeout</code> ticks if …\nCopy item to front of queue, blocking for <code>timeout</code> ticks if …\nFlags to indicate the capabilities of the various memo\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the configured alarm value\nEnable or disable counter reload function when alarm event …\nTimer configuration\nReturns the current counter value of the timer\nDelays for <code>counter</code> ticks\nEnable or disable the timer.\nEnable or disable the alarm.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nResets the internal wait notification\nSet the alarm value of the timer.\nManually set the current counter value of the timer.\nSubscribes the provided callback for ISR notifications. As …\nSubscribes the provided callback for ISR notifications. As …\nReturns the tick rate of the timer.\nWait for an alarm interrupt to occur\nEnable or disable counter reload function when alarm event …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents DATA event with timeout_flag set\nUART data was received and/or a timeout was triggered\nSerial abstraction\nSerial receiver")