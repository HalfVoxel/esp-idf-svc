searchState.loadedDescShard("embedded_svc", 0, "Returns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nError type of all the IO operations on this type.\nBase trait for all IO traits, defining the error type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nError trait.\nError type of all the IO operations on this type.\nBase trait for all IO traits, defining the error type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the kind of this error.\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nAn entity already exists, often a file.\nThe operation failed because a pipe was closed.\nBlocking buffered reader.\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nSets the offset to the current position plus the specified …\nSets the offset to the size of this object plus the …\nError trait.\nError type of all the IO operations on this type.\nPossible kinds of errors.\nBase trait for all IO traits, defining the error type.\nAn error was encountered while formatting.\nThe target slice was full and so could not receive any new …\nThis operation was interrupted.\nData not valid for the operation were encountered.\nA parameter was incorrect.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nUnspecified error kind.\nError returned by the inner Read.\nError returned by the inner Write.\nAn operation could not be completed, because it failed to …\nThe operation lacked the necessary privileges to complete.\nBlocking reader.\nError returned by <code>Read::read_exact</code>\nGet whether a reader is ready.\nBlocking seek within streams.\nEnumeration of possible methods to seek within an I/O …\nErrors that could be returned by <code>Write</code> on <code>&amp;mut [u8]</code>.\nSets the offset to the provided number of bytes.\nThe I/O operation’s timeout expired, causing it to be …\nAn EOF error was encountered before reading the exact …\nThis operation is unsupported on this platform.\nBlocking writer.\nError returned by <code>Write::write_fmt</code>\nGet whether a writer is ready.\nAn attempted write could not write any data.\nTell this buffer that <code>amt</code> bytes have been consumed from …\nReturn the contents of the internal buffer, filling it …\nFlush this output stream, blocking until all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the kind of this error.\nRead some bytes from this source into the specified …\nRead the exact number of bytes required to fill <code>buf</code>.\nGet whether the reader is ready for immediately reading.\nRewind to the beginning of a stream.\nSeek to an offset, in bytes, in a stream.\nReturns the current seek position from the start of the …\nWrite a buffer into this writer, returning how many bytes …\nWrite an entire buffer into this writer.\nWrite a formatted string into this writer, returning any …\nGet whether the writer is ready for immediately writing.\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nAn entity already exists, often a file.\nThe operation failed because a pipe was closed.\nAsync buffered reader.\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nSets the offset to the current position plus the specified …\nSets the offset to the size of this object plus the …\nError trait.\nError type of all the IO operations on this type.\nPossible kinds of errors.\nBase trait for all IO traits, defining the error type.\nThis operation was interrupted.\nData not valid for the operation were encountered.\nA parameter was incorrect.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nUnspecified error kind.\nError returned by the inner Read.\nAn operation could not be completed, because it failed to …\nThe operation lacked the necessary privileges to complete.\nAsync reader.\nError returned by <code>Read::read_exact</code>\nGet whether a reader is ready.\nAsync seek within streams.\nEnumeration of possible methods to seek within an I/O …\nSets the offset to the provided number of bytes.\nThe I/O operation’s timeout expired, causing it to be …\nAn EOF error was encountered before reading the exact …\nThis operation is unsupported on this platform.\nAsync writer.\nGet whether a writer is ready.\nAn attempted write could not write any data.\nTell this buffer that <code>amt</code> bytes have been consumed from …\nReturn the contents of the internal buffer, filling it …\nFlush this output stream, ensuring that all intermediately …\nGet the kind of this error.\nRead some bytes from this source into the specified …\nRead the exact number of bytes required to fill <code>buf</code>.\nGet whether the reader is ready for immediately reading.\nRewind to the beginning of a stream.\nSeek to an offset, in bytes, in a stream.\nReturns the current seek position from the start of the …\nWrite a buffer into this writer, returning how many bytes …\nWrite an entire buffer into this writer.\nGet whether the writer is ready for immediately writing.\nThe size of an IPv4 address in bits.\nThe size of an IPv6 address in bits.\nAn IPv4 address representing the broadcast address: …\nFor backwards compatibility. Might be removed in future …\nFor backwards compatibility. Might be removed in future …\nFor backwards compatibility. Might be removed in future …\nAn IPv4 address with the address pointing to localhost: …\nAn IPv6 address representing localhost: <code>::1</code>.\nFor backwards compatibility. Might be removed in future …\nFor backwards compatibility. Might be removed in future …\nFor backwards compatibility. Might be removed in future …\nAn IPv4 address representing an unspecified address: …\nAn IPv6 address representing the unspecified address: <code>::</code>\nAn IPv4 address.\nAn IPv4 socket address.\nAn IPv6 address.\nAn IPv6 socket address.\nReturns the flow information associated with this address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCopies this address to a new <code>IpAddr::V4</code>.\nCopies this address to a new <code>IpAddr::V6</code>.\nCreates an <code>IpAddr::V6</code> from an eight element 16-bit array.\nCreates an <code>IpAddr::V6</code> from a sixteen element byte array.\nCreates an <code>IpAddr::V4</code> from a four element byte array.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an <code>Ipv4Addr</code> from a four element byte array.\nUses <code>Ipv4Addr::from_bits</code> to convert a host byte order <code>u32</code> …\nReturns the argument unchanged.\nCreates an <code>Ipv6Addr</code> from a sixteen element byte array.\nUses <code>Ipv6Addr::from_bits</code> to convert a host byte order <code>u128</code> …\nCreates an <code>Ipv6Addr</code> from an eight element 16-bit array.\nConverts a <code>SocketAddrV4</code> into a <code>SocketAddr::V4</code>.\nConverts a tuple struct (Into&lt;<code>IpAddr</code>&gt;, <code>u16</code>) into a …\nReturns the argument unchanged.\nConverts a <code>SocketAddrV6</code> into a <code>SocketAddr::V6</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a native byte order <code>u32</code> into an IPv4 address.\nConverts a native byte order <code>u128</code> into an IPv6 address.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the IP address associated with this socket address.\nReturns the IP address associated with this socket address.\nReturns the IP address associated with this socket address.\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this address part of the <code>198.18.0.0/15</code> …\nReturns <code>true</code> if this is an address reserved for …\nReturns <code>true</code> if this is a broadcast address (…\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this is an address reserved for …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if this address is an <code>IPv4</code> address, and <code>false</code> …\nReturns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …\nReturns <code>true</code> if the address is an IPv4-mapped address (…\nReturns <code>true</code> if this address is an <code>IPv6</code> address, and <code>false</code> …\nReturns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …\nReturns <code>true</code> if the address is link-local (<code>169.254.0.0/16</code>).\nReturns <code>true</code> if this is a loopback address.\nReturns <code>true</code> if this is a loopback address (<code>127.0.0.0/8</code>).\nReturns <code>true</code> if this is the loopback address (<code>::1</code>), as …\nReturns <code>true</code> if this is a multicast address.\nReturns <code>true</code> if this is a multicast address (<code>224.0.0.0/4</code>).\nReturns <code>true</code> if this is a multicast address (<code>ff00::/8</code>).\nReturns <code>true</code> if this is a private address.\nReturns <code>true</code> if this address is reserved by IANA for …\nReturns <code>true</code> if this address is part of the Shared Address …\nReturns <code>true</code> if this is a unicast address, as defined by …\nReturns <code>true</code> if the address is a globally routable unicast …\nReturns <code>true</code> if the address is a unicast address with …\nReturns <code>true</code> if this is a unique local address (<code>fc00::/7</code>).\nReturns <code>true</code> for the special ‘unspecified’ address.\nReturns <code>true</code> for the special ‘unspecified’ address (…\nReturns <code>true</code> for the special ‘unspecified’ address (<code>::</code>…\nReturns the address’s multicast scope if the address is …\nCreates a new IPv4 address from four eight-bit octets.\nCreates a new IPv6 address from eight 16-bit segments.\nCreates a new socket address from an IP address and a port …\nCreates a new socket address from an <code>IPv4</code> address and a …\nCreates a new socket address from an <code>IPv6</code> address, a …\nReturns the four eight-bit integers that make up this …\nReturns the sixteen eight-bit integers the IPv6 address …\nParse an IP address from a slice of bytes.\nParse an IPv4 address from a slice of bytes.\nParse an IPv6 address from a slice of bytes.\nParse a socket address from a slice of bytes.\nParse an IPv4 socket address from a slice of bytes.\nParse an IPv6 socket address from a slice of bytes.\nReturns the port number associated with this socket …\nReturns the port number associated with this socket …\nReturns the port number associated with this socket …\nReturns the scope ID associated with this address.\nReturns the eight 16-bit segments that make up this …\nChanges the flow information associated with this socket …\nChanges the IP address associated with this socket address.\nChanges the IP address associated with this socket address.\nChanges the IP address associated with this socket address.\nChanges the port number associated with this socket …\nChanges the port number associated with this socket …\nChanges the port number associated with this socket …\nChanges the scope ID associated with this socket address.\nConverts an IPv4 address into a <code>u32</code> representation using …\nConverts an IPv6 address into a <code>u128</code> representation using …\nConverts this address to an <code>IpAddr::V4</code> if it is an …\nConverts this address to an <code>IpAddr::V4</code> if it is an …\nConverts this address to an <code>IPv4</code> address if it is either …\nConverts this address to an <code>IPv4</code> address if it’s an …\nConverts this address to an IPv4-compatible <code>IPv6</code> address.\nConverts this address to an IPv4-mapped <code>IPv6</code> address.\nQuality of service\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdvertize PMF support and wether PMF is required or not\nConfiguration for wifi in STA mode\nScan every channel and connect according to ScanSortMethod …\nConnect to the first found AP and stop scanning\nNo support for PMF will be advertized (default)\nProtected Management Frame configuration\nThe scan method to use when connecting to an AP\nSort by Security\nSort by signal strength (default)\nBSSID of the target AP\nThe expected Channel of the target AP\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPMF configuration with PMF optional but available\nPMF configuration with PMF strictly required\nProtected Management Frame configuration\nThe scan method to use when searching for the target AP\nSSID of the target AP\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")